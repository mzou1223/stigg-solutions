"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReuseOngoingExecution = void 0;
// This decorator ensures that a function, when invoked with the same arguments,
// does not execute multiple times simultaneously. Instead, it reuses the promise from the ongoing
// execution for subsequent calls with the same arguments.
const ReuseOngoingExecution = (getUniqueKey) => {
    function getOnGoingPromises(target) {
        let onGoingPromises = target._onGoingPromises;
        if (!onGoingPromises) {
            onGoingPromises = new Map();
            target._onGoingPromises = onGoingPromises;
        }
        return onGoingPromises;
    }
    return (_target, propertyKey, descriptor) => {
        const fn = descriptor.value;
        descriptor.value = function decoratedValue(...args) {
            const onGoingPromises = getOnGoingPromises(this);
            const key = `${propertyKey}:${getUniqueKey(...args)}`;
            if (key) {
                const existingPromise = onGoingPromises.get(key);
                if (existingPromise) {
                    return existingPromise;
                }
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call
            const result = fn.apply(this, args);
            if (key) {
                const promise = result.finally(() => onGoingPromises.delete(key));
                onGoingPromises.set(key, promise);
                return promise;
            }
            return result;
        };
    };
};
exports.ReuseOngoingExecution = ReuseOngoingExecution;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmV1c2VPbmdvaW5nRXhlY3V0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2RlY29yYXRvcnMvUmV1c2VPbmdvaW5nRXhlY3V0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLGdGQUFnRjtBQUNoRixrR0FBa0c7QUFDbEcsMERBQTBEO0FBQ25ELE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxZQUE0QixFQUFFLEVBQUU7SUFDcEUsU0FBUyxrQkFBa0IsQ0FBQyxNQUE2QjtRQUN2RCxJQUFJLGVBQWUsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7UUFFOUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNwQixlQUFlLEdBQUcsSUFBSSxHQUFHLEVBQTRCLENBQUM7WUFDdEQsTUFBTSxDQUFDLGdCQUFnQixHQUFHLGVBQWUsQ0FBQztTQUMzQztRQUVELE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxPQUFPLENBQUMsT0FBWSxFQUFFLFdBQW1CLEVBQUUsVUFBOEIsRUFBRSxFQUFFO1FBQzNFLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFFNUIsVUFBVSxDQUFDLEtBQUssR0FBRyxTQUFTLGNBQWMsQ0FBQyxHQUFHLElBQVc7WUFDdkQsTUFBTSxlQUFlLEdBQUcsa0JBQWtCLENBQUMsSUFBNkIsQ0FBQyxDQUFDO1lBQzFFLE1BQU0sR0FBRyxHQUFHLEdBQUcsV0FBVyxJQUFJLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7WUFFdEQsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsTUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDakQsSUFBSSxlQUFlLEVBQUU7b0JBQ25CLE9BQU8sZUFBZSxDQUFDO2lCQUN4QjthQUNGO1lBRUQsNkRBQTZEO1lBQzdELE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBRXBDLElBQUksR0FBRyxFQUFFO2dCQUNQLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNsRSxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDbEMsT0FBTyxPQUFPLENBQUM7YUFDaEI7WUFFRCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUF0Q1csUUFBQSxxQkFBcUIseUJBc0NoQyJ9