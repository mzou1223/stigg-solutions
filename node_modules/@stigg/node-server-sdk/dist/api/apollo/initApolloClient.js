"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@apollo/client/core");
const isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const utilities_1 = require("@apollo/client/utilities");
const configuration_1 = require("../../configuration");
const requestHeaders_1 = require("../../utils/requestHeaders");
const retry_1 = require("@apollo/client/link/retry");
const WebSocketLink_1 = require("./WebSocketLink");
const TimeoutLink_1 = require("./TimeoutLink");
const OperationTimeoutError_1 = require("./OperationTimeoutError");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const packageJson = require('../../../package.json');
const retryIf = (error) => {
    const doNotRetryCodes = [500, 400];
    const errorIsTimeout = error instanceof OperationTimeoutError_1.OperationTimeoutError;
    return !!error && !doNotRetryCodes.includes(error.statusCode) && !errorIsTimeout;
};
function getAuthLink(apiKey, instanceId) {
    const authLink = new core_1.ApolloLink((operation, forward) => {
        operation.setContext({
            headers: (0, requestHeaders_1.buildRequestHeaders)(apiKey, instanceId, operation.operationName),
        });
        return forward(operation);
    });
    return authLink;
}
function getHttpLink(baseUri) {
    return new core_1.HttpLink({
        uri: `${baseUri}/graphql`,
        fetch: cross_fetch_1.default,
    });
}
function getWsLink(wsUrl, onConnected, apiKey, loggerService) {
    return new WebSocketLink_1.WebSocketLink({
        retryAttempts: Infinity,
        isFatalConnectionProblem: () => false,
        connectionAckWaitTimeout: Infinity,
        keepAlive: 10000,
        url: `${wsUrl}/graphql`,
        on: {
            connected: onConnected,
        },
        webSocketImpl: isomorphic_ws_1.default,
        connectionParams: {
            headers: (0, requestHeaders_1.buildRequestHeaders)(apiKey, loggerService.getInstanceId()),
        },
    }, loggerService);
}
const initApolloClient = ({ apiKey, baseUri, wsUrl, onConnected, loggerService, clientName = configuration_1.SDK_NAME, clientVersion = packageJson.version, timeout, }) => {
    const authLink = getAuthLink(apiKey, loggerService.getInstanceId());
    const httpLink = getHttpLink(baseUri);
    const timeoutHttpLink = new TimeoutLink_1.TimeoutLink(timeout).concat(httpLink);
    const retryLink = new retry_1.RetryLink({
        attempts: { max: 5, retryIf },
        delay: { initial: 500, max: 2000, jitter: true },
    });
    const wsLink = getWsLink(wsUrl, onConnected, apiKey, loggerService);
    const splitLink = (0, core_1.split)(({ query }) => {
        const definition = (0, utilities_1.getMainDefinition)(query);
        return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';
    }, wsLink, retryLink.concat(timeoutHttpLink));
    return new core_1.ApolloClient({
        link: authLink.concat(splitLink),
        cache: new core_1.InMemoryCache(),
        name: clientName,
        version: clientVersion,
    });
};
exports.default = initApolloClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdEFwb2xsb0NsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvYXBvbGxvL2luaXRBcG9sbG9DbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBK0Y7QUFDL0Ysa0VBQStCO0FBQy9CLDhEQUFnQztBQUNoQyx3REFBNkQ7QUFFN0QsdURBQStDO0FBQy9DLCtEQUFpRTtBQUNqRSxxREFBc0Q7QUFDdEQsbURBQWdEO0FBRWhELCtDQUE0QztBQUM1QyxtRUFBZ0U7QUFFaEUsOERBQThEO0FBQzlELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBRXJELE1BQU0sT0FBTyxHQUFHLENBQUMsS0FBVSxFQUFFLEVBQUU7SUFDN0IsTUFBTSxlQUFlLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkMsTUFBTSxjQUFjLEdBQUcsS0FBSyxZQUFZLDZDQUFxQixDQUFDO0lBQzlELE9BQU8sQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO0FBQ25GLENBQUMsQ0FBQztBQUVGLFNBQVMsV0FBVyxDQUFDLE1BQTBCLEVBQUUsVUFBOEI7SUFDN0UsTUFBTSxRQUFRLEdBQUcsSUFBSSxpQkFBVSxDQUFDLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxFQUFFO1FBQ3JELFNBQVMsQ0FBQyxVQUFVLENBQUM7WUFDbkIsT0FBTyxFQUFFLElBQUEsb0NBQW1CLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsYUFBYSxDQUFDO1NBQzFFLENBQUMsQ0FBQztRQUNILE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQUVELFNBQVMsV0FB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