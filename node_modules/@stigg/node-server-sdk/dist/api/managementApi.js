"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sdk_1 = require("@stigg/api-client-js/src/generated/sdk");
const lodash_1 = require("lodash");
class ManagementApi {
    constructor(client, edgeApiClient) {
        this.client = client;
        this.edgeApiClient = edgeApiClient;
    }
    async provisionCustomer(provisionCustomerInput) {
        return this.client.mutate({
            mutation: sdk_1.ProvisionCustomerDocument,
            variables: { input: Object.assign({}, provisionCustomerInput) },
        });
    }
    async importCustomerBulk(customerInput) {
        return this.client.mutate({
            mutation: sdk_1.ImportCustomerBulkDocument,
            variables: { input: Object.assign({}, customerInput) },
        });
    }
    async importCustomer(customerInput) {
        return this.client.mutate({
            mutation: sdk_1.ImportCustomerDocument,
            variables: { input: Object.assign({}, customerInput) },
        });
    }
    async updateCustomer(customerInput) {
        return this.client.mutate({
            mutation: sdk_1.UpdateCustomerDocument,
            variables: { input: Object.assign({}, customerInput) },
        });
    }
    async detachCustomerPaymentMethod(customerId) {
        return this.client.mutate({
            mutation: sdk_1.DetachCustomerPaymentMethodDocument,
            variables: { input: { customerId } },
        });
    }
    async getCustomer(customerId) {
        return this.client.query({
            query: sdk_1.GetCustomerByIdDocument,
            variables: {
                input: { customerId },
            },
            fetchPolicy: 'no-cache',
        });
    }
    async getCustomerStatistics(customerId) {
        return this.client.query({
            query: sdk_1.GetCustomerStatisticsDocument,
            variables: {
                input: { customerId },
            },
            fetchPolicy: 'no-cache',
        });
    }
    async archiveCustomer(customerId) {
        return this.client.mutate({
            mutation: sdk_1.ArchiveCustomerDocument,
            variables: {
                input: { customerId },
            },
        });
    }
    async getCreditBalance(input) {
        return this.client.query({
            query: sdk_1.GetCreditBalanceDocument,
            variables: {
                input,
            },
        });
    }
    async getCreditGrants(input) {
        return this.client.query({
            query: sdk_1.GetCreditGrantsDocument,
            variables: {
                input,
            },
        });
    }
    async grantCredits(input) {
        return this.client.mutate({
            mutation: sdk_1.GrantCreditsDocument,
            variables: {
                input,
            },
        });
    }
    async unarchiveCustomer(customerId) {
        return this.client.mutate({
            mutation: sdk_1.UnarchiveCustomerDocument,
            variables: {
                input: { customerId },
            },
        });
    }
    async getSubscriptions(customerId, resourceId, status, productId, pagination = { limit: 10 }) {
        return this.client.query({
            query: sdk_1.GetSubscriptionsDocument,
            variables: Object.assign({ filter: Object.assign(Object.assign(Object.assign(Object.assign({}, (customerId ? { customerId: { eq: customerId } } : {})), (resourceId
                    ? {
                        resourceId: (0, lodash_1.isArray)(resourceId) ? { in: resourceId } : { eq: resourceId },
                    }
                    : {})), (status
                    ? {
                        status: (0, lodash_1.isArray)(status) ? { in: status } : { eq: status },
                    }
                    : {})), (productId ? { productId: (0, lodash_1.isArray)(productId) ? { in: productId } : { eq: productId } } : {})) }, (pagination
                ? {
                    paging: Object.assign({}, (pagination.startingAfter
                        ? { first: pagination.limit, after: pagination.startingAfter }
                        : pagination.endingBefore
                            ? { last: pagination.limit, before: pagination.endingBefore }
                            : { first: pagination.limit })),
                }
                : {})),
            fetchPolicy: 'no-cache',
        });
    }
    async getActiveSubscriptions(customerId, resourceId) {
        return this.client.query({
            query: sdk_1.GetActiveSubscriptionsDocument,
            variables: {
                // keep resourceId for back-compatability (behavior of raising an error when resourceId is not found)
                input: (0, lodash_1.isArray)(resourceId) ? { customerId, resourceIds: resourceId } : { customerId, resourceId: resourceId },
            },
            fetchPolicy: 'no-cache',
        });
    }
    async getActiveSubscriptionsList(customerId, resourceId) {
        if (this.edgeApiClient) {
            return this.edgeApiClient.getActiveSubscriptionsList(customerId, resourceId);
        }
        return this.client.query({
            query: sdk_1.GetActiveSubscriptionsListDocument,
            variables: {
                // keep resourceId for back-compatability (behavior of raising an error when resourceId is not found)
                input: (0, lodash_1.isArray)(resourceId) ? { customerId, resourceIds: resourceId } : { customerId, resourceId: resourceId },
            },
            fetchPolicy: 'no-cache',
        });
    }
    async getSubscription(subscriptionId) {
        return this.client.query({
            query: sdk_1.GetSubscriptionDocument,
            variables: {
                input: {
                    subscriptionId,
                },
            },
            fetchPolicy: 'no-cache',
        });
    }
    async updateSubscription(updateSubscription) {
        return this.client.mutate({
            mutation: sdk_1.UpdateSubscriptionDocument,
            variables: {
                input: {
                    refId: updateSubscription.subscriptionId,
                    unitQuantity: updateSubscription.unitQuantity,
                    billableFeatures: updateSubscription.billableFeatures,
                    additionalMetaData: updateSubscription.metadata,
                    addons: updateSubscription.addons,
                    billingPeriod: updateSubscription.billingPeriod,
                    awaitPaymentConfirmation: updateSubscription.awaitPaymentConfirmation,
                    billingInformation: updateSubscription.billingInformation,
                    trialEndDate: updateSubscription.trialEndDate,
                    scheduleStrategy: updateSubscription.scheduleStrategy,
                    subscriptionEntitlements: updateSubscription.subscriptionEntitlements,
                    appliedCoupon: updateSubscription.appliedCoupon,
                    priceOverrides: updateSubscription.priceOverrides,
                },
            },
        });
    }
    async createSubscription(createSubscription) {
        const { skipTrial } = createSubscription;
        const isTrial = skipTrial ? { isOverridingTrialConfig: true, isTrial: false } : {};
        return this.client.mutate({
            mutation: sdk_1.CreateSubscriptionDocument,
            variables: {
                input: Object.assign({ planId: createSubscription.planId, customerId: createSubscription.customerId, resourceId: createSubscription.resourceId, startDate: createSubscription.startDate, addons: createSubscription.addons, billingPeriod: createSubscription.billingPeriod, priceUnitAmount: createSubscription.unitQuantity, additionalMetaData: createSubscription.metadata, awaitPaymentConfirmation: createSubscription.awaitPaymentConfirmation, billingInformation: createSubscription.billingInformation, promotionCode: createSubscription.promotionCode, appliedCoupon: createSubscription.appliedCoupon }, isTrial),
            },
        });
    }
    async provisionSubscription(provisionSubscription) {
        const { checkoutOptions, addons, billingPeriod, billingInformation, awaitPaymentConfirmation, customerId, payingCustomerId, planId, metadata, startDate, unitQuantity, billableFeatures, skipTrial, id, resourceId, promotionCode, billingCountryCode, billingId, subscriptionEntitlements, trialOverrideConfiguration, scheduleStrategy, paymentCollectionMethod, appliedCoupon, priceOverrides, salesforceId, } = provisionSubscription;
        return this.client.mutate({
            mutation: sdk_1.ProvisionSubscriptionDocument,
            variables: {
                input: {
                    planId,
                    customerId,
                    payingCustomerId,
                    startDate,
                    addons,
                    billingId,
                    billingPeriod,
                    unitQuantity,
                    billableFeatures,
                    additionalMetaData: metadata,
                    awaitPaymentConfirmation,
                    refId: id,
                    resourceId,
                    skipTrial,
                    checkoutOptions,
                    billingInformation,
                    promotionCode,
                    billingCountryCode,
                    subscriptionEntitlements,
                    trialOverrideConfiguration,
                    scheduleStrategy,
                    paymentCollectionMethod,
                    appliedCoupon,
                    priceOverrides,
                    salesforceId,
                },
            },
        });
    }
    async applySubscription({ customerId, payingCustomerId, planId, paymentMethodId, addons, billableFeatures, billingCountryCode, billingId, billingInformation, billingPeriod, metadata, promotionCode, resourceId, skipTrial, startDate, unitQuantity, trialOverrideConfiguration, scheduleStrategy, paymentCollectionMethod, appliedCoupon, priceOverrides, }) {
        return this.client.mutate({
            mutation: sdk_1.ApplySubscriptionDocument,
            variables: {
                input: {
                    customerId,
                    payingCustomerId,
                    planId,
                    paymentMethodId,
                    startDate,
                    addons,
                    billingId,
                    billingPeriod,
                    unitQuantity,
                    billableFeatures,
                    additionalMetaData: metadata,
                    resourceId,
                    skipTrial,
                    billingInformation,
                    promotionCode,
                    billingCountryCode,
                    trialOverrideConfiguration,
                    scheduleStrategy,
                    paymentCollectionMethod,
                    appliedCoupon,
                    priceOverrides,
                },
            },
        });
    }
    async previewSubscription(input) {
        return this.client.mutate({
            mutation: sdk_1.PreviewSubscriptionDocument,
            fetchPolicy: 'no-cache',
            variables: {
                input: {
                    planId: input.planId,
                    customerId: input.customerId,
                    payingCustomerId: input.payingCustomerId,
                    resourceId: input.resourceId,
                    startDate: input.startDate,
                    addons: input.addons,
                    billingPeriod: input.billingPeriod,
                    billableFeatures: input.billableFeatures,
                    unitQuantity: input.unitQuantity,
                    promotionCode: input.promotionCode,
                    billingCountryCode: input.billingCountryCode,
                    billingInformation: input.billingInformation,
                    scheduleStrategy: input.scheduleStrategy,
                    appliedCoupon: input.appliedCoupon,
                },
            },
        });
    }
    async previewNextInvoice(input) {
        return this.client.mutate({
            mutation: sdk_1.PreviewNextInvoiceDocument,
            fetchPolicy: 'no-cache',
            variables: {
                input: {
                    subscriptionId: input.subscriptionId,
                },
            },
        });
    }
    async importSubscriptionBulk(importSubscriptionBulk) {
        return this.client.mutate({
            mutation: sdk_1.ImportSubscriptionsBulkDocument,
            variables: {
                input: importSubscriptionBulk,
            },
        });
    }
    async cancelSubscription(cancelSubscription) {
        return this.client.mutate({
            mutation: sdk_1.CancelSubscriptionDocument,
            variables: {
                input: {
                    endDate: cancelSubscription.endDate,
                    subscriptionRefId: cancelSubscription.subscriptionId,
                    subscriptionCancellationTime: cancelSubscription.subscriptionCancellationTime,
                    subscriptionCancellationAction: cancelSubscription.subscriptionCancellationAction,
                    prorate: cancelSubscription.prorate,
                },
            },
        });
    }
    getPaywall({ productId, customerId, resourceId, billingCountryCode, fetchAllCountriesPrices, includeHiddenPlans, }) {
        // fetching paywall for public paywall from edge-api instead of graphql-api
        if (!customerId && this.edgeApiClient) {
            return this.edgeApiClient.getPaywall(productId, billingCountryCode, fetchAllCountriesPrices, includeHiddenPlans);
        }
        return this.client.query({
            query: sdk_1.GetPaywallDocument,
            fetchPolicy: 'no-cache',
            variables: {
                input: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (productId ? { productId } : {})), (customerId ? { customerId } : {})), (resourceId ? { resourceId } : {})), (billingCountryCode ? { billingCountryCode } : {})), (fetchAllCountriesPrices ? { fetchAllCountriesPrices } : {})), (includeHiddenPlans ? { includeHiddenPlans } : {})),
            },
        });
    }
    getProducts() {
        return this.client.query({
            query: sdk_1.GetProductsDocument,
            fetchPolicy: 'no-cache',
        });
    }
    getCoupons() {
        return this.client.query({
            query: sdk_1.GetCouponsDocument,
            fetchPolicy: 'no-cache',
        });
    }
    async estimateSubscription(input) {
        return this.client.mutate({
            mutation: sdk_1.EstimateSubscriptionDocument,
            variables: {
                input: {
                    planId: input.planId,
                    customerId: input.customerId,
                    payingCustomerId: input.payingCustomerId,
                    resourceId: input.resourceId,
                    startDate: input.startDate,
                    addons: input.addons,
                    billingPeriod: input.billingPeriod,
                    billingCountryCode: input.billingCountryCode,
                    unitQuantity: input.unitQuantity,
                    billableFeatures: input.billableFeatures,
                    billingInformation: input.billingInformation,
                    promotionCode: input.promotionCode,
                    skipTrial: input.skipTrial,
                    appliedCoupon: input.appliedCoupon,
                },
            },
        });
    }
    async estimateSubscriptionUpdate(input) {
        return this.client.mutate({
            mutation: sdk_1.EstimateSubscriptionUpdateDocument,
            variables: {
                input: {
                    subscriptionId: input.subscriptionId,
                    unitQuantity: input.unitQuantity,
                    addons: input.addons,
                    promotionCode: input.promotionCode,
                    billableFeatures: input.billableFeatures,
                    appliedCoupon: input.appliedCoupon,
                },
            },
        });
    }
    async cancelSubscriptionScheduledUpdates(input) {
        return this.client.mutate({
            mutation: sdk_1.CancelSubscriptionUpdatesDocument,
            variables: {
                input: Object.assign({}, input),
            },
        });
    }
    async migrateSubscriptionToLatest(input) {
        return this.client.mutate({
            mutation: sdk_1.MigrateSubscriptionToLatestDocument,
            variables: {
                input: { subscriptionId: input.subscriptionId, subscriptionMigrationTime: input.subscriptionMigrationTime },
            },
        });
    }
    /** @deprecated use {@link getUsageHistoryV2} */
    async fetchUsageHistory({ customerId, featureId, resourceId, startDate, endDate }) {
        return this.client.query({
            query: sdk_1.GetUsageHistoryDocument,
            variables: {
                usageHistoryInput: {
                    customerRefId: customerId,
                    featureRefId: featureId,
                    resourceRefId: resourceId,
                    startDate: startDate,
                    endDate: endDate || new Date(),
                },
            },
            fetchPolicy: 'no-cache',
        });
    }
    async getUsageHistoryV2(input) {
        return this.client.query({
            query: sdk_1.GetUsageHistoryV2Document,
            variables: {
                input,
            },
            fetchPolicy: 'no-cache',
        });
    }
    transferSubscription(input) {
        return this.client.query({
            query: sdk_1.TransferSubscriptionDocument,
            variables: {
                input,
            },
            fetchPolicy: 'no-cache',
        });
    }
    transferSubscriptionToResource(input) {
        return this.client.query({
            query: sdk_1.TransferSubscriptionToResourceDocument,
            variables: {
                input,
            },
            fetchPolicy: 'no-cache',
        });
    }
    delegateSubscriptionToCustomer(input) {
        return this.client.query({
            query: sdk_1.DelegateSubscriptionToCustomerDocument,
            variables: {
                input,
            },
            fetchPolicy: 'no-cache',
        });
    }
    grantPromotionalEntitlements(input) {
        return this.client.query({
            query: sdk_1.GrantPromotionalEntitlementsDocument,
            variables: {
                input,
            },
            fetchPolicy: 'no-cache',
        });
    }
    revokePromotionalEntitlement(input) {
        return this.client.query({
            query: sdk_1.RevokePromotionalEntitlementDocument,
            variables: {
                input,
            },
            fetchPolicy: 'no-cache',
        });
    }
}
exports.default = ManagementApi;
//# sourceMappingURL=data:application/json;base64,