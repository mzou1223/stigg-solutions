import { TypedEmitter } from 'tiny-typed-emitter';
import { EntitlementsUpdatedPayloadFragment, EntitlementUsageUpdatedFragment, PackagePublishedPayloadFragment } from '@stigg/api-client-js/src/generated/sdk';
import { CacheHit, CacheMiss } from './cacheInstrumentation';
import { AxiosRequestConfig, AxiosResponse } from 'axios';
export declare type NetworkRequestFailed = {
    errorMessage: string;
    errorCode?: string;
    traceId?: string;
    request?: AxiosRequestConfig;
    response?: AxiosResponse;
};
export interface Events {
    initializeSuccessfully: () => void;
    initializeFailed: (err: any) => void;
    entitlementsUpdated: (data: EntitlementsUpdatedPayloadFragment) => void;
    usageUpdated: (data: EntitlementUsageUpdatedFragment) => void;
    packagePublished: (data: PackagePublishedPayloadFragment) => void;
    cacheHit: (data: CacheHit) => void;
    cacheMiss: (data: CacheMiss) => void;
    apiKeyInvalid: () => void;
    networkRequestFailed: (data: NetworkRequestFailed) => void;
    redisClientError: (data: {
        error: Error;
        clientName: string;
    }) => void;
}
export declare type EventNames = keyof Events;
export declare class TypedEventEmitter extends TypedEmitter<Events> {
    constructor();
}
