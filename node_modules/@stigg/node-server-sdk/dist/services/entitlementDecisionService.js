"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntitlementDecisionService = void 0;
const models_1 = require("../models");
const lodash_1 = require("lodash");
// TODO: Extract to a common lib for other sdks
class EntitlementDecisionService {
    static decideEntitlementPolicy(customerExists, entitlement, requestUsage = 0, requestedValues = []) {
        var _a;
        if (!customerExists) {
            return { accessDeniedReason: models_1.AccessDeniedReason.CustomerNotFound, hasAccess: false };
        }
        if (!entitlement || !entitlement.calculatedEntitlement.feature) {
            return { hasAccess: false, accessDeniedReason: models_1.AccessDeniedReason.NoFeatureEntitlementInSubscription };
        }
        if (entitlement.calculatedEntitlement.accessDeniedReason) {
            return { hasAccess: false, accessDeniedReason: entitlement.calculatedEntitlement.accessDeniedReason };
        }
        const { featureType, meterType } = entitlement.calculatedEntitlement.feature;
        switch (featureType) {
            case models_1.FeatureType.Boolean:
                return { hasAccess: true };
            case models_1.FeatureType.Enum: {
                const missingValues = (0, lodash_1.difference)(requestedValues, entitlement.calculatedEntitlement.enumValues || []);
                if (!(0, lodash_1.isEmpty)(missingValues)) {
                    return {
                        hasAccess: false,
                        accessDeniedReason: models_1.AccessDeniedReason.RequestedValuesMismatch,
                    };
                }
                return { hasAccess: true };
            }
            case models_1.FeatureType.Number: {
                if (meterType === models_1.MeterType.None) {
                    return { hasAccess: true };
                }
                if (entitlement.calculatedEntitlement.hasUnlimitedUsage || entitlement.calculatedEntitlement.hasSoftLimit) {
                    return { hasAccess: true };
                }
                const usageLimit = ((_a = entitlement.calculatedEntitlement) === null || _a === void 0 ? void 0 : _a.usageLimit) || 0;
                const currentUsage = entitlement.featureUsage.currentUsage;
                if (currentUsage + requestUsage <= usageLimit) {
                    return { hasAccess: true };
                }
                else {
                    return { hasAccess: false, accessDeniedReason: models_1.AccessDeniedReason.RequestedUsageExceedingLimit };
                }
            }
        }
    }
}
exports.EntitlementDecisionService = EntitlementDecisionService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXRsZW1lbnREZWNpc2lvblNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmljZXMvZW50aXRsZW1lbnREZWNpc2lvblNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esc0NBQXVFO0FBQ3ZFLG1DQUE2QztBQUU3QywrQ0FBK0M7QUFDL0MsTUFBYSwwQkFBMEI7SUFDOUIsTUFBTSxDQUFDLHVCQUF1QixDQUNuQyxjQUF1QixFQUN2QixXQUFzQyxFQUN0QyxZQUFZLEdBQUcsQ0FBQyxFQUNoQixrQkFBNEIsRUFBRTs7UUFFOUIsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNuQixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsMkJBQWtCLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDO1NBQ3RGO1FBQ0QsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUU7WUFDOUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsMkJBQWtCLENBQUMsa0NBQWtDLEVBQUUsQ0FBQztTQUN4RztRQUVELElBQUksV0FBVyxDQUFDLHFCQUFxQixDQUFDLGtCQUFrQixFQUFFO1lBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1NBQ3ZHO1FBRUQsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsR0FBRyxXQUFXLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDO1FBRTdFLFFBQVEsV0FBVyxFQUFFO1lBQ25CLEtBQUssb0JBQVcsQ0FBQyxPQUFPO2dCQUN0QixPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDO1lBQzdCLEtBQUssb0JBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDckIsTUFBTSxhQUFhLEdBQUcsSUFBQSxtQkFBVSxFQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMscUJBQXFCLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUN0RyxJQUFJLENBQUMsSUFBQSxnQkFBTyxFQUFDLGFBQWEsQ0FBQyxFQUFFO29CQUMzQixPQUFPO3dCQUNMLFNBQVMsRUFBRSxLQUFLO3dCQUNoQixrQkFBa0IsRUFBRSwyQkFBa0IsQ0FBQyx1QkFBdUI7cUJBQy9ELENBQUM7aUJBQ0g7Z0JBQ0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUM1QjtZQUNELEtBQUssb0JBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDdkIsSUFBSSxTQUFTLEtBQUssa0JBQVMsQ0FBQyxJQUFJLEVBQUU7b0JBQ2hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUM7aUJBQzVCO2dCQUNELElBQUksV0FBVyxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixJQUFJLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLEVBQUU7b0JBQ3pHLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUM7aUJBQzVCO2dCQUVELE1BQU0sVUFBVSxHQUFHLENBQUEsTUFBQSxXQUFXLENBQUMscUJBQXFCLDBDQUFFLFVBQVUsS0FBSSxDQUFDLENBQUM7Z0JBQ3RFLE1BQU0sWUFBWSxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO2dCQUUzRCxJQUFJLFlBQVksR0FBRyxZQUFZLElBQUksVUFBVSxFQUFFO29CQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDO2lCQUM1QjtxQkFBTTtvQkFDTCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSwyQkFBa0IsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO2lCQUNsRzthQUNGO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7QUFwREQsZ0VBb0RDIn0=