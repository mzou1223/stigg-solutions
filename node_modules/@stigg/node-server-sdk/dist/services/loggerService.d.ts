export declare type Extra = Record<string, any> | Error | Error['stack'];
export interface Logger {
    log: (message: string, object?: Extra) => void;
    debug: (message: string, object?: Extra) => void;
    error: (message: string, error?: Extra) => void;
}
export interface LogConfiguration {
    logger: Logger;
    logLevel: LogLevel;
}
export declare enum LogLevel {
    ALL = "ALL",
    NONE = "NONE",
    LOG = "LOG",
    ERROR = "ERROR"
}
export declare class LoggerService implements Logger {
    private readonly logger;
    private readonly logLevel;
    private instanceId?;
    constructor(logger: Logger, logLevel: LogLevel);
    error(message: string, error?: Extra): void;
    log(message: string, object?: Extra): void;
    debug(message: string, object?: Extra): void;
    prependPrefix(message: string): string;
    setInstanceId(instanceId: string): void;
    getInstanceId(): string | undefined;
}
