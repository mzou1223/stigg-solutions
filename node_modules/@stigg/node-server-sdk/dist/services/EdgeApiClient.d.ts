import { AxiosInstance } from 'axios';
import { ApolloQueryResult } from '@apollo/client/core';
import { GetActiveSubscriptionsListQuery, GetEntitlementsQuery, GetPaywallQuery, GetSdkConfigurationQuery } from '@stigg/api-client-js/src/generated/sdk';
import { LoggerService } from './loggerService';
declare type EdgeApiClientConfiguration = {
    apiKey: string;
    baseEdgeUri: string;
    enableEdge: boolean;
    timeout: number;
    entitlementsTimeout: number;
};
export declare class EdgeApiClient {
    private readonly config;
    private readonly loggerService;
    private readonly httpClient;
    private constructor();
    static create(config: EdgeApiClientConfiguration, loggerService: LoggerService): EdgeApiClient | null;
    getPaywall(productId?: string, billingCountryCode?: string, fetchAllCountriesPrices?: boolean, includeHiddenPlans?: boolean): Promise<ApolloQueryResult<GetPaywallQuery>>;
    getEntitlements(customerId: string, resourceId: string | undefined): Promise<ApolloQueryResult<GetEntitlementsQuery>>;
    getActiveSubscriptionsList(customerId: string, resourceId: string | string[] | undefined): Promise<ApolloQueryResult<GetActiveSubscriptionsListQuery>>;
    getSdkConfiguration(): Promise<ApolloQueryResult<GetSdkConfigurationQuery>>;
    private get;
    private initHttpClient;
    /**
     * Public for mocking in tests
     */
    enableRetries(axiosInstance: AxiosInstance): void;
    private canRetryRequest;
}
export {};
