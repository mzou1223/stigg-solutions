import Redis from 'ioredis';
import { LoggerService } from '../../loggerService';
import { CacheInstrumentation } from '../../cacheInstrumentation';
export declare class DistributedLocks {
    private readonly redisClient;
    private readonly loggerService;
    private readonly redlock;
    constructor(redisClient: Redis, loggerService: LoggerService, cacheInstrumentation: CacheInstrumentation);
    usingSingleAttempt<T>(lockKey: string, handler: () => Promise<T>): Promise<T>;
    using<T>(lockKey: string, handler: () => Promise<T>): Promise<T>;
    isLockTakenByAnotherClientError(err: any): boolean;
    isReadOnlyReplicaError(err: any): Promise<boolean | "" | undefined>;
    cleanup(): Promise<void>;
}
