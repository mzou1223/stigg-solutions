import CachedEntitlement from './cachedEntitlement';
import { OptionalPromise } from '../../types';
import { EntitlementResponse, EntitlementsResponse } from '../entitlementsService.utils';
export declare type UpdateFeatureUsagePayload = {
    customerId: string;
    featureId: string;
    currentUsage: number;
    timestamp: Date;
    resourceId: string | undefined;
    usagePeriodStart?: number;
    usagePeriodEnd?: number;
};
export interface CacheService {
    waitForInitialization(): Promise<void>;
    clearCache(): OptionalPromise<void>;
    setCustomer(customerId: string, customerEntitlements: Map<string, CachedEntitlement>, resourceId: string | undefined, entitlementsTimestamp: number, usageTimestamp: Map<string, number>): void | Promise<void>;
    updateFeatureUsage(payload: UpdateFeatureUsagePayload): OptionalPromise<boolean>;
    getCustomerEntitlements(customerId: string, resourceId: string | undefined): OptionalPromise<EntitlementsResponse>;
    getCustomerEntitlement(featureId: string, customerId: string, resourceId: string | undefined): OptionalPromise<EntitlementResponse>;
}
