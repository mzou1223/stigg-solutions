"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisCacheService = void 0;
const cachedEntitlement_1 = __importDefault(require("./cachedEntitlement"));
const ioredis_1 = __importDefault(require("ioredis"));
const lodash_1 = require("lodash");
const cacheKeysHelpers_1 = require("../../utils/cacheKeysHelpers");
const RedisSingleExecutionService_1 = require("./RedisSingleExecutionService");
const entitlementsService_utils_1 = require("../entitlementsService.utils");
const redisCacheService_constants_1 = require("./redisCacheService.constants");
const featureTypes_1 = require("../../utils/featureTypes");
const distributedLocks_1 = require("./redis/distributedLocks");
const GRACE_CONNECT_TIMEOUT_MS = 250;
const READY_STATUSES = ['connect', 'ready'];
class RedisCacheService {
    constructor(options, loggerService, cacheInstrumentation) {
        this.loggerService = loggerService;
        this.cacheInstrumentation = cacheInstrumentation;
        const { redis: redisOptions, entitlementsTimeout } = options;
        const { environmentPrefix, ttl = redisCacheService_constants_1.DEFAULT_TTL_SECS, distributedEntitlementsFetching = {} } = redisOptions;
        this.redisClient = new ioredis_1.default(redisOptions);
        this.distributedLocks = new distributedLocks_1.DistributedLocks(this.redisClient, loggerService, cacheInstrumentation);
        this.environmentPrefix = environmentPrefix;
        this.ttl = ttl;
        this.redisClient.on('error', (err) => {
            this.loggerService.error('Redis client error: ', err);
            this.cacheInstrumentation.trackRedisClientError({ error: err, clientName: 'redis' });
        });
        this.redisClient.on('connect', () => {
            this.loggerService.log('Redis client connected!');
        });
        this.redisClient.on('close', () => {
            this.loggerService.log('Redis client disconnected!');
        });
        if (!distributedEntitlementsFetching.disabled) {
            const { notificationBufferMs = redisCacheService_constants_1.REFETCH_NOTIFICATION_BUFFER_MS } = distributedEntitlementsFetching;
            const notificationTimeoutMs = entitlementsTimeout + notificationBufferMs;
            this.distributedRefetchEntitlementsService = new RedisSingleExecutionService_1.RedisSingleExecutionService(redisCacheService_constants_1.REFETCH_OPERATION_NAME, this.environmentPrefix, notificationTimeoutMs, this.redisClient, this.distributedLocks, this.loggerService, this.cacheInstrumentation);
        }
    }
    /**
     * Waits for Redis client to be ready for use.
     * Returns immediately if already connected, otherwise waits for 'ready' or 'error' events
     * with a timeout fallback to prevent indefinite waiting.
     */
    waitForInitialization() {
        return new Promise((resolve) => {
            // If already connected, resolve immediately
            if (this.isClientConnected()) {
                resolve();
                return;
            }
            let isResolved = false;
            let timeoutId = undefined;
            const cleanup = () => {
                if (timeoutId) {
                    clearTimeout(timeoutId);
                }
                this.redisClient.removeListener('ready', resolvePromise);
                this.redisClient.removeListener('error', resolvePromise);
            };
            const resolvePromise = () => {
                if (!isResolved) {
                    isResolved = true;
                    cleanup();
                    resolve();
                }
            };
            // Set up timeout for graceful fallback
            timeoutId = setTimeout(() => {
                this.loggerService.log('Redis initialization timeout reached, proceeding anyway');
                resolvePromise();
            }, GRACE_CONNECT_TIMEOUT_MS);
            // Listen for connection events
            this.redisClient.once('ready', resolvePromise);
            this.redisClient.once('error', resolvePromise);
        });
    }
    isClientConnected() {
        return READY_STATUSES.includes(this.redisClient.status);
    }
    async updateFeatureUsage(params) {
        return this.executeSafely('updateFeatureUsage', false, async () => {
            const item = this.getFeatureUsageItemToUpdate(params);
            await this.updateCacheItems([item]);
            return true;
        });
    }
    getFeatureUsageItemToUpdate({ featureId, currentUsage, customerId, usagePeriodStart, usagePeriodEnd, resourceId, timestamp, }) {
        const value = {
            currentUsage,
            usagePeriodStart,
            usagePeriodEnd,
        };
        return {
            messageTimestamp: timestamp,
            key: (0, cacheKeysHelpers_1.buildUsageKey)(this.environmentPrefix, customerId, featureId, resourceId),
            value,
        };
    }
    async setCustomer(customerId, customerEntitlements, resourceId, entitlementsTimestamp, featureIdToUsageTimestamp) {
        return this.executeSafely('setCustomer', undefined, async () => {
            const lockKey = (0, cacheKeysHelpers_1.buildLockKey)(this.environmentPrefix, customerId, resourceId);
            await this.distributedLocks.using(lockKey, async () => {
                const entitlementsItem = {
                    messageTimestamp: new Date(entitlementsTimestamp),
                    key: (0, cacheKeysHelpers_1.buildCustomerKey)(this.environmentPrefix, customerId, resourceId),
                    value: Object.fromEntries(customerEntitlements),
                };
                const featureUsagesItems = this.extractFeatureUsagesToUpdate({
                    customerId,
                    resourceId,
                    customerEntitlements,
                    featureIdToUsageTimestamp,
                });
                await this.updateCacheItems([entitlementsItem, ...featureUsagesItems]);
            });
        });
    }
    extractFeatureUsagesToUpdate({ customerId, resourceId, customerEntitlements, featureIdToUsageTimestamp, }) {
        return (0, lodash_1.compact)(new Array(...customerEntitlements.values())
            .filter(({ calculatedEntitlement }) => (0, featureTypes_1.isMetered)(calculatedEntitlement.feature))
            .map((entitlement) => {
            const { calculatedEntitlement: { feature }, featureUsage: { currentUsage, usagePeriodStart, usagePeriodEnd }, } = entitlement;
            if ((0, lodash_1.isEmpty)(feature === null || feature === void 0 ? void 0 : feature.id)) {
                this.loggerService.error(`entitlement without feature id`, {
                    customerId,
                    resourceId,
                });
                return;
            }
            const featureId = feature.id;
            const featureUsageTimestamp = featureIdToUsageTimestamp.get(featureId);
            if (!featureUsageTimestamp) {
                this.loggerService.error(`Usage timestamp for feature is missing`, {
                    customerId,
                    resourceId,
                    featureId,
                });
                return;
            }
            return this.getFeatureUsageItemToUpdate({
                customerId,
                resourceId,
                featureId,
                currentUsage,
                usagePeriodStart,
                usagePeriodEnd,
                timestamp: new Date(featureUsageTimestamp),
            });
        }));
    }
    async getCustomerEntitlementsWithoutUsage(customerId, resourceId) {
        const customerKey = (0, cacheKeysHelpers_1.buildCustomerKey)(this.environmentPrefix, customerId, resourceId);
        const keysToFetch = [customerKey];
        if (resourceId) {
            const globalCustomerKey = (0, cacheKeysHelpers_1.buildCustomerKey)(this.environmentPrefix, customerId, undefined);
            keysToFetch.push(`${customerKey}#${redisCacheService_constants_1.TIMESTAMP_SUFFIX}`);
            keysToFetch.push(`${globalCustomerKey}#${redisCacheService_constants_1.TIMESTAMP_SUFFIX}`);
        }
        const [entitlementsRaw, entitlementsTimestampValue, globalEntitlementsTimestampValue] = await this.redisClient.mget(keysToFetch);
        const entitlements = !(0, lodash_1.isNil)(entitlementsRaw) && !(0, lodash_1.isEmpty)(entitlementsRaw)
            ? new Map(Object.entries(JSON.parse(entitlementsRaw)))
            : null;
        const entitlementsTimestamp = this.parseTimestamp(entitlementsTimestampValue);
        const globalEntitlementsTimestamp = this.parseTimestamp(globalEntitlementsTimestampValue);
        const globalCustomerMissing = this.isGlobalCustomerMissingInCache(customerId, resourceId, entitlements, entitlementsTimestamp, globalEntitlementsTimestamp);
        if (!entitlements || globalCustomerMissing) {
            this.cacheInstrumentation.trackMiss({ customerId, resourceId, globalCustomerMissing });
            return entitlementsService_utils_1.entitlementsResponseMapper.cacheMiss(globalCustomerMissing);
        }
        this.loggerService.debug(`Found entitlements in persisted cache for customer`, { customerId, resourceId });
        this.cacheInstrumentation.trackHit({ customerId, resourceId });
        return entitlementsService_utils_1.entitlementsResponseMapper.cacheHit(entitlements);
    }
    // resource entitlements are affected by global entitlements, so if global
    // entitlements are missing or newer, we should refetch since the cache is stale
    isGlobalCustomerMissingInCache(customerId, resourceId, entitlements, entitlementsTimestamp, globalEntitlementsTimestamp) {
        if ((0, lodash_1.isNil)(resourceId)) {
            return false;
        }
        if (!entitlements) {
            // in case no entitlements are found, it's a cache miss anyway for the resource
            // so we just need to check if the global entitlements are missing
            return !globalEntitlementsTimestamp;
        }
        const isResourceTimestampAfterGlobalTimestamp = entitlementsTimestamp && globalEntitlementsTimestamp && entitlementsTimestamp >= globalEntitlementsTimestamp;
        if (isResourceTimestampAfterGlobalTimestamp) {
            return false;
        }
        this.loggerService.log(`cache miss for resource due to global customer`, {
            customerId,
            resourceId,
            entitlementsTimestamp,
            globalEntitlementsTimestamp,
        });
        return true;
    }
    async getCustomerEntitlements(customerId, resourceId) {
        return this.executeSafely('getCustomerEntitlements', entitlementsService_utils_1.entitlementsResponseMapper.cacheMiss(), async () => {
            const response = await this.getCustomerEntitlementsWithoutUsage(customerId, resourceId);
            if (response.cacheMiss) {
                return response;
            }
            const { entitlements } = response;
            const meteredFeatureIds = Array.from(entitlements.values())
                .filter(({ calculatedEntitlement }) => (0, featureTypes_1.isMetered)(calculatedEntitlement.feature))
                .map(({ calculatedEntitlement }) => calculatedEntitlement.feature.id);
            if (!(0, lodash_1.isEmpty)(meteredFeatureIds)) {
                const featuresUsageByFeatureKey = await this.getFeaturesUsage(this.environmentPrefix, customerId, resourceId, meteredFeatureIds);
                const foundFeatureIds = Array.from(featuresUsageByFeatureKey.keys());
                const missingFeatureIds = (0, lodash_1.difference)(meteredFeatureIds, foundFeatureIds);
                if (!(0, lodash_1.isEmpty)(missingFeatureIds)) {
                    this.loggerService.error(`Failed to find metered features usage - considering it as cache miss`, {
                        customerId,
                        resourceId,
                        missingFeatureIds,
                    });
                    this.cacheInstrumentation.trackMiss({ customerId, resourceId });
                    return entitlementsService_utils_1.entitlementsResponseMapper.cacheMiss();
                }
                featuresUsageByFeatureKey.forEach((usageValue, featureKey) => {
                    const cachedEntitlement = entitlements.get(featureKey);
                    if (cachedEntitlement) {
                        entitlements.set(featureKey, this.mergeEntitlementWithUsage(cachedEntitlement, usageValue));
                    }
                    else {
                        this.loggerService.log(`Found usage for a feature the customer is not entitled to.`, {
                            customerId,
                            featureKey,
                        });
                    }
                });
            }
            this.cacheInstrumentation.trackHit({ customerId, resourceId });
            return entitlementsService_utils_1.entitlementsResponseMapper.cacheHit(entitlements);
        });
    }
    async getFeaturesUsage(environmentPrefix, customerId, resourceId, meteredFeatureIds) {
        const keysToFetch = meteredFeatureIds.map((featureId) => (0, cacheKeysHelpers_1.buildUsageKey)(environmentPrefix, customerId, featureId, resourceId));
        const usageValues = await this.redisClient.mget(keysToFetch);
        const featureIdToFeatureUsage = new Map();
        // Redis guarantees returning values in the same order of the keys so this is legit!
        meteredFeatureIds.forEach((featureId, index) => {
            const featureUsageValue = usageValues[index];
            if (featureUsageValue === null) {
                this.loggerService.log(`Failed to find usage for metered feature: ${featureId}`);
                return;
            }
            featureIdToFeatureUsage.set(featureId, JSON.parse(featureUsageValue));
        });
        return featureIdToFeatureUsage;
    }
    clearCache() {
        return;
    }
    async updateCacheItems(items) {
        if ((0, lodash_1.isEmpty)(items)) {
            return;
        }
        const latestTimestampByKey = await this.getKeysLatestTimestamp(items.map((item) => item.key));
        const itemsToUpdate = [];
        items.forEach(({ messageTimestamp, key, value }) => {
            const latestTimestamp = latestTimestampByKey.get(key);
            if (!latestTimestamp ||
                messageTimestamp.getTime() === entitlementsService_utils_1.DATE_IN_FAR_PAST.getTime() ||
                latestTimestamp.getTime() <= messageTimestamp.getTime()) {
                const writeableValue = typeof value === 'string' ? value : JSON.stringify(value);
                itemsToUpdate.push({ key, value: writeableValue });
                itemsToUpdate.push({ key: `${key}#${redisCacheService_constants_1.TIMESTAMP_SUFFIX}`, value: messageTimestamp.getTime() });
            }
            else {
                this.loggerService.log('Cache data timestamp is after message timestamp, skipping key update', {
                    messageTimestamp,
                    latestTimestamp,
                    key,
                });
            }
        });
        if ((0, lodash_1.isEmpty)(itemsToUpdate)) {
            return;
        }
        const batch = this.redisClient.multi();
        itemsToUpdate.forEach(({ key, value }) => {
            batch.set(key, value, 'EX', this.ttl);
        });
        await batch.exec();
    }
    async getKeysLatestTimestamp(keys) {
        const timestampKeys = keys.map((key) => `${key}#${redisCacheService_constants_1.TIMESTAMP_SUFFIX}`);
        const value = await this.redisClient.mget(timestampKeys);
        const result = new Map();
        keys.forEach((key, index) => {
            result.set(key, this.parseTimestamp(value[index]));
        });
        return result;
    }
    parseTimestamp(value) {
        if ((0, lodash_1.isNil)(value)) {
            return undefined;
        }
        const number = (0, lodash_1.parseInt)(value, 10);
        if (Number.isNaN(number)) {
            return undefined;
        }
        return new Date(number);
    }
    async cleanup() {
        var _a;
        await this.distributedLocks.cleanup();
        await ((_a = this.distributedRefetchEntitlementsService) === null || _a === void 0 ? void 0 : _a.cleanup());
    }
    async getCustomerEntitlement(featureId, customerId, resourceId) {
        return this.executeSafely('getCustomerEntitlement', {
            cacheMiss: true,
            customerExists: false,
            entitlement: null,
            globalCustomerMissing: false,
        }, async () => {
            const { entitlements, customerExists, cacheMiss, globalCustomerMissing } = await this.getCustomerEntitlementsWithoutUsage(customerId, resourceId);
            const entitlement = !cacheMiss ? (entitlements === null || entitlements === void 0 ? void 0 : entitlements.get(featureId)) || null : null;
            const result = { cacheMiss, customerExists, entitlement, globalCustomerMissing };
            if (!entitlement || !(0, featureTypes_1.isMetered)(entitlement === null || entitlement === void 0 ? void 0 : entitlement.calculatedEntitlement.feature)) {
                return result;
            }
            const featuresUsageByFeatureKey = await this.getFeaturesUsage(this.environmentPrefix, customerId, resourceId, [
                featureId,
            ]);
            const cachedFeatureUsage = featuresUsageByFeatureKey.get(featureId);
            if ((0, lodash_1.isNil)(cachedFeatureUsage)) {
                this.loggerService.error('Failed to find metered feature usage - considering it as cache miss', {
                    customerId,
                    resourceId,
                    featureId,
                });
                return { cacheMiss: true, customerExists: false, entitlement: null, globalCustomerMissing: false };
            }
            return Object.assign(Object.assign({}, result), { entitlement: this.mergeEntitlementWithUsage(entitlement, cachedFeatureUsage) });
        });
    }
    mergeEntitlementWithUsage(entitlement, cachedUsage) {
        const { calculatedEntitlement, featureUsage } = entitlement;
        // backwards compatibility for old items that have nextResetDate instead of usagePeriodEnd
        if (!(0, lodash_1.isNil)(cachedUsage.nextResetDate) && (0, lodash_1.isNil)(cachedUsage.usagePeriodEnd)) {
            cachedUsage = (0, lodash_1.merge)((0, lodash_1.omit)(cachedUsage, 'nextResetDate'), {
                usagePeriodEnd: cachedUsage.nextResetDate,
            });
        }
        return new cachedEntitlement_1.default(calculatedEntitlement, Object.assign(Object.assign({}, featureUsage), cachedUsage));
    }
    async executeSafely(operationName, defaultValue, operation) {
        if (!this.isClientConnected()) {
            return defaultValue;
        }
        try {
            return await operation();
        }
        catch (error) {
            this.loggerService.error(`Redis cache service: got error during ${operationName} (silent ignore it)`, error.stack);
            return defaultValue;
        }
    }
}
exports.RedisCacheService = RedisCacheService;
//# sourceMappingURL=data:application/json;base64,