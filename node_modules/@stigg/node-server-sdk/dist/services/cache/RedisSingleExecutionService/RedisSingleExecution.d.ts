import Redis from 'ioredis';
import { LoggerService } from '../../loggerService';
import { OperationContext, NotificationContext } from './RedisSingleExecution.utils';
import { CacheInstrumentation } from '../../cacheInstrumentation';
import { DistributedLocks } from '../redis/distributedLocks';
/**
 * This class manages the execution of operations in a distributed environment (using Redis).
 * It ensures that an operation is executed only once across multiple processes, and handles notifications between processes.
 */
export declare class RedisSingleExecutionService {
    private readonly operationName;
    private readonly environmentPrefix;
    private readonly notificationTimeoutMs;
    private readonly redisClient;
    private readonly distributedLocks;
    private readonly loggerService;
    private readonly cacheInstrumentation;
    private readonly subscribeClient;
    private readonly pendingNotifications;
    constructor(operationName: string, environmentPrefix: string, notificationTimeoutMs: number, redisClient: Redis, distributedLocks: DistributedLocks, loggerService: LoggerService, cacheInstrumentation: CacheInstrumentation);
    executeOnceAcrossMultipleProcesses<Response>(context: OperationContext<Response>): Promise<Response>;
    waitForNotificationAndLoadFromCache<Response>({ customerId, resourceId, reloadFromApi, loadFromCache }: OperationContext<Response>, { cancelNotificationSubscription, notificationPromise }: NotificationContext): Promise<Response>;
    private subscribeForNotification;
    private createNotificationPromise;
    private unsubscribeChannel;
    private onEventNotification;
    cleanup(): Promise<void>;
}
