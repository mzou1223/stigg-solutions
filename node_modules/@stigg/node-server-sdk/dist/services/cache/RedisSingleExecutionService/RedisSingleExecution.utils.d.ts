import { OptionalPromise } from '../../../types';
export declare type OperationContext<Response> = {
    customerId: string;
    resourceId: string | undefined;
    reloadFromApi: () => Promise<Response>;
    loadFromCache: () => OptionalPromise<Response>;
};
export declare type NotificationContext = {
    notificationPromise: Promise<void>;
    notify: (error?: string) => Promise<void>;
    cancelNotificationSubscription: () => Promise<void>;
};
export declare type NotificationPayload = {
    error?: string;
};
export declare type CallbackFn = (payload: NotificationPayload) => void;
export declare class TimeoutError extends Error {
    constructor();
}
export declare class RemoteExecutionError extends Error {
    constructor(message: string);
}
