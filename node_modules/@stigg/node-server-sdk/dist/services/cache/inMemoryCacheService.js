"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryCacheService = exports.getApproxSizeBytes = void 0;
const cacheKeysHelpers_1 = require("../../utils/cacheKeysHelpers");
const lru_cache_1 = require("lru-cache");
const entitlementsService_utils_1 = require("../entitlementsService.utils");
const textEncoder = new TextEncoder();
function getApproxSizeBytes(obj) {
    return textEncoder.encode(typeof obj === 'string' ? obj : JSON.stringify(obj)).length;
}
exports.getApproxSizeBytes = getApproxSizeBytes;
class InMemoryCacheService {
    constructor(maxSizeBytes, instrumentation) {
        this.instrumentation = instrumentation;
        this.clearCache = () => {
            this.entitlements.clear();
        };
        const maxSize = maxSizeBytes;
        this.entitlements = new lru_cache_1.LRUCache({
            maxSize,
            sizeCalculation: (value) => getApproxSizeBytes(value),
        });
    }
    waitForInitialization() {
        return Promise.resolve();
    }
    setCustomer(customerId, customerEntitlements, resourceId) {
        const cachedCustomerKey = (0, cacheKeysHelpers_1.buildCachedCustomerKey)(customerId, resourceId);
        this.entitlements.set(cachedCustomerKey, customerEntitlements);
    }
    getCustomerEntitlements(customerId, resourceId) {
        const cachedCustomerKey = (0, cacheKeysHelpers_1.buildCachedCustomerKey)(customerId, resourceId);
        const entitlements = this.entitlements.get(cachedCustomerKey) || null;
        if (entitlements) {
            this.instrumentation.trackHit({ customerId, resourceId });
            return entitlementsService_utils_1.entitlementsResponseMapper.cacheHit(entitlements);
        }
        else {
            this.instrumentation.trackMiss({ customerId, resourceId });
            return entitlementsService_utils_1.entitlementsResponseMapper.cacheMiss();
        }
    }
    updateFeatureUsage({ customerId, featureId, currentUsage, resourceId, usagePeriodStart, usagePeriodEnd, }) {
        const cachedCustomerKey = (0, cacheKeysHelpers_1.buildCachedCustomerKey)(customerId, resourceId);
        const customerEntitlements = this.entitlements.get(cachedCustomerKey);
        const existingFeatureEntitlement = customerEntitlements === null || customerEntitlements === void 0 ? void 0 : customerEntitlements.get(featureId);
        if (!customerEntitlements || !existingFeatureEntitlement) {
            // do nothing in this case, we've never checked this for customer entitlements yet
            return false;
        }
        const { featureUsage: existingFeatureUsage, calculatedEntitlement } = existingFeatureEntitlement;
        customerEntitlements.set(featureId, {
            calculatedEntitlement,
            featureUsage: Object.assign(Object.assign({}, existingFeatureUsage), { currentUsage, usagePeriodStart, usagePeriodEnd }),
        });
        return true;
    }
    getCustomerEntitlement(featureId, customerId, resourceId) {
        const { entitlements, customerExists, cacheMiss, globalCustomerMissing } = this.getCustomerEntitlements(customerId, resourceId);
        const entitlement = !cacheMiss ? (entitlements === null || entitlements === void 0 ? void 0 : entitlements.get(featureId)) || null : null;
        return { cacheMiss, customerExists, entitlement, globalCustomerMissing };
    }
}
exports.InMemoryCacheService = InMemoryCacheService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5NZW1vcnlDYWNoZVNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZXMvY2FjaGUvaW5NZW1vcnlDYWNoZVNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsbUVBQXNFO0FBQ3RFLHlDQUFxQztBQUNyQyw0RUFBcUg7QUFHckgsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUV0QyxTQUFnQixrQkFBa0IsQ0FBQyxHQUFRO0lBQ3pDLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUN4RixDQUFDO0FBRkQsZ0RBRUM7QUFFRCxNQUFhLG9CQUFvQjtJQUcvQixZQUFZLFlBQW9CLEVBQW1CLGVBQXFDO1FBQXJDLG9CQUFlLEdBQWYsZUFBZSxDQUFzQjtRQVl4RixlQUFVLEdBQUcsR0FBRyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDNUIsQ0FBQyxDQUFDO1FBYkEsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxvQkFBUSxDQUF5QztZQUN2RSxPQUFPO1lBQ1AsZUFBZSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUM7U0FDdEQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELHFCQUFxQjtRQUNuQixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBTUQsV0FBVyxDQUNULFVBQWtCLEVBQ2xCLG9CQUFvRCxFQUNwRCxVQUE4QjtRQUU5QixNQUFNLGlCQUFpQixHQUFHLElBQUEseUNBQXNCLEVBQUMsVUFBVSxF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