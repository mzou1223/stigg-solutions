import { ApplySubscriptionMutation, CustomerResourceFragment, CustomerStatisticsFragment, CustomerWithSubscriptionsFragment, GetCouponsQuery, GetPaywallQuery, GetProductsQuery, ImmediateSubscriptionPreviewInvoiceFragment, ProvisionCustomerMutation, ProvisionSubscriptionMutation, ReportUsageFragment, SlimCustomerFragment, SlimSubscriptionFragment, SubscriptionFragment, SubscriptionPreviewFragment, SubscriptionPreviewInvoiceFragment, SubscriptionPreviewV2Fragment, UsageHistoryFragment } from '@stigg/api-client-js/src/generated/sdk';
import { ApplySubscriptionResults, BooleanEntitlement, Coupon, CustomerResource, CustomerStatisticsModel, Entitlement, EnumEntitlement, FullCustomer, FullSubscription, MeteredEntitlement, Money, NumericEntitlement, Paywall, Plan, Price, Product, ProvisionedCustomer, ProvisionSubscriptionResult, ReportUsageAck, SlimCustomer, Subscription, SubscriptionPreview, SubscriptionPreviewCredits, SubscriptionPreviewDiscount, SubscriptionPreviewInvoice, SubscriptionPreviewV2, UsageHistoryPoint } from '../models';
import { Decision } from '../services/entitlementDecisionService';
import CachedEntitlement from '../services/cache/cachedEntitlement';
declare class ModelMapper {
    mapEntitlement(entitlement: CachedEntitlement, decision: Decision, requestedUsage?: number, requestedValues?: string[]): Entitlement;
    mapBooleanEntitlement(entitlement: CachedEntitlement, decision: Decision): BooleanEntitlement;
    mapEnumEntitlement(entitlement: CachedEntitlement, decision: Decision, requestedValues?: string[]): EnumEntitlement;
    mapNumericEntitlement(entitlement: CachedEntitlement, decision: Decision): NumericEntitlement;
    mapMeteredEntitlement(entitlement: CachedEntitlement, decision: Decision, requestedUsage?: number): MeteredEntitlement;
    mapSlimCustomer: (customer: SlimCustomerFragment) => SlimCustomer;
    mapProvisionedCustomer: (graphProvisionedCustomer: ProvisionCustomerMutation) => ProvisionedCustomer;
    mapProvisionedSubscriptionResult: (graphProvisionedSubscriptionResult: ProvisionSubscriptionMutation) => ProvisionSubscriptionResult;
    getSubscriptionPrices(subscription: SubscriptionFragment | SlimSubscriptionFragment): Price[];
    mapSlimSubscription: (slimSubscription: SlimSubscriptionFragment) => Subscription;
    mapApplySubscriptionResults: (graphApplySubscriptionResults: ApplySubscriptionMutation, customerId: string) => ApplySubscriptionResults;
    mapFullCustomer: (customer: CustomerWithSubscriptionsFragment) => FullCustomer;
    mapCoupons(resultData: GetCouponsQuery): Coupon[];
    private mapPaymentDetails;
    private mapCoupon;
    private mapPrice;
    private mapPlan;
    private mapProduct;
    mapProducts(resultData: GetProductsQuery): Product[];
    private mapDefaultTrialConfig;
    private mapCompatibleAddons;
    private mapPackageEntitlement;
    mapFullSubscriptions(subscriptions: SubscriptionFragment[]): FullSubscription[];
    mapFullSubscription(subscription: SubscriptionFragment): FullSubscription;
    private mapLatestInvoice;
    private mapTotalPrice;
    private mapDependencyAddon;
    private mapAddon;
    private mapPromotionalEntitlement;
    mapReportUsageAck(data: ReportUsageFragment): ReportUsageAck;
    mapResource(resource: CustomerResourceFragment): CustomerResource;
    mapPaywall(resultData: GetPaywallQuery): Paywall;
    mapPlans(resultData: GetPaywallQuery): Plan[];
    mapTaxFields(fragment: SubscriptionPreviewFragment | SubscriptionPreviewInvoiceFragment | ImmediateSubscriptionPreviewInvoiceFragment): Pick<SubscriptionPreview, 'tax' | 'taxDetails'>;
    mapSubscriptionPreview(fragment: SubscriptionPreviewFragment): SubscriptionPreview;
    mapCredits(fragment: NonNullable<SubscriptionPreviewFragment['credits']>): SubscriptionPreviewCredits;
    mapSubscriptionPreviewV2(fragment: SubscriptionPreviewV2Fragment): SubscriptionPreviewV2;
    mapSubscriptionPreviewInvoice(fragment: SubscriptionPreviewInvoiceFragment | ImmediateSubscriptionPreviewInvoiceFragment): SubscriptionPreviewInvoice;
    mapDiscount(discount: NonNullable<SubscriptionPreviewFragment['discount']>): SubscriptionPreviewDiscount;
    mapMoney(fragment: {
        amount: number;
        currency: string;
    }): Money;
    mapUsageHistory(usageHistory: UsageHistoryFragment): UsageHistoryPoint[];
    mapCustomerStatistics(customer: CustomerStatisticsFragment): CustomerStatisticsModel;
    private getPriceCurrency;
    private mapCompatiblePackageGroups;
}
export { ModelMapper };
