import { LoggerService } from '../services/loggerService';
import { getConfiguration } from '../configuration';
import { TypedEventEmitter } from '../services/eventEmitter';
declare type WithErrorHandlingProps = {
    errorMessagePrefix: string;
    customerId?: string;
    resourceId?: string | string[];
    sdkConfiguration?: ReturnType<typeof getConfiguration>;
    errorReportMetadata?: Record<string, unknown>;
    rethrowError: boolean;
};
export declare class ApiErrorHandler {
    private readonly loggerService;
    private readonly eventEmitter;
    constructor(loggerService: LoggerService, eventEmitter: TypedEventEmitter);
    /**
     * Wraps a function that returns a promise with error handling.
     *
     * @param func - function to execute and wrap with error handling
     * @param loggerService - logger service to use for logging
     * @param options.errorMessagePrefix - prefix to use for the error message
     * @param options.rethrowError - if true, the error will be re-thrown otherwise it will be only logged
     */
    withErrorHandling<T>(func: () => Promise<T>, params: WithErrorHandlingProps & {
        rethrowError: true;
    }): Promise<T>;
    withErrorHandling<T>(func: () => Promise<T>, params: WithErrorHandlingProps & {
        rethrowError: false;
    }): Promise<T | undefined>;
}
export {};
