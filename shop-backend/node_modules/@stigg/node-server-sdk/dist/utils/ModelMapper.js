"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelMapper = void 0;
const sdk_1 = require("@stigg/api-client-js/src/generated/sdk");
const models_1 = require("../models");
const lodash_1 = require("lodash");
const featureTypes_1 = require("./featureTypes");
const dateUtils_1 = require("./dateUtils");
class ModelMapper {
    constructor() {
        this.mapSlimCustomer = (customer) => {
            return {
                id: customer.refId,
                name: customer.name || undefined,
                email: customer.email || undefined,
                billingId: customer.billingId || undefined,
                createdAt: new Date(customer.createdAt),
                updatedAt: new Date(customer.updatedAt),
                metadata: customer.additionalMetaData,
                awsMarketplaceCustomerId: customer.awsMarketplaceCustomerId,
            };
        };
        this.mapProvisionedCustomer = (graphProvisionedCustomer) => {
            const customer = this.mapSlimCustomer(graphProvisionedCustomer.provisionCustomer.customer);
            const subscription = graphProvisionedCustomer.provisionCustomer.subscription
                ? this.mapSlimSubscription(graphProvisionedCustomer.provisionCustomer.subscription)
                : undefined;
            return {
                customer,
                subscriptionDecisionStrategy: graphProvisionedCustomer.provisionCustomer.subscriptionDecisionStrategy,
                subscription,
            };
        };
        this.mapProvisionedSubscriptionResult = (graphProvisionedSubscriptionResult) => {
            const { provisionSubscription: { subscription, status, checkoutUrl }, } = graphProvisionedSubscriptionResult;
            return {
                subscription: subscription ? this.mapSlimSubscription(subscription) : undefined,
                checkoutUrl: checkoutUrl,
                provisionStatus: status,
            };
        };
        this.mapSlimSubscription = (slimSubscription) => {
            var _a, _b;
            const [planPrice] = slimSubscription.prices || [];
            const { totalPrice } = slimSubscription;
            return {
                id: slimSubscription.refId,
                resource: slimSubscription.resource ? this.mapResource(slimSubscription.resource) : null,
                planId: slimSubscription.plan.refId,
                status: slimSubscription.status,
                addons: ((_a = slimSubscription.addons) === null || _a === void 0 ? void 0 : _a.map((addon) => ({ addonId: addon.addon.refId, quantity: addon.quantity }))) || [],
                addonIds: ((_b = slimSubscription.addons) === null || _b === void 0 ? void 0 : _b.map(({ addon }) => addon.refId)) || [],
                customerId: slimSubscription.customer.refId,
                metadata: slimSubscription.additionalMetaData,
                billingId: slimSubscription.billingId || undefined,
                billingLinkUrl: slimSubscription.billingLinkUrl || undefined,
                latestInvoice: this.mapLatestInvoice(slimSubscription.latestInvoice),
                paymentCollection: slimSubscription.paymentCollection,
                prices: this.getSubscriptionPrices(slimSubscription),
                totalPrice,
                price: planPrice && totalPrice && planPrice.price
                    ? this.mapTotalPrice(planPrice.price, totalPrice, planPrice.usageLimit)
                    : null,
                pricingType: slimSubscription.pricingType,
                effectiveEndDate: (0, dateUtils_1.mapDate)(slimSubscription.effectiveEndDate),
                experimentInfo: (0, lodash_1.omit)(slimSubscription.experimentInfo, '__typename'),
                billingSyncError: slimSubscription.billingSyncError || undefined,
            };
        };
        this.mapApplySubscriptionResults = (graphApplySubscriptionResults, customerId) => {
            const { applySubscription: { subscription }, } = graphApplySubscriptionResults;
            return {
                subscription: subscription
                    ? this.mapSlimSubscription(Object.assign(Object.assign({}, subscription), { customer: { id: '', refId: customerId } }))
                    : undefined,
            };
        };
        this.mapFullCustomer = (customer) => {
            var _a;
            return new models_1.CustomerModel(Object.assign(Object.assign({}, this.mapSlimCustomer(customer)), { alreadyTrialPlans: ((_a = customer.trialedPlans) === null || _a === void 0 ? void 0 : _a.map((x) => {
                    return { planId: x.planRefId, productId: x.productRefId };
                })) || [], hasPaymentMethod: customer.hasPaymentMethod, paymentMethodDetails: this.mapPaymentDetails(customer), subscriptions: (0, lodash_1.map)(customer.subscriptions, (x) => this.mapFullSubscription(x)), coupon: customer.coupon ? this.mapCoupon(customer.coupon) : undefined, promotionalEntitlements: (0, lodash_1.map)(customer.promotionalEntitlements, (x) => this.mapPromotionalEntitlement(x)), experimentInfo: (0, lodash_1.omit)(customer.experimentInfo, '__typename') }));
        };
    }
    mapEntitlement(entitlement, decision, requestedUsage, requestedValues) {
        const { calculatedEntitlement } = entitlement;
        if (!calculatedEntitlement.feature) {
            return this.mapBooleanEntitlement(entitlement, decision);
        }
        const { featureType, meterType } = calculatedEntitlement.feature;
        const isMetered = featureType === sdk_1.FeatureType.Number &&
            (meterType === sdk_1.MeterType.Incremental || meterType === sdk_1.MeterType.Fluctuating);
        switch (featureType) {
            case sdk_1.FeatureType.Boolean:
                return this.mapBooleanEntitlement(entitlement, decision);
            case sdk_1.FeatureType.Enum:
                return this.mapEnumEntitlement(entitlement, decision, requestedValues);
            case sdk_1.FeatureType.Number: {
                return isMetered
                    ? this.mapMeteredEntitlement(entitlement, decision, requestedUsage)
                    : this.mapNumericEntitlement(entitlement, decision);
            }
        }
    }
    mapBooleanEntitlement(entitlement, decision) {
        return {
            type: 'BOOLEAN',
            isFallback: false,
            hasAccess: decision.hasAccess,
            accessDeniedReason: decision.accessDeniedReason,
            feature: entitlement.calculatedEntitlement.feature
                ? Object.assign(Object.assign({}, entitlement.calculatedEntitlement.feature), { isMetered: false }) : undefined,
        };
    }
    mapEnumEntitlement(entitlement, decision, requestedValues) {
        var _a;
        return {
            type: 'ENUM',
            isFallback: false,
            hasAccess: decision.hasAccess,
            accessDeniedReason: decision.accessDeniedReason,
            feature: entitlement.calculatedEntitlement.feature
                ? Object.assign(Object.assign({}, entitlement.calculatedEntitlement.feature), { isMetered: false }) : undefined,
            enumValues: (_a = entitlement.calculatedEntitlement.enumValues) !== null && _a !== void 0 ? _a : [],
            requestedValues,
        };
    }
    mapNumericEntitlement(entitlement, decision) {
        const { hasUnlimitedUsage, usageLimit } = entitlement.calculatedEntitlement;
        return {
            type: 'NUMERIC',
            isFallback: false,
            hasAccess: decision.hasAccess,
            accessDeniedReason: decision.accessDeniedReason,
            isUnlimited: hasUnlimitedUsage,
            value: usageLimit !== null && usageLimit !== void 0 ? usageLimit : undefined,
            feature: entitlement.calculatedEntitlement.feature
                ? Object.assign(Object.assign({}, entitlement.calculatedEntitlement.feature), { isMetered: false }) : undefined,
        };
    }
    mapMeteredEntitlement(entitlement, decision, requestedUsage) {
        const { hasUnlimitedUsage, usageLimit, hasSoftLimit } = entitlement.calculatedEntitlement;
        const { currentUsage, resetPeriod, usagePeriodAnchor, usagePeriodStart, usagePeriodEnd } = entitlement.featureUsage;
        return {
            type: 'METERED',
            isFallback: false,
            hasAccess: decision.hasAccess,
            accessDeniedReason: decision.accessDeniedReason,
            isUnlimited: hasUnlimitedUsage,
            hasSoftLimit: !!hasSoftLimit,
            usageLimit: usageLimit !== null && usageLimit !== void 0 ? usageLimit : undefined,
            currentUsage: currentUsage,
            requestedUsage: requestedUsage || 0,
            resetPeriod: resetPeriod !== null && resetPeriod !== void 0 ? resetPeriod : undefined,
            usagePeriodAnchor: (0, dateUtils_1.mapDate)(usagePeriodAnchor),
            usagePeriodStart: (0, dateUtils_1.mapDate)(usagePeriodStart),
            usagePeriodEnd: (0, dateUtils_1.mapDate)(usagePeriodEnd),
            nextResetDate: (0, dateUtils_1.mapDate)(usagePeriodEnd),
            feature: entitlement.calculatedEntitlement.feature
                ? Object.assign(Object.assign({}, entitlement.calculatedEntitlement.feature), { meterType: entitlement.calculatedEntitlement.feature.meterType || undefined, isMetered: true }) : undefined,
        };
    }
    getSubscriptionPrices(subscription) {
        return subscription.prices
            ? subscription.prices
                .filter((price) => !!price.price)
                .map((price) => this.mapPrice(price.price, price.usageLimit))
            : [];
    }
    mapCoupons(resultData) {
        return resultData.coupons.edges.map((x) => x.node).map((coupon) => this.mapCoupon(coupon));
    }
    mapPaymentDetails(customer) {
        const { defaultPaymentExpirationYear, defaultPaymentExpirationMonth, defaultPaymentMethodLast4Digits } = customer;
        if ((0, lodash_1.some)([defaultPaymentMethodLast4Digits, defaultPaymentExpirationMonth, defaultPaymentExpirationYear], (x) => x)) {
            return {
                expirationMonth: defaultPaymentExpirationMonth,
                expirationYear: defaultPaymentExpirationYear,
                last4Digits: defaultPaymentMethodLast4Digits,
            };
        }
        return undefined;
    }
    mapCoupon(coupon) {
        return {
            id: coupon.refId,
            name: coupon.name,
            description: coupon.description,
            metadata: coupon.additionalMetaData,
            discountValue: coupon.discountValue,
            percentOff: coupon.percentOff,
            amountsOff: coupon.amountsOff,
        };
    }
    mapPrice(pricing, usageLimit) {
        const { feature, price, billingId, billingModel, billingPeriod, minUnitQuantity, maxUnitQuantity, tiers, tiersMode, billingCountryCode, billingCadence, blockSize, } = pricing;
        const mappedPrice = {
            pricingModel: billingModel,
            billingPeriod,
            billingCadence,
            billingId,
            amount: price ? price.amount : null,
            currency: this.getPriceCurrency(pricing),
            tiers,
            tiersMode,
            minUnitQuantity,
            maxUnitQuantity,
            billingCountryCode,
            blockSize,
        };
        if (feature) {
            mappedPrice.feature = {
                featureId: feature.refId,
                displayName: feature.displayName,
                description: feature.description,
                units: feature.featureUnits,
                unitsPlural: feature.featureUnitsPlural,
                unitQuantity: usageLimit,
            };
        }
        return mappedPrice;
    }
    mapPlan(plan, order = 0) {
        return {
            id: plan.refId,
            order,
            billingId: plan.billingId,
            displayName: plan.displayName,
            description: plan.description,
            basePlan: plan.basePlan ? { id: plan.basePlan.refId, displayName: plan.basePlan.displayName } : undefined,
            entitlements: (0, lodash_1.map)(plan.entitlements, (entitlement) => this.mapPackageEntitlement(entitlement)),
            inheritedEntitlements: (0, lodash_1.map)(plan.inheritedEntitlements, (entitlement) => this.mapPackageEntitlement(entitlement)),
            pricePoints: (0, lodash_1.map)(plan.prices, (price) => this.mapPrice(price)),
            pricingType: plan.pricingType,
            defaultTrialConfig: this.mapDefaultTrialConfig(plan.defaultTrialConfig),
            compatibleAddons: this.mapCompatibleAddons(plan),
            compatiblePackageGroups: this.mapCompatiblePackageGroups(plan),
            product: {
                id: plan.product.refId,
                displayName: plan.product.displayName,
                description: plan.product.description,
                metadata: plan.product.additionalMetaData,
                downgradePlan: plan.product.productSettings.downgradePlan
                    ? {
                        id: plan.product.productSettings.downgradePlan.refId,
                        displayName: plan.product.productSettings.downgradePlan.displayName,
                    }
                    : undefined,
            },
            metadata: plan.additionalMetaData,
        };
    }
    mapProduct(product) {
        return {
            id: product.refId,
            displayName: product.displayName,
            description: product.description,
            metadata: product.additionalMetaData,
            downgradePlan: product.productSettings.downgradePlan
                ? {
                    id: product.productSettings.downgradePlan.refId,
                    displayName: product.productSettings.downgradePlan.displayName,
                }
                : undefined,
        };
    }
    mapProducts(resultData) {
        return resultData.products.edges.map((product) => product.node).map((product) => this.mapProduct(product));
    }
    mapDefaultTrialConfig(defaultTrialConfig) {
        if (!defaultTrialConfig) {
            return undefined;
        }
        return {
            duration: defaultTrialConfig === null || defaultTrialConfig === void 0 ? void 0 : defaultTrialConfig.duration,
            units: defaultTrialConfig === null || defaultTrialConfig === void 0 ? void 0 : defaultTrialConfig.units,
            budget: defaultTrialConfig.budget ? { limit: defaultTrialConfig.budget.limit } : undefined,
        };
    }
    mapCompatibleAddons(plan) {
        if (plan.pricingType === sdk_1.PricingType.Free || !plan.compatibleAddons) {
            return [];
        }
        const { compatibleAddons } = plan;
        const filteredCompatibleAddons = plan.pricingType === sdk_1.PricingType.Paid
            ? compatibleAddons.filter((addon) => addon.pricingType === sdk_1.PricingType.Paid)
            : compatibleAddons;
        return filteredCompatibleAddons.map((addon) => this.mapAddon(addon));
    }
    mapPackageEntitlement(entitlement) {
        const { feature } = entitlement;
        return {
            usageLimit: entitlement.usageLimit || 0,
            hasSoftLimit: entitlement.hasSoftLimit,
            feature: {
                id: feature.refId,
                featureType: feature.featureType,
                description: feature.description || '',
                meterType: feature.meterType || undefined,
                units: feature.featureUnits || undefined,
                unitsPlural: feature.featureUnitsPlural || undefined,
                displayName: feature.displayName,
                isMetered: (0, featureTypes_1.isMetered)(feature),
                metadata: feature.additionalMetaData,
            },
            hasUnlimitedUsage: entitlement.hasUnlimitedUsage,
            resetPeriod: entitlement.resetPeriod,
            hiddenFromWidgets: entitlement.hiddenFromWidgets,
            displayNameOverride: entitlement.displayNameOverride,
            isGranted: entitlement.isGranted,
        };
    }
    mapFullSubscriptions(subscriptions) {
        return subscriptions.map((subscription) => this.mapFullSubscription(subscription));
    }
    mapFullSubscription(subscription) {
        var _a;
        const { totalPrice } = subscription;
        const [planPrice] = subscription.prices || [];
        return {
            id: subscription.refId,
            payingCustomer: subscription.payingCustomer ? this.mapSlimCustomer(subscription.payingCustomer) : null,
            resource: subscription.resource ? this.mapResource(subscription.resource) : null,
            status: subscription.status,
            plan: this.mapPlan(subscription.plan),
            price: planPrice && totalPrice && planPrice.price
                ? this.mapTotalPrice(planPrice.price, totalPrice, planPrice.usageLimit)
                : null,
            prices: this.getSubscriptionPrices(subscription),
            totalPrice,
            pricingType: subscription.pricingType,
            addons: ((_a = subscription.addons) === null || _a === void 0 ? void 0 : _a.map(({ quantity, addon }) => ({
                quantity: quantity,
                addon: this.mapAddon(addon),
            }))) || [],
            startDate: (0, dateUtils_1.mapDate)(subscription.startDate),
            endDate: (0, dateUtils_1.mapDate)(subscription.endDate),
            trialEndDate: (0, dateUtils_1.mapDate)(subscription.trialEndDate),
            cancellationDate: (0, dateUtils_1.mapDate)(subscription.cancellationDate),
            currentBillingPeriodEnd: (0, dateUtils_1.mapDate)(subscription.currentBillingPeriodEnd),
            effectiveEndDate: (0, dateUtils_1.mapDate)(subscription.effectiveEndDate),
            metadata: subscription.additionalMetaData,
            billingId: subscription.billingId || undefined,
            billingLinkUrl: subscription.billingLinkUrl || undefined,
            experimentInfo: (0, lodash_1.omit)(subscription.experimentInfo, '__typename'),
            latestInvoice: this.mapLatestInvoice(subscription.latestInvoice),
            paymentCollection: subscription.paymentCollection,
            paymentCollectionMethod: subscription.paymentCollectionMethod || undefined,
            billingSyncError: subscription.billingSyncError || undefined,
            futureUpdates: subscription.futureUpdates,
        };
    }
    mapLatestInvoice(latestInvoice) {
        return latestInvoice
            ? Object.assign(Object.assign({}, latestInvoice), { createdAt: (0, dateUtils_1.mapDate)(latestInvoice.createdAt), updatedAt: (0, dateUtils_1.mapDate)(latestInvoice.updatedAt) })
            : undefined;
    }
    mapTotalPrice(pricing, totalPrice, usageLimit) {
        const { feature, billingModel, billingPeriod, tiers, tiersMode } = pricing;
        const mappedPrice = {
            pricingModel: billingModel,
            billingPeriod,
            amount: totalPrice.total.amount,
            grossAmount: totalPrice.subTotal.amount,
            currency: this.getPriceCurrency(pricing),
            tiersMode,
            tiers,
        };
        if (feature) {
            mappedPrice.feature = {
                featureId: feature.refId,
                displayName: feature.displayName,
                units: feature.featureUnits,
                unitsPlural: feature.featureUnitsPlural,
                unitQuantity: usageLimit,
            };
        }
        return mappedPrice;
    }
    mapDependencyAddon(addon) {
        return {
            refId: addon.refId,
            displayName: addon.displayName,
            description: addon.description || undefined,
        };
    }
    mapAddon(addon) {
        var _a;
        return {
            id: addon.refId,
            displayName: addon.displayName,
            billingId: addon.billingId,
            description: addon.description || '',
            entitlements: (0, lodash_1.map)(addon.entitlements, (x) => this.mapPackageEntitlement(x)),
            pricePoints: (0, lodash_1.map)(addon.prices, (price) => this.mapPrice(price)),
            pricingType: addon.pricingType,
            metadata: addon.additionalMetaData,
            maxQuantity: addon.maxQuantity || undefined,
            dependencies: ((_a = addon.dependencies) === null || _a === void 0 ? void 0 : _a.map((dependency) => this.mapDependencyAddon(dependency))) || [],
        };
    }
    mapPromotionalEntitlement(entitlement) {
        const { feature } = entitlement;
        return {
            status: entitlement.status,
            usageLimit: entitlement.usageLimit || 0,
            feature: {
                id: feature.refId,
                displayName: feature.displayName,
                description: feature.description || '',
                featureType: feature.featureType,
                meterType: feature.meterType || undefined,
                units: feature.featureUnits || undefined,
                unitsPlural: feature.featureUnitsPlural || undefined,
                isMetered: (0, featureTypes_1.isMetered)(feature),
                metadata: feature.additionalMetaData,
            },
            hasUnlimitedUsage: entitlement.hasUnlimitedUsage,
            expiresAt: entitlement.endDate,
            hasExpirationDate: !!entitlement.endDate,
            isVisible: entitlement.isVisible,
        };
    }
    mapReportUsageAck(data) {
        var _a;
        return {
            measurementId: data.id,
            customerId: data.customerId,
            resourceId: data.resourceId || undefined,
            featureId: data.featureId,
            currentUsage: (_a = data.currentUsage) !== null && _a !== void 0 ? _a : undefined,
            usagePeriodStart: (0, dateUtils_1.mapDate)(data.usagePeriodStart),
            usagePeriodEnd: (0, dateUtils_1.mapDate)(data.usagePeriodEnd),
            nextResetDate: (0, dateUtils_1.mapDate)(data.usagePeriodEnd),
        };
    }
    mapResource(resource) {
        return {
            id: resource.resourceId,
        };
    }
    mapPaywall(resultData) {
        const mappedPlans = this.mapPlans(resultData);
        const configuration = resultData === null || resultData === void 0 ? void 0 : resultData.paywall.configuration;
        const customer = (resultData === null || resultData === void 0 ? void 0 : resultData.paywall.customer) ? this.mapSlimCustomer(resultData === null || resultData === void 0 ? void 0 : resultData.paywall.customer) : null;
        const resource = (resultData === null || resultData === void 0 ? void 0 : resultData.paywall.resource) ? this.mapResource(resultData === null || resultData === void 0 ? void 0 : resultData.paywall.resource) : null;
        const activeSubscriptions = (resultData === null || resultData === void 0 ? void 0 : resultData.paywall.activeSubscriptions)
            ? this.mapFullSubscriptions(resultData === null || resultData === void 0 ? void 0 : resultData.paywall.activeSubscriptions)
            : null;
        return {
            plans: mappedPlans,
            configuration,
            customer,
            resource,
            activeSubscriptions,
            currency: resultData.paywall.currency,
        };
    }
    mapPlans(resultData) {
        var _a;
        const plans = ((_a = resultData === null || resultData === void 0 ? void 0 : resultData.paywall) === null || _a === void 0 ? void 0 : _a.plans) || [];
        return plans.map((plan, index) => this.mapPlan(plan, index));
    }
    mapTaxFields(fragment) {
        if (!fragment.tax || !fragment.taxDetails) {
            return {};
        }
        return {
            tax: this.mapMoney(fragment.tax),
            taxDetails: {
                displayName: fragment.taxDetails.displayName,
                percentage: fragment.taxDetails.percentage,
                inclusive: fragment.taxDetails.inclusive,
            },
        };
    }
    mapSubscriptionPreview(fragment) {
        const { subscription, proration, billingPeriodRange } = fragment;
        return Object.assign(Object.assign(Object.assign({ total: this.mapMoney(fragment.total), totalExcludingTax: this.mapMoney(fragment.totalExcludingTax), subTotal: this.mapMoney(fragment.subTotal) }, this.mapTaxFields(fragment)), (fragment.discount ? { discount: this.mapDiscount(fragment.discount) } : {})), { billingPeriodRange: {
                start: billingPeriodRange.start ? new Date(billingPeriodRange.start) : undefined,
                end: billingPeriodRange.end ? new Date(billingPeriodRange.end) : undefined,
            }, proration: proration
                ? {
                    credit: this.mapMoney(proration.credit),
                    debit: this.mapMoney(proration.debit),
                    netAmount: this.mapMoney(proration.netAmount),
                    prorationDate: new Date(proration.prorationDate),
                }
                : undefined, subscription: subscription
                ? {
                    total: this.mapMoney(subscription.total),
                    totalExcludingTax: this.mapMoney(subscription.totalExcludingTax),
                    subTotal: this.mapMoney(subscription.subTotal),
                    tax: this.mapMoney(subscription.tax),
                }
                : undefined });
    }
    mapCredits(fragment) {
        return {
            initial: this.mapMoney(fragment.initial),
            used: this.mapMoney(fragment.used),
            remaining: this.mapMoney(fragment.remaining),
        };
    }
    mapSubscriptionPreviewV2(fragment) {
        const { immediateInvoice, recurringInvoice, billingPeriodRange, hasScheduledUpdates, isPlanDowngrade } = fragment;
        return {
            immediateInvoice: Object.assign(Object.assign({}, this.mapSubscriptionPreviewInvoice(immediateInvoice)), { proration: immediateInvoice.proration
                    ? {
                        credit: this.mapMoney(immediateInvoice.proration.credit),
                        debit: this.mapMoney(immediateInvoice.proration.debit),
                        netAmount: this.mapMoney(immediateInvoice.proration.netAmount),
                        prorationDate: new Date(immediateInvoice.proration.prorationDate),
                        hasProrations: immediateInvoice.proration.hasProrations || undefined,
                    }
                    : undefined, credits: immediateInvoice.credits ? this.mapCredits(immediateInvoice.credits) : undefined }),
            recurringInvoice: recurringInvoice
                ? Object.assign({}, this.mapSubscriptionPreviewInvoice(recurringInvoice)) : undefined,
            billingPeriodRange: {
                start: billingPeriodRange.start && new Date(billingPeriodRange.start),
                end: billingPeriodRange.end && new Date(billingPeriodRange.end),
            },
            isPlanDowngrade: !!isPlanDowngrade,
            hasScheduledUpdates: !!hasScheduledUpdates,
        };
    }
    mapSubscriptionPreviewInvoice(fragment) {
        return Object.assign(Object.assign({ total: this.mapMoney(fragment.total), subTotal: this.mapMoney(fragment.subTotal), totalExcludingTax: this.mapMoney(fragment.totalExcludingTax), discount: fragment.discount ? this.mapMoney(fragment.discount) : undefined }, (fragment.discountDetails ? { discountDetails: this.mapDiscount(fragment.discountDetails) } : {})), this.mapTaxFields(fragment));
    }
    mapDiscount(discount) {
        const { type, value, durationType, durationInMonths } = discount;
        return Object.assign({ type, value, durationType }, (durationInMonths ? { durationInMonths } : {}));
    }
    mapMoney(fragment) {
        return {
            amount: fragment.amount,
            currency: fragment.currency,
        };
    }
    mapUsageHistory(usageHistory) {
        return usageHistory.usageMeasurements.map(({ date, value, isResetPoint }) => {
            return {
                date: new Date(date),
                value: value,
                isResetPoint: !!isResetPoint,
            };
        });
    }
    mapCustomerStatistics(customer) {
        return {
            statistics: {
                activeSubscriptionsByPricingType: customer.statistics
                    ? customer.statistics.activeSubscriptionsByPricingType.map((stat) => (0, lodash_1.omit)(stat, '__typename'))
                    : [],
            },
        };
    }
    getPriceCurrency({ price, tiers }) {
        var _a, _b;
        return (price === null || price === void 0 ? void 0 : price.currency) || ((_a = tiers === null || tiers === void 0 ? void 0 : tiers[0].unitPrice) === null || _a === void 0 ? void 0 : _a.currency) || ((_b = tiers === null || tiers === void 0 ? void 0 : tiers[0].flatPrice) === null || _b === void 0 ? void 0 : _b.currency) || sdk_1.Currency.Usd;
    }
    mapCompatiblePackageGroups(plan) {
        if (plan.pricingType === sdk_1.PricingType.Free || !plan.compatiblePackageGroups) {
            return [];
        }
        const { compatiblePackageGroups, pricingType } = plan;
        return compatiblePackageGroups.map((group) => {
            const { packageGroupId, displayName, addons, options } = group;
            return {
                packageGroupId,
                displayName,
                addons: this.mapCompatibleAddons({ compatibleAddons: addons, pricingType }),
                options: {
                    minItems: (options === null || options === void 0 ? void 0 : options.minItems) || undefined,
                    freeItems: (options === null || options === void 0 ? void 0 : options.freeItems) || undefined,
                },
            };
        });
    }
}
exports.ModelMapper = ModelMapper;
//# sourceMappingURL=data:application/json;base64,