"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiErrorHandler = void 0;
const core_1 = require("@apollo/client/core");
const lodash_1 = require("lodash");
const sdk_1 = require("@stigg/api-client-js/src/generated/sdk");
const OperationTimeoutError_1 = require("../api/apollo/OperationTimeoutError");
class ExtendedError extends Error {
    constructor(message, errorCode, traceId) {
        super(message);
        this.errorCode = errorCode;
        this.traceId = traceId;
    }
}
function extractErrorData(err) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    let errorMessage = err.message || 'unknown error';
    let errorCode;
    let traceId;
    const apolloError = err;
    if (!(0, lodash_1.isEmpty)(apolloError.graphQLErrors)) {
        const gqlError = apolloError.graphQLErrors[0];
        errorMessage = gqlError.message;
        errorCode = (_a = gqlError.extensions) === null || _a === void 0 ? void 0 : _a.code;
        traceId = (_b = gqlError.extensions) === null || _b === void 0 ? void 0 : _b.traceId;
    }
    else if (!(0, lodash_1.isEmpty)(apolloError.networkError)) {
        // @ts-expect-error the original error message is on the result object
        const message = ((_d = (_c = apolloError.networkError) === null || _c === void 0 ? void 0 : _c.result) === null || _d === void 0 ? void 0 : _d.errors) && ((_g = (_f = (_e = apolloError.networkError) === null || _e === void 0 ? void 0 : _e.result) === null || _f === void 0 ? void 0 : _f.errors[0]) === null || _g === void 0 ? void 0 : _g.message);
        errorMessage = message || ((_h = apolloError.networkError) === null || _h === void 0 ? void 0 : _h.message) || 'Network error';
    }
    return {
        errorMessage,
        errorCode,
        traceId,
        axiosError: err.isAxiosError ? err : undefined,
    };
}
class ApiErrorHandler {
    constructor(loggerService, eventEmitter) {
        this.loggerService = loggerService;
        this.eventEmitter = eventEmitter;
    }
    async withErrorHandling(func, { errorMessagePrefix, rethrowError }) {
        try {
            const result = await func();
            return result;
        }
        catch (err) {
            const { errorMessage: originalErrorMessage, errorCode, traceId, axiosError } = extractErrorData(err);
            let errorMessage = originalErrorMessage;
            const response = axiosError === null || axiosError === void 0 ? void 0 : axiosError.response;
            if ((response === null || response === void 0 ? void 0 : response.status) === 401 || errorCode === sdk_1.ErrorCode.Unauthenticated) {
                this.eventEmitter.emit('apiKeyInvalid');
                errorMessage = 'Authentication failed. Double check your API key.';
            }
            else {
                const request = axiosError === null || axiosError === void 0 ? void 0 : axiosError.request;
                this.eventEmitter.emit('networkRequestFailed', { errorMessage, errorCode, traceId, request, response });
            }
            if (!rethrowError) {
                this.loggerService.error(`${errorMessagePrefix}: ${err.message}`, err);
                return undefined;
            }
            if (err instanceof core_1.ApolloError && err.networkError instanceof OperationTimeoutError_1.OperationTimeoutError) {
                throw new ExtendedError(`${errorMessagePrefix}: Request timed out`, 'RequestTimeout');
            }
            throw new ExtendedError(`${errorMessagePrefix}: ${errorMessage}`, errorCode, traceId);
        }
    }
}
exports.ApiErrorHandler = ApiErrorHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpRXJyb3JIYW5kbGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9hcGlFcnJvckhhbmRsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUFrRDtBQUNsRCxtQ0FBaUM7QUFJakMsZ0VBQW1FO0FBRW5FLCtFQUE0RTtBQUU1RSxNQUFNLGFBQWMsU0FBUSxLQUFLO0lBSS9CLFlBQVksT0FBZSxFQUFFLFNBQWtCLEVBQUUsT0FBZ0I7UUFDL0QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBV0QsU0FBUyxnQkFBZ0IsQ0FBQyxHQUFxQzs7SUFDN0QsSUFBSSxZQUFZLEdBQUcsR0FBRyxDQUFDLE9BQU8sSUFBSSxlQUFlLENBQUM7SUFDbEQsSUFBSSxTQUE2QixDQUFDO0lBQ2xDLElBQUksT0FBMkIsQ0FBQztJQUVoQyxNQUFNLFdBQVcsR0FBRyxHQUFrQixDQUFDO0lBQ3ZDLElBQUksQ0FBQyxJQUFBLGdCQUFPLEVBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ3ZDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDaEMsU0FBUyxHQUFHLE1BQUEsUUFBUSxDQUFDLFVBQVUsMENBQUUsSUFBYyxDQUFDO1FBQ2hELE9BQU8sR0FBRyxNQUFBLFFBQVEsQ0FBQyxVQUFVLDBDQUFFLE9BQWlCLENBQUM7S0FDbEQ7U0FBTSxJQUFJLENBQUMsSUFBQSxnQkFBTyxFQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsRUFBRTtRQUM3QyxzRUFBc0U7UUFDdEUsTUFBTSxPQUFPLEdBQUcsQ0FBQSxNQUFBLE1BQUEsV0FBVyxDQUFDLFlB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