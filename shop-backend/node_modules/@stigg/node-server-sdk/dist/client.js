"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stigg = void 0;
const models_1 = require("./models");
const ModelMapper_1 = require("./utils/ModelMapper");
const configuration_1 = require("./configuration");
const loggerService_1 = require("./services/loggerService");
const identifiers_1 = require("./services/identifiers");
const apiErrorHandling_1 = require("./utils/apiErrorHandling");
const lodash_1 = require("lodash");
const initializationStateTracker_1 = require("./services/initializationStateTracker");
const clientInitialization_1 = require("./clientInitialization");
const mapGetEntitlementsFallback_1 = require("./utils/mapGetEntitlementsFallback");
let globalStiggInstance = null;
/**
 * Stigg Node.js SDK client
 */
class Stigg {
    constructor(config, entitlementsService, loggerService, managementApi, sdkConfigurationApi, eventEmitter) {
        this.config = config;
        this.entitlementsService = entitlementsService;
        this.loggerService = loggerService;
        this.managementApi = managementApi;
        this.sdkConfigurationApi = sdkConfigurationApi;
        this.eventEmitter = eventEmitter;
        this.modelMapper = new ModelMapper_1.ModelMapper();
        this.initializationStateTracker = new initializationStateTracker_1.InitializationStateTracker(this.eventEmitter);
        this.errorHandler = new apiErrorHandling_1.ApiErrorHandler(this.loggerService, this.eventEmitter);
    }
    async waitForInitialization() {
        return this.initializationStateTracker.getInitializationPromise().then(() => this);
    }
    /**
     * Add an event listener
     * @param eventName - The event to listen for ('entitlementsUpdated', 'usageUpdated', 'packagePublished', 'cacheHit', 'cacheMiss')
     * @param listener - The callback function to be called when the event occurs
     */
    addListener(eventName, listener) {
        this.eventEmitter.addListener(eventName, listener);
    }
    /**
     * Remove an event listener
     * @param eventName - The event to stop listening for
     * @param listener - The callback function to remove
     */
    removeListener(eventName, listener) {
        this.eventEmitter.off(eventName, listener);
    }
    /**
     * Initialize an instance of the Stigg SDK client.
     * @param {ClientConfiguration} configuration - client configuration object provided by the consumer.
     * @returns {Stigg} stigg SDK instance.
     */
    static initialize(configuration) {
        const sdkConfiguration = (0, configuration_1.getConfiguration)(configuration);
        const isPersistedCacheEnabled = !(0, lodash_1.isEmpty)(sdkConfiguration.redis);
        const loggerService = new loggerService_1.LoggerService(sdkConfiguration.logConfiguration.logger, sdkConfiguration.logConfiguration.logLevel);
        // The api key comparison is due to the demo running on lambda and uses different apiKey and should use different stiggInstance
        if (process.env.NODE_ENV !== 'test' &&
            globalStiggInstance &&
            globalStiggInstance.config.apiKey === sdkConfiguration.apiKey) {
            loggerService.error(`Stigg SDK cannot be initialized more than once, returning the old instance. 
      New configuration is ignored, please check your code or call .close() before initializing again.`);
            return globalStiggInstance;
        }
        const instanceId = (0, identifiers_1.generateRandomUUID)();
        loggerService.setInstanceId(instanceId);
        (0, configuration_1.validateConfiguration)(sdkConfiguration, loggerService);
        const stiggInstance = this.initializeStiggInstance(sdkConfiguration, loggerService, isPersistedCacheEnabled);
        if (sdkConfiguration.offline) {
            loggerService.log('Stigg SDK has been initialized in offline mode, only fallback entitlements are being used.');
        }
        stiggInstance
            .initializeSdk(sdkConfiguration)
            .then(() => stiggInstance === null || stiggInstance === void 0 ? void 0 : stiggInstance.initializationStateTracker.signalSuccessInit())
            .catch((err) => stiggInstance === null || stiggInstance === void 0 ? void 0 : stiggInstance.initializationStateTracker.signalFailedInit(err));
        if (!sdkConfiguration.offline && sdkConfiguration.realtimeUpdatesEnabled) {
            stiggInstance.entitlementsService.init();
        }
        globalStiggInstance = stiggInstance;
        return stiggInstance;
    }
    /**
     * Discards all network connections, background tasks, and other resources held by the client.
     *
     * Do not attempt to use the client after calling this method.
     */
    close() {
        this.entitlementsService.cleanup();
        globalStiggInstance = null;
    }
    static initializeStiggInstance(sdkConfiguration, loggerService, isPersistedCacheEnabled) {
        const { eventEmitter, entitlementsService, managementApi, sdkConfigurationApi } = (0, clientInitialization_1.intializeStiggDependencies)(isPersistedCacheEnabled, sdkConfiguration, loggerService);
        return new Stigg(sdkConfiguration, entitlementsService, loggerService, managementApi, sdkConfigurationApi, eventEmitter);
    }
    async initializeSdk({ enableRemoteConfig, offline }) {
        const promises = [this.entitlementsService.waitForInitialization()];
        if (enableRemoteConfig && !offline) {
            // Currently we don't use anything from the response, just checking if the SDK API key is valid.
            promises.push(this.sdkConfigurationApi.getSdkConfiguration());
        }
        return this.errorHandler.withErrorHandling(() => Promise.all(promises), {
            errorMessagePrefix: 'Failed to load sdk configuration',
            rethrowError: true,
            sdkConfiguration: this.config,
        });
    }
    /**
     * Get boolean entitlement of feature for a customer
     *
     * @param {string} customerId
     * @param {string} resourceId
     * @param {string} featureId
     * @param {BooleanEntitlementOptions} options
     * @return {BooleanEntitlement} boolean entitlement.
     */
    async getBooleanEntitlement({ customerId, featureId, resourceId, options, }) {
        var _a;
        const fallbackValue = (options === null || options === void 0 ? void 0 : options.fallback) || ((_a = this.config.entitlementsFallback) === null || _a === void 0 ? void 0 : _a[featureId]) || {};
        const fallbackEntitlement = Object.assign(Object.assign({}, models_1.BOOLEAN_DEFAULT_FALLBACK_ENTITLEMENT), fallbackValue);
        if (this.config.offline) {
            return fallbackEntitlement;
        }
        const entitlement = await this.errorHandler.withErrorHandling(() => this.entitlementsService.getBooleanEntitlement(customerId, featureId, fallbackEntitlement, resourceId, options), {
            customerId,
            sdkConfiguration: this.config,
            errorReportMetadata: { featureId, options },
            errorMessagePrefix: 'Failed to get boolean entitlement, using fallback entitlement',
            rethrowError: false,
        });
        return entitlement || fallbackEntitlement;
    }
    /**
     * Get numeric entitlement of feature for a customer
     * @param {string} customerId
     * @param {string} resourceId
     * @param {string} featureId
     * @param {NumericEntitlementOptions} options
     * @return {NumericEntitlement} numeric entitlement
     */
    async getNumericEntitlement({ customerId, featureId, resourceId, options, }) {
        var _a;
        const fallbackValue = (options === null || options === void 0 ? void 0 : options.fallback) || ((_a = this.config.entitlementsFallback) === null || _a === void 0 ? void 0 : _a[featureId]) || {};
        const fallbackEntitlement = Object.assign(Object.assign({}, models_1.NUMERIC_DEFAULT_FALLBACK_ENTITLEMENT), fallbackValue);
        if (this.config.offline) {
            return fallbackEntitlement;
        }
        const entitlement = await this.errorHandler.withErrorHandling(() => this.entitlementsService.getNumericEntitlement(customerId, featureId, fallbackEntitlement, resourceId, options), {
            customerId,
            sdkConfiguration: this.config,
            errorReportMetadata: { featureId, options },
            errorMessagePrefix: 'Failed to get numeric entitlement, using fallback entitlement',
            rethrowError: false,
        });
        return entitlement || fallbackEntitlement;
    }
    /**
     * Get metered entitlement of feature for a customer
     * @param {string} customerId
     * @param {string} resourceId
     * @param {string} featureId
     * @param {MeteredEntitlementOptions} options
     * @return {MeteredEntitlement} metered entitlement
     */
    async getMeteredEntitlement({ customerId, featureId, resourceId, options, }) {
        var _a;
        const fallbackValue = (options === null || options === void 0 ? void 0 : options.fallback) || ((_a = this.config.entitlementsFallback) === null || _a === void 0 ? void 0 : _a[featureId]) || {};
        const fallbackEntitlement = Object.assign(Object.assign({}, models_1.METERED_DEFAULT_FALLBACK_ENTITLEMENT), fallbackValue);
        if (this.config.offline) {
            return fallbackEntitlement;
        }
        const entitlement = await this.errorHandler.withErrorHandling(() => this.entitlementsService.getMeteredEntitlement(customerId, featureId, fallbackEntitlement, resourceId, options), {
            customerId,
            sdkConfiguration: this.config,
            errorReportMetadata: { featureId, options },
            errorMessagePrefix: 'Failed to get metered entitlement, using fallback entitlement',
            rethrowError: false,
        });
        return entitlement || fallbackEntitlement;
    }
    /**
     * Get enum entitlement of feature for a customer
     * @param {string} customerId
     * @param {string} resourceId
     * @param {string} featureId
     * @param {EnumEntitlementOptions} options
     * @return {EnumEntitlement} enum entitlement
     */
    async getEnumEntitlement({ customerId, featureId, resourceId, options, }) {
        var _a;
        const fallbackValue = (options === null || options === void 0 ? void 0 : options.fallback) || ((_a = this.config.entitlementsFallback) === null || _a === void 0 ? void 0 : _a[featureId]) || {};
        const fallbackEntitlement = Object.assign(Object.assign({}, models_1.ENUM_DEFAULT_FALLBACK_ENTITLEMENT), fallbackValue);
        if (this.config.offline) {
            return fallbackEntitlement;
        }
        const entitlement = await this.errorHandler.withErrorHandling(() => this.entitlementsService.getEnumEntitlement(customerId, featureId, fallbackEntitlement, resourceId, options), {
            customerId,
            sdkConfiguration: this.config,
            errorReportMetadata: { featureId, options },
            errorMessagePrefix: 'Failed to get enum entitlement, using fallback entitlement',
            rethrowError: false,
        });
        return entitlement || fallbackEntitlement;
    }
    /**
     * Get generic entitlement of feature for a customer
     * @param {string} customerId
     * @param {string} resourceId
     * @param {string} featureId
     * @param {EntitlementOptions} options
     * @return {Entitlement} generic entitlement
     */
    async getEntitlement({ customerId, featureId, resourceId, options }) {
        var _a;
        // Determine fallback based on options type or use boolean as default
        let fallbackEntitlement;
        const fallbackValue = (options === null || options === void 0 ? void 0 : options.fallback) || ((_a = this.config.entitlementsFallback) === null || _a === void 0 ? void 0 : _a[featureId]) || {};
        if (options && 'requestedUsage' in options) {
            fallbackEntitlement = Object.assign(Object.assign({}, models_1.METERED_DEFAULT_FALLBACK_ENTITLEMENT), fallbackValue);
        }
        else if (options && 'requestedValues' in options) {
            fallbackEntitlement = Object.assign(Object.assign({}, models_1.ENUM_DEFAULT_FALLBACK_ENTITLEMENT), fallbackValue);
        }
        else if (options && 'fallback' in options && options.fallback && 'value' in options.fallback) {
            fallbackEntitlement = Object.assign(Object.assign({}, models_1.NUMERIC_DEFAULT_FALLBACK_ENTITLEMENT), fallbackValue);
        }
        else {
            fallbackEntitlement = Object.assign(Object.assign({}, models_1.BOOLEAN_DEFAULT_FALLBACK_ENTITLEMENT), fallbackValue);
        }
        if (this.config.offline) {
            return fallbackEntitlement;
        }
        const entitlement = await this.errorHandler.withErrorHandling(() => {
            var _a, _b;
            return this.entitlementsService.getEntitlement(customerId, featureId, fallbackEntitlement, resourceId, (_a = options) === null || _a === void 0 ? void 0 : _a.requestedUsage, (_b = options) === null || _b === void 0 ? void 0 : _b.requestedValues);
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorReportMetadata: { featureId, options },
            errorMessagePrefix: 'Failed to get entitlement, using fallback entitlement',
            rethrowError: false,
        });
        return entitlement || fallbackEntitlement;
    }
    /**
     * Get entitlements per user
     * @param {string} customerId
     * @param {string} resourceId
     */
    async getEntitlements(customerId, resourceId) {
        if (this.config.offline) {
            return (0, mapGetEntitlementsFallback_1.mapGetEntitlementsFallback)(this.config.entitlementsFallback);
        }
        const entitlements = await this.errorHandler.withErrorHandling(() => {
            if (!customerId || typeof customerId !== 'string') {
                throw new Error('Invalid argument: customerId');
            }
            return this.entitlementsService.getCustomerEntitlements(customerId, resourceId);
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to get customer entitlements',
            rethrowError: false,
        });
        return entitlements || (0, mapGetEntitlementsFallback_1.mapGetEntitlementsFallback)(this.config.entitlementsFallback);
    }
    /**
     * Report usage event
     */
    async reportEvent(events) {
        if (this.config.offline) {
            return;
        }
        return this.errorHandler.withErrorHandling(async () => {
            const eventsArray = (0, lodash_1.isArray)(events) ? events : [events];
            await this.entitlementsService.reportEvent(eventsArray);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { events },
            errorMessagePrefix: 'Failed to report usage event',
            rethrowError: true,
        });
    }
    /**
     * Report usage for metered entitlement
     * @param customerId
     * @param resourceId
     * @param featureId
     * @param value - the reported usage value, can be either positive or negative value
     */
    async reportUsage({ customerId, resourceId, featureId, value, updateBehavior, createdAt, dimensions, }) {
        if (this.config.offline) {
            return {
                measurementId: (0, identifiers_1.generateRandomUUID)(),
                customerId,
                resourceId,
                featureId,
            };
        }
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.entitlementsService.reportUsage({
                featureId,
                customerId,
                resourceId,
                value,
                updateBehavior,
                createdAt,
                dimensions,
            });
            if (!data)
                throw new Error('Invalid response');
            return this.modelMapper.mapReportUsageAck(data.reportUsage);
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorReportMetadata: { featureId, value },
            errorMessagePrefix: 'Failed to report usage',
            rethrowError: true,
        });
    }
    /**
     * Report bulk of usages for metered entitlement
     * @param usages - array of usages to report
     */
    async reportUsageBulk({ usages }) {
        if (this.config.offline) {
            return usages.map(({ customerId, resourceId, featureId }) => ({
                measurementId: (0, identifiers_1.generateRandomUUID)(),
                customerId,
                resourceId,
                featureId,
            }));
        }
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.entitlementsService.reportUsageBulk({
                usages,
            });
            if (!data)
                throw new Error('Invalid response');
            return data.reportUsageBulk.map((item) => this.modelMapper.mapReportUsageAck(item));
        }, {
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to bulk report usage',
            rethrowError: true,
        });
    }
    async importCustomerBulk({ customers }) {
        return this.errorHandler.withErrorHandling(async () => {
            await this.managementApi.importCustomerBulk({
                customers: customers.map((customer) => (Object.assign(Object.assign({}, (0, lodash_1.omit)(customer, 'metadata')), { additionalMetaData: customer.metadata }))),
            });
        }, {
            errorMessagePrefix: 'Failed to import customers',
            rethrowError: true,
        });
    }
    /**
     * Import a Customer from billing integration. Private information such as email and name are not imported and needs
     * to be sent in order to be persisted in Stigg. Active billing integration is required for this functionality.
     * @return {Promise<Customer>} Newly created customer. Throw exception on errors.
     * @param billingId - the id of the customer in the billing system.
     * @param customerId - optional customer id, if not provided a random one will be generated.
     * @param email - optional customer email.
     * @param name - optional customer name.
     */
    async importCustomer({ billingId, customerId, email, name, metadata, }) {
        return this.errorHandler.withErrorHandling(async () => {
            const refId = customerId;
            const { data } = await this.managementApi.importCustomer({
                refId,
                email,
                name,
                billingId,
                additionalMetaData: metadata,
            });
            if (!data)
                throw new Error('Invalid response');
            return this.modelMapper.mapSlimCustomer(data.importCustomer);
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorReportMetadata: { billingId, email, name },
            errorMessagePrefix: 'Failed to import customer',
            rethrowError: true,
        });
    }
    async importSubscriptionBulk({ subscriptions }) {
        await this.errorHandler.withErrorHandling(async () => {
            await this.managementApi.importSubscriptionBulk({
                subscriptions: subscriptions.map((subscription) => (Object.assign(Object.assign({}, (0, lodash_1.omit)(subscription, 'metadata')), { additionalMetaData: subscription.metadata }))),
            });
        }, {
            errorMessagePrefix: 'Failed to bulk import subscriptions',
            rethrowError: true,
        });
    }
    /**
     * Create a Customer and its first subscription
     * @return {Promise<Customer>} Newly created customer and subscription. Throw exception on errors.
     * @param customerId - optional customer id, if not provided a random one will be generated.
     * @param email - optional customer email
     * @param name - optional customer name
     * @param billingInfo - optional billing info
     * @param couponId - optional coupon
     * @param metadata - optional metadata
     * @param subscriptionParams - first subscription to create for the customer (pass null to skip subscription creation)
     * @param excludeFromExperiment - flag to exclude the customer from experiment (if there is one in progress)
     */
    async provisionCustomer({ customerId, email, name, billingInfo, metadata, couponId, subscriptionParams, excludeFromExperiment, billingId, salesforceId, }) {
        return this.errorHandler.withErrorHandling(async () => {
            const subscriptionParamsUpdated = subscriptionParams
                ? Object.assign(Object.assign({}, (0, lodash_1.omit)(subscriptionParams, 'unitQuantity', 'metadata')), { additionalMetaData: subscriptionParams.metadata, priceUnitAmount: subscriptionParams.unitQuantity }) : undefined;
            const refId = customerId;
            const { data } = await this.managementApi.provisionCustomer({
                refId,
                billingId,
                email,
                name,
                billingInformation: billingInfo,
                additionalMetaData: metadata,
                couponRefId: couponId,
                subscriptionParams: subscriptionParamsUpdated,
                excludeFromExperiment,
                salesforceId,
            });
            if (!data)
                throw new Error('Invalid response');
            await this.entitlementsService.setEntitlementsIfExists({
                entitlements: data.provisionCustomer.entitlements,
                customerId: data.provisionCustomer.customer.customerId,
                resourceId: subscriptionParams === null || subscriptionParams === void 0 ? void 0 : subscriptionParams.resourceId,
            });
            return this.modelMapper.mapProvisionedCustomer(data);
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorReportMetadata: { email, name, billingInfo, metadata, couponId, subscriptionParams },
            errorMessagePrefix: 'Failed to provision customer',
            rethrowError: true,
        });
    }
    /**
     * Provision a Subscription.
     * @return {Promise<ProvisionSubscriptionResult>} Provision subscription result. Throw exception on errors.
     * @param provisionSubscription
     */
    async provisionSubscription(provisionSubscription) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.provisionSubscription(provisionSubscription);
            if (!data)
                throw new Error('Invalid response');
            await this.entitlementsService.setEntitlementsIfExists({
                entitlements: data.provisionSubscription.entitlements,
                customerId: provisionSubscription.customerId,
                resourceId: provisionSubscription.resourceId,
            });
            return this.modelMapper.mapProvisionedSubscriptionResult(data);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { provisionSubscription },
            errorMessagePrefix: 'Failed to provision subscription',
            rethrowError: true,
        });
    }
    /**
     * Fetch customer usage history of a feature.
     * @return {Promise<UsageHistoryPoint[]>} Array of usage history as data points.
     * @param fetchUsageHistory
     *
     * @deprecated use {@link getUsageHistoryV2} instead.
     */
    async fetchUsageHistory(fetchUsageHistory) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.fetchUsageHistory(fetchUsageHistory);
            if (!data || !data.usageHistory)
                throw new Error('Invalid response');
            return this.modelMapper.mapUsageHistory(data.usageHistory);
        }, {
            errorMessagePrefix: 'Failed to fetch usage history',
            rethrowError: false,
        });
    }
    /**
     * Get customer usage history of a feature.
     */
    async getUsageHistoryV2(input) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.getUsageHistoryV2(input);
            return data.usageHistoryV2;
        }, {
            errorMessagePrefix: 'Failed to get usage history',
            rethrowError: true,
        });
    }
    /**
     * Create a Customer.
     * @return {Promise<Customer>} Newly created customer. Throw exception on errors.
     * @param customerId - optional customer id, if not provided a random one will be generated.
     * @param email - optional customer email
     * @param name - optional customer name
     * @param billingInfo - optional billing info
     * @param couponId - optional coupon
     * @param metadata - optional metadata
     *
     * @deprecated use {@link provisionCustomer} instead to create both customer and subscription in single operation. See {@link provisionCustomer} for more info.
     */
    async createCustomer(input) {
        const response = await this.provisionCustomer(Object.assign(Object.assign({}, input), { subscriptionParams: null }));
        return response.customer;
    }
    /**
     * Update a Customer.
     * @return {Promise<Customer>} Updated customer. Throw exception on errors.
     * @param customerId - customer id
     * @param email - optional customer email
     * @param name - optional customer name
     * @param billingId - optional billing ID
     * @param billingInfo - optional billing info
     * @param metadata - optional metadata
     */
    async updateCustomer({ customerId, email, name, billingId, billingInfo, metadata, couponId, shouldWaitSync, salesforceId, }) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.updateCustomer({
                refId: customerId,
                email,
                name,
                couponRefId: couponId,
                billingId,
                billingInformation: billingInfo,
                additionalMetaData: metadata,
                shouldWaitSync,
                salesforceId,
            });
            if (!data)
                throw new Error('Invalid response');
            return this.modelMapper.mapSlimCustomer(data.updateCustomer);
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorReportMetadata: { email, name, billingInfo, metadata, couponId },
            errorMessagePrefix: 'Failed to update customer',
            rethrowError: true,
        });
    }
    /**
     * Detach customer's payment method.
     * @return {Promise<Customer>} Updated customer. Throw exception on errors.
     * @param customerId - customer id
     * */
    async detachCustomerPaymentMethod(customerId) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.detachCustomerPaymentMethod(customerId);
            if (!data)
                throw new Error('Invalid response');
            return this.modelMapper.mapSlimCustomer(data.detachCustomerPaymentMethod);
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to detach customer payment method',
            rethrowError: true,
        });
    }
    /**
     * Get a Customer.
     * @return {Promise<FullCustomer>} Full customer details.
     * @param customerId - customer id
     */
    async getCustomer(customerId) {
        return this.errorHandler.withErrorHandling(async () => {
            if (!customerId || typeof customerId !== 'string') {
                throw new Error('Invalid argument: customerId');
            }
            const resp = await this.managementApi.getCustomer(customerId);
            const customer = resp.data.getCustomerByRefId;
            if (!customer) {
                throw new Error('Customer not found');
            }
            return this.modelMapper.mapFullCustomer(customer);
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to get customer',
            rethrowError: true,
        });
    }
    /**
     * Get Customer Statistics.
     * @return {Promise<CustomerStatisticsModel>} customer statistics.
     * @param customerId - customer id
     */
    async getCustomerStatistics(customerId) {
        return this.errorHandler.withErrorHandling(async () => {
            if (!customerId || typeof customerId !== 'string') {
                throw new Error('Invalid argument: customerId');
            }
            const resp = await this.managementApi.getCustomerStatistics(customerId);
            const customer = resp.data.getCustomerByRefId;
            if (!customer) {
                throw new Error('Customer not found');
            }
            return this.modelMapper.mapCustomerStatistics(customer);
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to get customer statistics',
            rethrowError: true,
        });
    }
    async archiveCustomer(customerId) {
        return this.errorHandler.withErrorHandling(async () => {
            var _a;
            if (!customerId) {
                throw new Error('Invalid argument: customerId');
            }
            const resp = await this.managementApi.archiveCustomer(customerId);
            const customer = (_a = resp.data) === null || _a === void 0 ? void 0 : _a.archiveCustomer;
            if (!customer) {
                throw new Error('Customer not found');
            }
            return customer.customerId;
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to archive customer',
            rethrowError: true,
        });
    }
    async getCreditBalance(input) {
        return this.errorHandler.withErrorHandling(async () => {
            const resp = await this.managementApi.getCreditBalance(input);
            return resp.data.creditBalanceSummary;
        }, {
            customerId: input.customerId,
            resourceId: input.resourceId || undefined,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to get credit balance',
            rethrowError: true,
        });
    }
    async grantCredits(input) {
        return this.errorHandler.withErrorHandling(async () => {
            var _a;
            const resp = await this.managementApi.grantCredits(input);
            return (_a = resp.data) === null || _a === void 0 ? void 0 : _a.createCreditGrant;
        }, {
            customerId: input.customerId,
            resourceId: input.resourceId || undefined,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to grant credits',
            rethrowError: true,
        });
    }
    async getCreditGrants(input) {
        return this.errorHandler.withErrorHandling(async () => {
            const resp = await this.managementApi.getCreditGrants(input);
            return resp.data.creditGrants;
        }, {
            customerId: input.customerId,
            resourceId: input.resourceId || undefined,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to get credit grants',
            rethrowError: true,
        });
    }
    async unarchiveCustomer(customerId) {
        return this.errorHandler.withErrorHandling(async () => {
            var _a;
            if (!customerId) {
                throw new Error('Invalid argument: customerId');
            }
            const resp = await this.managementApi.unarchiveCustomer(customerId);
            const customer = (_a = resp.data) === null || _a === void 0 ? void 0 : _a.unarchiveCustomer;
            if (!customer) {
                throw new Error('Customer not found');
            }
            return this.modelMapper.mapSlimCustomer(customer);
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to unarchive customer',
            rethrowError: true,
        });
    }
    async getSubscriptions(params = {}) {
        const { customerId, resourceId, status, productId, pagination } = params;
        return this.errorHandler.withErrorHandling(async () => {
            const resp = await this.managementApi.getSubscriptions(customerId, resourceId, status, productId, pagination);
            const subscriptions = resp.data.subscriptions.edges.map((edge) => edge.node);
            return {
                data: subscriptions,
                pageInfo: resp.data.subscriptions.pageInfo,
            };
        }, {
            customerId,
            resourceId,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to get subscriptions',
            rethrowError: true,
        });
    }
    /**
     * Get customer's active subscriptions.
     * @return {Promise<FullSubscription[]>} List of active subscriptions.
     * @param customerId - customer id
     * @param resourceId - optional resource id, if not provided global resources will be fetched.
     */
    async getActiveSubscriptions({ customerId, resourceId }) {
        return this.errorHandler.withErrorHandling(async () => {
            if (!customerId || typeof customerId !== 'string') {
                throw new Error('Invalid argument: customerId');
            }
            const resp = await this.managementApi.getActiveSubscriptions(customerId, resourceId);
            const activeSubscriptions = resp.data.getActiveSubscriptions;
            if (!activeSubscriptions) {
                throw new Error('Customer not found');
            }
            return this.modelMapper.mapFullSubscriptions(activeSubscriptions);
        }, {
            customerId,
            resourceId,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to get active subscriptions',
            rethrowError: true,
        });
    }
    /**
     * @description Get customer's active subscriptions, for extended subscription data use {@link getSubscription}
     * @return {Promise<SlimSubscriptionFragmentV2Fragment[]>} List of active subscriptions
     * @param customerId - customer id
     * @param resourceId - optional resource id, if not provided global resources will be fetched.
     */
    async getActiveSubscriptionsList({ customerId, resourceId, }) {
        return this.errorHandler.withErrorHandling(async () => {
            const resp = await this.managementApi.getActiveSubscriptionsList(customerId, resourceId);
            return resp.data.getActiveSubscriptions;
        }, {
            customerId,
            resourceId,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to get active subscriptions list',
            rethrowError: true,
        });
    }
    /**
     * Get subscription
     * @return {Promise<FullSubscription>} the subscription data
     * @param subscriptionId - subscription id
     */
    async getSubscription({ subscriptionId }) {
        return this.errorHandler.withErrorHandling(async () => {
            const resp = await this.managementApi.getSubscription(subscriptionId);
            const subscription = resp.data.getSubscription;
            return this.modelMapper.mapFullSubscription(subscription);
        }, {
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to get subscription',
            rethrowError: true,
        });
    }
    /**
     * Create a Subscription
     * @return {Promise<Subscription>} Newly created subscription. Throw exception on errors.
     * @param {CreateSubscription} createSubscription
     * @deprecated use {@link provisionSubscription} instead to create subscription or checkout session according to customer and subscription payment requirements. See {@link provisionSubscription} for more info.
     */
    async createSubscription(createSubscription) {
        return this.errorHandler.withErrorHandling(async () => {
            const createSubscriptionInput = Object.assign(Object.assign({}, createSubscription), { startDate: createSubscription.startDate || new Date() });
            const { data } = await this.managementApi.createSubscription(createSubscriptionInput);
            if (!data)
                throw new Error('Invalid response');
            await this.entitlementsService.refetchEntitlements({
                customerId: createSubscription.customerId,
                resourceId: createSubscriptionInput.resourceId,
                skipEdge: true,
                triggeredBy: 'createSubscription',
            });
            return this.modelMapper.mapSlimSubscription(data.createSubscription);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { createSubscription },
            errorMessagePrefix: 'Failed to create subscription',
            rethrowError: true,
        });
    }
    /**
     * Update a Subscription
     * @return {Promise<Subscription>} updated subscription. Throw exception on errors.
     * @param {UpdateSubscription} updateSubscription
     */
    async updateSubscription(updateSubscription) {
        return this.errorHandler.withErrorHandling(async () => {
            var _a;
            const { data } = await this.managementApi.updateSubscription(updateSubscription);
            if (!data)
                throw new Error('Invalid response');
            await this.entitlementsService.refetchEntitlements({
                customerId: data.updateSubscription.customer.refId,
                resourceId: (_a = data.updateSubscription.resource) === null || _a === void 0 ? void 0 : _a.resourceId,
                skipEdge: true,
                triggeredBy: 'updateSubscription',
            });
            return this.modelMapper.mapSlimSubscription(data.updateSubscription);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { updateSubscription },
            errorMessagePrefix: 'Failed to update subscription',
            rethrowError: true,
        });
    }
    /**
     * Apply subscription changes for a customer
     * Update\Provision a subscription for a customer according to the given subscription input
     * @param {ApplySubscription} parameters
     * @returns {Promise<ApplySubscriptionResults>}
     */
    async applySubscription(applySubscriptionInput) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.applySubscription(applySubscriptionInput);
            if (!data)
                throw new Error('Invalid response');
            await this.entitlementsService.setEntitlementsIfExists({
                entitlements: data.applySubscription.entitlements,
                customerId: applySubscriptionInput.customerId,
                resourceId: applySubscriptionInput.resourceId,
            });
            return this.modelMapper.mapApplySubscriptionResults(data, applySubscriptionInput.customerId);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { applySubscriptionInput },
            errorMessagePrefix: 'Failed to apply subscription to customer',
            rethrowError: true,
        });
    }
    /**
     * Create a Subscription
     * @return {Promise<Subscription>} Canceled subscription. Throw exception on errors.
     * @param cancelSubscription
     */
    async cancelSubscription(cancelSubscription) {
        return this.errorHandler.withErrorHandling(async () => {
            var _a;
            const { data } = await this.managementApi.cancelSubscription(cancelSubscription);
            if (!data)
                throw new Error('Invalid response');
            await this.entitlementsService.refetchEntitlements({
                customerId: data.cancelSubscription.customer.refId,
                resourceId: (_a = data.cancelSubscription.resource) === null || _a === void 0 ? void 0 : _a.resourceId,
                skipEdge: true,
                triggeredBy: 'cancelSubscription',
            });
            return this.modelMapper.mapSlimSubscription(data.cancelSubscription);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { cancelSubscription },
            errorMessagePrefix: 'Failed to cancel subscription',
            rethrowError: true,
        });
    }
    /**
     * Get the paywall data
     *
     * @returns {Promise<Paywall>}
     */
    async getPaywall({ productId, customerId, resourceId, billingCountryCode, fetchAllCountriesPrices, includeHiddenPlans, } = {}) {
        const params = {
            productId,
            customerId,
            resourceId,
            billingCountryCode,
            fetchAllCountriesPrices,
            includeHiddenPlans,
        };
        return this.errorHandler.withErrorHandling(async () => {
            const graphResponse = await this.managementApi.getPaywall(params);
            return this.modelMapper.mapPaywall(graphResponse.data);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { productId },
            errorMessagePrefix: 'Failed to get paywall',
            rethrowError: true,
        });
    }
    /**
     * Get a list of coupons
     *
     * @returns {Promise<Coupon[]>}
     */
    async getCoupons() {
        return this.errorHandler.withErrorHandling(async () => {
            const graphResponse = await this.managementApi.getCoupons();
            return this.modelMapper.mapCoupons(graphResponse.data);
        }, { sdkConfiguration: this.config, errorMessagePrefix: 'Failed to get coupons', rethrowError: true });
    }
    /**
     * Get a list of products
     *
     * @returns {Promise<Product[]>}
     */
    async getProducts() {
        return this.errorHandler.withErrorHandling(async () => {
            const graphResponse = await this.managementApi.getProducts();
            return this.modelMapper.mapProducts(graphResponse.data);
        }, { sdkConfiguration: this.config, errorMessagePrefix: 'Failed to get products', rethrowError: true });
    }
    /**
     * Estimate subscription
     * @return {Promise<SubscriptionPreview>} Preview of the subscription.
     * @param {EstimateSubscription} estimateSubscription
     */
    async estimateSubscription(estimateSubscription) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.estimateSubscription(estimateSubscription);
            if (!data)
                throw new Error('Invalid response');
            return this.modelMapper.mapSubscriptionPreview(data.estimateSubscription);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { estimateSubscription },
            errorMessagePrefix: 'Failed to estimate subscription',
            rethrowError: true,
        });
    }
    /**
     * Estimate subscription update
     * @return {Promise<SubscriptionPreview>} Preview of the subscription.
     * @param {EstimateSubscriptionUpdate} estimateSubscriptionUpdate
     */
    async estimateSubscriptionUpdate(estimateSubscriptionUpdate) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.estimateSubscriptionUpdate(estimateSubscriptionUpdate);
            if (!data)
                throw new Error('Invalid response');
            return this.modelMapper.mapSubscriptionPreview(data.estimateSubscriptionUpdate);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { estimateSubscriptionUpdate },
            errorMessagePrefix: 'Failed to estimate subscription',
            rethrowError: true,
        });
    }
    /**
     * Preview subscription provisioning\updates
     * @return {Promise<SubscriptionPreviewV2>} Preview of the subscription.
     * @param {PreviewSubscription} previewSubscription
     */
    async previewSubscription(previewSubscription) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.previewSubscription(previewSubscription);
            if (!data)
                throw new Error('Invalid response');
            return this.modelMapper.mapSubscriptionPreviewV2(data.previewSubscription);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { previewSubscription },
            errorMessagePrefix: 'Failed to preview subscription',
            rethrowError: true,
        });
    }
    /**
     * Preview the subscription next invoice
     * @return {Promise<SubscriptionInvoicePreviewFragment>} Preview of the next invoice.
     * @param {PreviewNextInvoice} previewNextInvoice
     */
    async previewNextInvoice(previewNextInvoice) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.previewNextInvoice(previewNextInvoice);
            if (!data)
                throw new Error('Invalid response');
            return data.previewNextInvoice;
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { previewNextInvoice },
            errorMessagePrefix: 'Failed to preview subscription next invoice',
            rethrowError: true,
        });
    }
    /**
     * Cancel a subscription scheduled updates
     * @return {Promise<string>} The subscription id
     * @param {CancelSubscriptionScheduledUpdates} cancelSubscriptionScheduledUpdates
     */
    async cancelSubscriptionScheduledUpdates(cancelSubscriptionScheduledUpdates) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.cancelSubscriptionScheduledUpdates(cancelSubscriptionScheduledUpdates);
            if (!data)
                throw new Error('Invalid response');
            return { subscriptionId: data.cancelSchedule };
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { cancelSubscriptionScheduledUpdates },
            errorMessagePrefix: 'Failed to cancel subscription scheduled updates',
            rethrowError: true,
        });
    }
    /**
     * Migrate subscription to latest plan and addons version and pricing.
     * using {@link SubscriptionMigrationTime.EndOfBillingPeriod} is possible only if Stripe integration is enabled and will
     * migrate the subscription in the end of the current billing period. Using Immediate will perform the migration
     * immediately. Default, migration will happen immediately.
     * @return {Promise<string>} The subscription id
     * @param {MigrateSubscriptionToLatest} migrateSubscriptionToLatest
     */
    async migrateSubscriptionToLatest(migrateSubscriptionToLatest) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.migrateSubscriptionToLatest(migrateSubscriptionToLatest);
            if (!data)
                throw new Error('Invalid response');
            return { subscriptionId: data.migrateSubscriptionToLatest.subscriptionId };
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { migrateSubscriptionToLatest },
            errorMessagePrefix: 'Failed to migrate subscription to latest',
            rethrowError: true,
        });
    }
    /**
     * @deprecated use {@link transferSubscriptionToResource} instead
     * Transfer paid subscription from sourceResourceId to destinationResourceId.
     * sourceResourceId must have a paid active subscription.
     * destinationResourceId must have a free active subscription.
     * @return {Promise<subscription>} The subscription connected to destinationResource.
     * @param {TransferSubscriptionInput} input
     */
    async transferSubscription(input) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.transferSubscription(input);
            if (!data)
                throw new Error('Invalid response');
            return this.modelMapper.mapSlimSubscription(data.transferSubscription);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { input },
            errorMessagePrefix: 'Failed to transfer subscription',
            rethrowError: true,
        });
    }
    /**
     * Transfers a subscription to a different resource.
     * @return {Promise<subscription>} The subscription connected to destinationResource.
     * @param {TransferSubscriptionInput} input
     */
    async transferSubscriptionToResource(input) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.transferSubscriptionToResource(input);
            if (!data)
                throw new Error('Invalid response');
            return this.modelMapper.mapSlimSubscription(data.transferSubscriptionToResource);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { input },
            errorMessagePrefix: 'Failed to transfer subscription',
            rethrowError: true,
        });
    }
    /**
     * Delegates a subscription to a different customer (the paying customer of the subscription will not change)
     * @return {Promise<subscription>} The subscription connected to destinationResource.
     * @param {DelegateSubscriptionToCustomerInput} input
     */
    async delegateSubscriptionToCustomer(input) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.delegateSubscriptionToCustomer(input);
            if (!data)
                throw new Error('Invalid response');
            return this.modelMapper.mapSlimSubscription(data.delegateSubscriptionToCustomer);
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { input },
            errorMessagePrefix: 'Failed to delegate subscription',
            rethrowError: true,
        });
    }
    grantPromotionalEntitlements(input) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.grantPromotionalEntitlements(input);
            if (!data)
                throw new Error('Invalid response');
            return data.grantPromotionalEntitlements;
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { input },
            errorMessagePrefix: 'Failed to grant promotional entitlements',
            rethrowError: true,
        });
    }
    revokePromotionalEntitlements(input) {
        return this.errorHandler.withErrorHandling(async () => {
            const { data } = await this.managementApi.revokePromotionalEntitlement(input);
            if (!data)
                throw new Error('Invalid response');
            return data.revokePromotionalEntitlement;
        }, {
            sdkConfiguration: this.config,
            errorReportMetadata: { input },
            errorMessagePrefix: 'Failed to revoke promotional entitlement',
            rethrowError: true,
        });
    }
    /**
     * Reload entitlements of a customer or customer resource.
     * Note: this method skips the Edge API, so use it only when you need "read-after-write" consistency after entitlements presumably have changed.
     * @param {string} customerId
     * @param {string} resourceId
     */
    async reloadEntitlements(customerId, resourceId) {
        if (this.config.offline) {
            return { entitledEntityExists: true };
        }
        const response = await this.errorHandler.withErrorHandling(() => {
            if (!customerId || typeof customerId !== 'string') {
                throw new Error('Invalid argument: customerId');
            }
            return this.entitlementsService.refetchEntitlements({
                customerId,
                resourceId,
                skipEdge: true,
                triggeredBy: 'reloadEntitlements',
            });
        }, {
            customerId,
            sdkConfiguration: this.config,
            errorMessagePrefix: 'Failed to reload customer entitlements',
            rethrowError: false,
        });
        return { entitledEntityExists: !!(response === null || response === void 0 ? void 0 : response.customerExists) };
    }
}
exports.Stigg = Stigg;
//# sourceMappingURL=data:application/json;base64,