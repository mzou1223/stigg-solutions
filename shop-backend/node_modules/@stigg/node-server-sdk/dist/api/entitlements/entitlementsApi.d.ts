/// <reference types="zen-observable" />
import { ApolloClient, NormalizedCacheObject, ApolloQueryResult } from '@apollo/client/core';
import { CreateUsageMeasurement, ReportEvent } from '../../models';
import { EdgeApiClient } from '../../services/EdgeApiClient';
import { LoggerService } from '../../services/loggerService';
import { GetEntitlementsQuery, ReportUsageMutation, OnEntitlementsUpdatedSubscription, OnUsageUpdatedSubscription, ReportEventMutation, OnPackagePublishedSubscription, ReportUsageBulkMutation, ReportUsageBulkInput } from '@stigg/api-client-js/src/generated/sdk';
declare class EntitlementsApi {
    private readonly client;
    private readonly edgeApiClient;
    private readonly loggerService;
    constructor(client: ApolloClient<NormalizedCacheObject>, edgeApiClient: EdgeApiClient | null, loggerService: LoggerService);
    getEntitlements(customerId: string, resourceId: string | undefined, skipEdge?: boolean, timeout?: number): Promise<ApolloQueryResult<GetEntitlementsQuery>>;
    reportUsage(data: CreateUsageMeasurement): Promise<import("@apollo/client/core").FetchResult<ReportUsageMutation, Record<string, any>, Record<string, any>>>;
    reportUsageBulk(input: ReportUsageBulkInput): Promise<import("@apollo/client/core").FetchResult<ReportUsageBulkMutation, Record<string, any>, Record<string, any>>>;
    reportEvent(data: ReportEvent[]): Promise<import("@apollo/client/core").FetchResult<ReportEventMutation, Record<string, any>, Record<string, any>>>;
    subscribeEntitlementsUpdated(): import("zen-observable")<import("@apollo/client/core").FetchResult<OnEntitlementsUpdatedSubscription, Record<string, any>, Record<string, any>>>;
    subscribeUsageUpdated(): import("zen-observable")<import("@apollo/client/core").FetchResult<OnUsageUpdatedSubscription, Record<string, any>, Record<string, any>>>;
    subscribePackagePublished(): import("zen-observable")<import("@apollo/client/core").FetchResult<OnPackagePublishedSubscription, Record<string, any>, Record<string, any>>>;
}
export default EntitlementsApi;
