import { ApolloClient, NormalizedCacheObject } from '@apollo/client/core';
import { CancelSubscription, CreateSubscription, EstimateSubscription, EstimateSubscriptionUpdate, ProvisionSubscription, UpdateSubscription, CancelSubscriptionScheduledUpdates, MigrateSubscriptionToLatest, FetchUsageHistory, ApplySubscription, PreviewSubscription, PreviewNextInvoice, SubscriptionStatus, CreditGrantInput, GetCreditGrantsInput, CreditBalanceSummaryInput } from '../models';
import { EdgeApiClient } from '../services/EdgeApiClient';
import { EstimateSubscriptionMutation, EstimateSubscriptionUpdateMutation, GetCustomerByIdQuery, GetPaywallQuery, ProvisionCustomerMutation, ProvisionSubscriptionMutation, CancelSubscriptionMutation, UpdateSubscriptionMutation, ImportCustomerMutation, GetUsageHistoryQuery, UpdateCustomerMutation, CreateSubscriptionMutation, GetProductsQuery, GetCouponsQuery, CancelSubscriptionUpdatesMutation, UpdateCustomerInput, ImportCustomerInput, ProvisionCustomerInput, GetActiveSubscriptionsQuery, GetSubscriptionsQuery, ImportCustomerBulkMutation, ImportCustomerBulkInput, ImportSubscriptionsBulkInput, ImportSubscriptionsBulkMutation, MigrateSubscriptionToLatestMutation, ArchiveCustomerMutation, TransferSubscriptionInput, TransferSubscriptionMutation, GrantPromotionalEntitlementsMutation, GrantPromotionalEntitlementsInput, RevokePromotionalEntitlementInput, RevokePromotionalEntitlementMutation, ApplySubscriptionMutation, PreviewSubscriptionMutation, UnarchiveCustomerMutation, GetCustomerStatisticsQuery, DetachCustomerPaymentMethodMutation, GetSubscriptionQuery, GetActiveSubscriptionsListQuery, DelegateSubscriptionToCustomerInput, DelegateSubscriptionToCustomerMutation, TransferSubscriptionToResourceInput, TransferSubscriptionToResourceMutation, GetUsageHistoryV2Query, UsageHistoryV2Input, PreviewNextInvoiceMutation, GetCreditBalanceQuery, GetCreditGrantsQuery, GrantCreditsMutation } from '@stigg/api-client-js/src/generated/sdk';
export declare type GetPaywallProps = {
    productId?: string;
    customerId?: string | null;
    resourceId?: string | null;
    billingCountryCode?: string;
    fetchAllCountriesPrices?: boolean;
    includeHiddenPlans?: boolean;
};
declare class ManagementApi {
    private readonly client;
    private readonly edgeApiClient;
    constructor(client: ApolloClient<NormalizedCacheObject>, edgeApiClient: EdgeApiClient | null);
    provisionCustomer(provisionCustomerInput: ProvisionCustomerInput): Promise<import("@apollo/client/core").FetchResult<ProvisionCustomerMutation, Record<string, any>, Record<string, any>>>;
    importCustomerBulk(customerInput: ImportCustomerBulkInput): Promise<import("@apollo/client/core").FetchResult<ImportCustomerBulkMutation, Record<string, any>, Record<string, any>>>;
    importCustomer(customerInput: ImportCustomerInput): Promise<import("@apollo/client/core").FetchResult<ImportCustomerMutation, Record<string, any>, Record<string, any>>>;
    updateCustomer(customerInput: UpdateCustomerInput): Promise<import("@apollo/client/core").FetchResult<UpdateCustomerMutation, Record<string, any>, Record<string, any>>>;
    detachCustomerPaymentMethod(customerId: string): Promise<import("@apollo/client/core").FetchResult<DetachCustomerPaymentMethodMutation, Record<string, any>, Record<string, any>>>;
    getCustomer(customerId: string): Promise<import("@apollo/client/core").ApolloQueryResult<GetCustomerByIdQuery>>;
    getCustomerStatistics(customerId: string): Promise<import("@apollo/client/core").ApolloQueryResult<GetCustomerStatisticsQuery>>;
    archiveCustomer(customerId: string): Promise<import("@apollo/client/core").FetchResult<ArchiveCustomerMutation, Record<string, any>, Record<string, any>>>;
    getCreditBalance(input: CreditBalanceSummaryInput): Promise<import("@apollo/client/core").ApolloQueryResult<GetCreditBalanceQuery>>;
    getCreditGrants(input: GetCreditGrantsInput): Promise<import("@apollo/client/core").ApolloQueryResult<GetCreditGrantsQuery>>;
    grantCredits(input: CreditGrantInput): Promise<import("@apollo/client/core").FetchResult<GrantCreditsMutation, Record<string, any>, Record<string, any>>>;
    unarchiveCustomer(customerId: string): Promise<import("@apollo/client/core").FetchResult<UnarchiveCustomerMutation, Record<string, any>, Record<string, any>>>;
    getSubscriptions(customerId?: string, resourceId?: string | string[], status?: SubscriptionStatus | SubscriptionStatus[], productId?: string | string[], pagination?: {
        limit?: number;
        startingAfter?: string;
        endingBefore?: string;
    }): Promise<import("@apollo/client/core").ApolloQueryResult<GetSubscriptionsQuery>>;
    getActiveSubscriptions(customerId: string, resourceId?: string | string[]): Promise<import("@apollo/client/core").ApolloQueryResult<GetActiveSubscriptionsQuery>>;
    getActiveSubscriptionsList(customerId: string, resourceId?: string | string[]): Promise<import("@apollo/client/core").ApolloQueryResult<GetActiveSubscriptionsListQuery>>;
    getSubscription(subscriptionId: string): Promise<import("@apollo/client/core").ApolloQueryResult<GetSubscriptionQuery>>;
    updateSubscription(updateSubscription: UpdateSubscription): Promise<import("@apollo/client/core").FetchResult<UpdateSubscriptionMutation, Record<string, any>, Record<string, any>>>;
    createSubscription(createSubscription: CreateSubscription): Promise<import("@apollo/client/core").FetchResult<CreateSubscriptionMutation, Record<string, any>, Record<string, any>>>;
    provisionSubscription(provisionSubscription: ProvisionSubscription): Promise<import("@apollo/client/core").FetchResult<ProvisionSubscriptionMutation, Record<string, any>, Record<string, any>>>;
    applySubscription({ customerId, payingCustomerId, planId, paymentMethodId, addons, billableFeatures, billingCountryCode, billingId, billingInformation, billingPeriod, metadata, promotionCode, resourceId, skipTrial, startDate, unitQuantity, trialOverrideConfiguration, scheduleStrategy, paymentCollectionMethod, appliedCoupon, priceOverrides, }: ApplySubscription): Promise<import("@apollo/client/core").FetchResult<ApplySubscriptionMutation, Record<string, any>, Record<string, any>>>;
    previewSubscription(input: PreviewSubscription): Promise<import("@apollo/client/core").FetchResult<PreviewSubscriptionMutation, Record<string, any>, Record<string, any>>>;
    previewNextInvoice(input: PreviewNextInvoice): Promise<import("@apollo/client/core").FetchResult<PreviewNextInvoiceMutation, Record<string, any>, Record<string, any>>>;
    importSubscriptionBulk(importSubscriptionBulk: ImportSubscriptionsBulkInput): Promise<import("@apollo/client/core").FetchResult<ImportSubscriptionsBulkMutation, Record<string, any>, Record<string, any>>>;
    cancelSubscription(cancelSubscription: CancelSubscription): Promise<import("@apollo/client/core").FetchResult<CancelSubscriptionMutation, Record<string, any>, Record<string, any>>>;
    getPaywall({ productId, customerId, resourceId, billingCountryCode, fetchAllCountriesPrices, includeHiddenPlans, }: GetPaywallProps): Promise<import("@apollo/client/core").ApolloQueryResult<GetPaywallQuery>>;
    getProducts(): Promise<import("@apollo/client/core").ApolloQueryResult<GetProductsQuery>>;
    getCoupons(): Promise<import("@apollo/client/core").ApolloQueryResult<GetCouponsQuery>>;
    estimateSubscription(input: EstimateSubscription): Promise<import("@apollo/client/core").FetchResult<EstimateSubscriptionMutation, Record<string, any>, Record<string, any>>>;
    estimateSubscriptionUpdate(input: EstimateSubscriptionUpdate): Promise<import("@apollo/client/core").FetchResult<EstimateSubscriptionUpdateMutation, Record<string, any>, Record<string, any>>>;
    cancelSubscriptionScheduledUpdates(input: CancelSubscriptionScheduledUpdates): Promise<import("@apollo/client/core").FetchResult<CancelSubscriptionUpdatesMutation, Record<string, any>, Record<string, any>>>;
    migrateSubscriptionToLatest(input: MigrateSubscriptionToLatest): Promise<import("@apollo/client/core").FetchResult<MigrateSubscriptionToLatestMutation, Record<string, any>, Record<string, any>>>;
    /** @deprecated use {@link getUsageHistoryV2} */
    fetchUsageHistory({ customerId, featureId, resourceId, startDate, endDate }: FetchUsageHistory): Promise<import("@apollo/client/core").ApolloQueryResult<GetUsageHistoryQuery>>;
    getUsageHistoryV2(input: UsageHistoryV2Input): Promise<import("@apollo/client/core").ApolloQueryResult<GetUsageHistoryV2Query>>;
    transferSubscription(input: TransferSubscriptionInput): Promise<import("@apollo/client/core").ApolloQueryResult<TransferSubscriptionMutation>>;
    transferSubscriptionToResource(input: TransferSubscriptionToResourceInput): Promise<import("@apollo/client/core").ApolloQueryResult<TransferSubscriptionToResourceMutation>>;
    delegateSubscriptionToCustomer(input: DelegateSubscriptionToCustomerInput): Promise<import("@apollo/client/core").ApolloQueryResult<DelegateSubscriptionToCustomerMutation>>;
    grantPromotionalEntitlements(input: GrantPromotionalEntitlementsInput): Promise<import("@apollo/client/core").ApolloQueryResult<GrantPromotionalEntitlementsMutation>>;
    revokePromotionalEntitlement(input: RevokePromotionalEntitlementInput): Promise<import("@apollo/client/core").ApolloQueryResult<RevokePromotionalEntitlementMutation>>;
}
export default ManagementApi;
