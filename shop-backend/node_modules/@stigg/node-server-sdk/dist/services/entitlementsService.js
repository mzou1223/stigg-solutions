"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntitlementsService = void 0;
const entitlementsApi_1 = __importDefault(require("../api/entitlements/entitlementsApi"));
const models_1 = require("../models");
const ModelMapper_1 = require("../utils/ModelMapper");
const entitlementDecisionService_1 = require("./entitlementDecisionService");
const lodash_1 = require("lodash");
const dateUtils_1 = require("../utils/dateUtils");
const sdk_1 = require("@stigg/api-client-js/src/generated/sdk");
const CacheMapper_1 = __importDefault(require("../utils/CacheMapper"));
const entitlementsService_utils_1 = require("./entitlementsService.utils");
const featureTypes_1 = require("../utils/featureTypes");
const cachedEntitlement_1 = __importDefault(require("./cache/cachedEntitlement"));
const calculateUsagePeriod_1 = require("./cache/calculateUsagePeriod");
class EntitlementsService {
    constructor(client, loggerService, edgeApiClient, cacheService, entitlementsTimeout) {
        this.loggerService = loggerService;
        this.cacheService = cacheService;
        this.entitlementsTimeout = entitlementsTimeout;
        this.isInitialized = false;
        this.modelMapper = new ModelMapper_1.ModelMapper();
        this.cacheMapper = new CacheMapper_1.default();
        this.entitlementsApi = new entitlementsApi_1.default(client, edgeApiClient, loggerService);
    }
    async getBooleanEntitlement(customerRefId, featureRefId, fallbackEntitlement, resourceId, options) {
        const { entitlement, customerExists } = await this.getCustomerAndEntitlementFromCacheOrRefetch(featureRefId, customerRefId, resourceId, 'getBooleanEntitlement');
        const decision = entitlementDecisionService_1.EntitlementDecisionService.decideEntitlementPolicy(customerExists, entitlement);
        if (entitlement && !(0, featureTypes_1.isBoolean)(entitlement.calculatedEntitlement.feature)) {
            return Object.assign(Object.assign({}, fallbackEntitlement), { accessDeniedReason: sdk_1.AccessDeniedReason.FeatureTypeMismatch });
        }
        if (!entitlement) {
            this.loggerService.log(`No entitlement for boolean feature found`, {
                customerRefId,
                resourceId,
                featureRefId,
                accessDeniedReason: decision.accessDeniedReason,
            });
            return Object.assign(Object.assign({ type: 'BOOLEAN' }, decision), { isFallback: false });
        }
        return this.modelMapper.mapBooleanEntitlement(entitlement, decision);
    }
    async getNumericEntitlement(customerRefId, featureRefId, fallbackEntitlement, resourceId, options) {
        const { entitlement, customerExists } = await this.getCustomerAndEntitlementFromCacheOrRefetch(featureRefId, customerRefId, resourceId, 'getNumericEntitlement');
        const decision = entitlementDecisionService_1.EntitlementDecisionService.decideEntitlementPolicy(customerExists, entitlement);
        if (entitlement && !(0, featureTypes_1.isNumeric)(entitlement.calculatedEntitlement.feature)) {
            return Object.assign(Object.assign({}, fallbackEntitlement), { accessDeniedReason: sdk_1.AccessDeniedReason.FeatureTypeMismatch });
        }
        if (!entitlement) {
            this.loggerService.log(`No entitlement for numeric feature found`, {
                customerRefId,
                resourceId,
                featureRefId,
                accessDeniedReason: decision.accessDeniedReason,
            });
            return Object.assign(Object.assign({ type: 'NUMERIC' }, decision), { isFallback: false, isUnlimited: false });
        }
        return this.modelMapper.mapNumericEntitlement(entitlement, decision);
    }
    async getMeteredEntitlement(customerRefId, featureRefId, fallbackEntitlement, resourceId, options) {
        const requestUsage = options === null || options === void 0 ? void 0 : options.requestedUsage;
        const { entitlement: originalEntitlement, customerExists } = await this.getCustomerAndEntitlementFromCacheOrRefetch(featureRefId, customerRefId, resourceId, 'getMeteredEntitlement');
        const entitlement = this.handleUsagePeriodOver(originalEntitlement);
        const decision = entitlementDecisionService_1.EntitlementDecisionService.decideEntitlementPolicy(customerExists, entitlement, requestUsage);
        if (entitlement && !(0, featureTypes_1.isMetered)(entitlement.calculatedEntitlement.feature)) {
            return Object.assign(Object.assign({}, fallbackEntitlement), { accessDeniedReason: sdk_1.AccessDeniedReason.FeatureTypeMismatch });
        }
        if (!entitlement) {
            this.loggerService.log(`No entitlement for metered feature found`, {
                customerRefId,
                resourceId,
                featureRefId,
                accessDeniedReason: decision.accessDeniedReason,
            });
            return Object.assign(Object.assign({ type: 'METERED' }, decision), { currentUsage: 0, isFallback: false, isUnlimited: false, hasSoftLimit: false, requestedUsage: requestUsage || 0 });
        }
        return this.modelMapper.mapMeteredEntitlement(entitlement, decision, requestUsage);
    }
    async getEnumEntitlement(customerRefId, featureRefId, fallbackEntitlement, resourceId, options) {
        const requestedValues = options === null || options === void 0 ? void 0 : options.requestedValues;
        const { entitlement, customerExists } = await this.getCustomerAndEntitlementFromCacheOrRefetch(featureRefId, customerRefId, resourceId, 'getEnumEntitlement');
        const decision = entitlementDecisionService_1.EntitlementDecisionService.decideEntitlementPolicy(customerExists, entitlement, 0, requestedValues);
        if (entitlement && !(0, featureTypes_1.isEnum)(entitlement.calculatedEntitlement.feature)) {
            return Object.assign(Object.assign({}, fallbackEntitlement), { accessDeniedReason: sdk_1.AccessDeniedReason.FeatureTypeMismatch });
        }
        if (!entitlement) {
            this.loggerService.log(`No entitlement for enum feature found`, {
                customerRefId,
                resourceId,
                featureRefId,
                accessDeniedReason: decision.accessDeniedReason,
            });
            return Object.assign(Object.assign({ type: 'ENUM' }, decision), { isFallback: false, enumValues: [], requestedValues: requestedValues || [] });
        }
        return this.modelMapper.mapEnumEntitlement(entitlement, decision, requestedValues);
    }
    async getEntitlement(customerRefId, featureRefId, fallbackEntitlement, resourceId, requestedUsage, requestedValues) {
        const { entitlement, customerExists } = await this.getCustomerAndEntitlementFromCacheOrRefetch(featureRefId, customerRefId, resourceId, 'getEntitlement');
        const decision = entitlementDecisionService_1.EntitlementDecisionService.decideEntitlementPolicy(customerExists, entitlement, requestedUsage || 0, requestedValues);
        if (!entitlement) {
            this.loggerService.log(`No entitlement for feature found`, {
                customerRefId,
                resourceId,
                featureRefId,
                accessDeniedReason: decision.accessDeniedReason,
            });
            // Return the fallback entitlement as-is without overriding with decision
            // The fallback should contain the desired hasAccess value from user options
            return Object.assign(Object.assign({}, fallbackEntitlement), { isFallback: true });
        }
        return this.modelMapper.mapEntitlement(entitlement, decision, requestedUsage, requestedValues);
    }
    handleUsagePeriodOver(entitlement) {
        const now = new Date();
        const wasPeriodOver = entitlement &&
            (0, featureTypes_1.isMetered)(entitlement.calculatedEntitlement.feature) &&
            entitlement.featureUsage.usagePeriodEnd &&
            entitlement.featureUsage.usagePeriodEnd < now.getTime();
        if (!wasPeriodOver) {
            return entitlement;
        }
        const { calculatedEntitlement, featureUsage } = entitlement;
        const { resetPeriod, usagePeriodAnchor } = featureUsage;
        let usagePeriodStart;
        let usagePeriodEnd;
        // Calculate new usage period
        if (usagePeriodAnchor && resetPeriod) {
            ({ usagePeriodStart, usagePeriodEnd } = (0, calculateUsagePeriod_1.calculateUsagePeriod)(new Date(usagePeriodAnchor), now, resetPeriod));
        }
        return new cachedEntitlement_1.default(calculatedEntitlement, Object.assign(Object.assign({}, featureUsage), { currentUsage: 0, usagePeriodStart: usagePeriodStart === null || usagePeriodStart === void 0 ? void 0 : usagePeriodStart.getTime(), usagePeriodEnd: usagePeriodEnd === null || usagePeriodEnd === void 0 ? void 0 : usagePeriodEnd.getTime() }));
    }
    async getCustomerAndEntitlementFromCacheOrRefetch(featureRefId, customerRefId, resourceId, triggeredBy) {
        var _a;
        const result = await this.cacheService.getCustomerEntitlement(featureRefId, customerRefId, resourceId);
        let { entitlement, customerExists } = result;
        if (result.cacheMiss || !this.isInitialized) {
            const postMissResult = await this.refetchEntitlementsAfterCacheMiss({
                customerId: customerRefId,
                resourceId,
                refetchGlobalCustomer: result.globalCustomerMissing,
                triggeredBy,
            });
            entitlement = ((_a = postMissResult.entitlements) === null || _a === void 0 ? void 0 : _a.get(featureRefId)) || null;
            customerExists = postMissResult.customerExists;
        }
        return { entitlement, customerExists };
    }
    async getCustomerEntitlements(customerRefId, resourceId) {
        const result = await this.cacheService.getCustomerEntitlements(customerRefId, resourceId);
        let { entitlements, customerExists } = result;
        if (result.cacheMiss || !this.isInitialized) {
            ({ entitlements, customerExists } = await this.refetchEntitlementsAfterCacheMiss({
                customerId: customerRefId,
                resourceId,
                refetchGlobalCustomer: result.globalCustomerMissing,
                triggeredBy: 'getCustomerEntitlements',
            }));
        }
        if (!entitlements) {
            return [];
        }
        return Array.from(entitlements.values()).map((value) => {
            const decision = entitlementDecisionService_1.EntitlementDecisionService.decideEntitlementPolicy(customerExists, value);
            return this.modelMapper.mapEntitlement(value, decision);
        });
    }
    async reportUsage(input) {
        const result = await this.entitlementsApi.reportUsage(input);
        if (result.data) {
            await this.updateFeatureUsage(result.data.reportUsage);
        }
        return result;
    }
    async reportUsageBulk(input) {
        const result = await this.entitlementsApi.reportUsageBulk(input);
        if (result.data) {
            for (const measurement of result.data.reportUsageBulk) {
                await this.updateFeatureUsage(measurement);
            }
        }
        return result;
    }
    reportEvent(input) {
        return this.entitlementsApi.reportEvent(input);
    }
    async refetchEntitlementsAfterCacheMiss(params) {
        const { customerId, resourceId, triggeredBy, refetchGlobalCustomer } = params;
        const refetchPromise = this.refetchEntityEntitlementsAfterCacheMiss(params);
        if ((0, lodash_1.isNil)(resourceId) || !refetchGlobalCustomer) {
            return refetchPromise;
        }
        const globalCustomerRefetchPromise = this.refetchEntityEntitlementsAfterCacheMiss({
            customerId,
            resourceId: undefined,
            triggeredBy,
        });
        const [resourceResult] = await Promise.all([refetchPromise, globalCustomerRefetchPromise]);
        return resourceResult;
    }
    async refetchEntitlements({ customerId, resourceId, skipEdge, triggeredBy, }) {
        this.loggerService.log(`Re-fetching entitlements`, {
            customerId,
            resourceId,
            skipEdge,
            triggeredBy,
        });
        const entitlementsResult = await this.entitlementsApi.getEntitlements(customerId, resourceId, skipEdge, this.entitlementsTimeout);
        const entitlements = await this.setEntitlements({
            entitlements: entitlementsResult.data.entitlements,
            customerId,
            resourceId,
        });
        return entitlementsService_utils_1.entitlementsResponseMapper.cacheHit(entitlements);
    }
    async setEntitlementsIfExists(options) {
        const { entitlements } = options, rest = __rest(options, ["entitlements"]);
        if ((0, lodash_1.isNil)(entitlements)) {
            return Promise.resolve(null);
        }
        return this.setEntitlements(Object.assign({ entitlements }, rest));
    }
    async setEntitlements(params) {
        const { entitlements, customerId, resourceId } = params;
        const entitlementsUpdatedAtTimestamp = this.getEntitlementsUpdatedAtTimestamp(params);
        const featureIdToUsageTimestamp = new Map(entitlements
            .filter((entitlement) => {
            var _a, _b;
            return ((_a = entitlement === null || entitlement === void 0 ? void 0 : entitlement.feature) === null || _a === void 0 ? void 0 : _a.meterType) &&
                ((_b = entitlement === null || entitlement === void 0 ? void 0 : entitlement.feature) === null || _b === void 0 ? void 0 : _b.meterType) !== models_1.MeterType.None &&
                (entitlement === null || entitlement === void 0 ? void 0 : entitlement.feature.refId) &&
                entitlement.usageUpdatedAt &&
                (0, dateUtils_1.isValidDate)(entitlement.usageUpdatedAt);
        })
            .map((entitlement) => { var _a; return [((_a = entitlement.feature) === null || _a === void 0 ? void 0 : _a.refId) || '', new Date(entitlement.usageUpdatedAt).getTime()]; }));
        const cachedEntitlements = this.cacheMapper.mapCachedEntitlements(entitlements);
        // optimistically update the cache
        try {
            await this.cacheService.setCustomer(customerId, cachedEntitlements, resourceId, entitlementsUpdatedAtTimestamp.getTime(), featureIdToUsageTimestamp);
        }
        catch (err) {
            this.loggerService.error('Failed to set customer entitlements in cache (soft ignored)', err);
        }
        return cachedEntitlements;
    }
    getEntitlementsUpdatedAtTimestamp({ entitlements, customerId, resourceId, }) {
        if ((0, lodash_1.isEmpty)(entitlements)) {
            // empty entitlements means we don't have a timestamp
            return entitlementsService_utils_1.DATE_IN_FAR_PAST;
        }
        const entitlementsUpdatedAt = entitlements
            .map(({ entitlementUpdatedAt }) => entitlementUpdatedAt)
            .find((entitlementUpdatedAt) => (0, dateUtils_1.isValidDate)(entitlementUpdatedAt));
        if (!entitlementsUpdatedAt) {
            this.loggerService.error(`Failed to find entitlements updated at timestamp for customer`, {
                customerId,
                resourceId,
            });
            return new Date();
        }
        return new Date(entitlementsUpdatedAt);
    }
    async updateFeatureUsage({ featureId, customerId, resourceId, currentUsage, usagePeriodStart, usagePeriodEnd, timestamp, }) {
        var _a, _b;
        if ((0, lodash_1.isNil)(currentUsage)) {
            return;
        }
        const response = await this.cacheService.getCustomerEntitlement(featureId, customerId, resourceId || undefined);
        if (response.cacheMiss) {
            return;
        }
        await this.cacheService.updateFeatureUsage({
            featureId,
            customerId,
            resourceId: resourceId || undefined,
            currentUsage,
            timestamp: new Date(timestamp),
            usagePeriodStart: (_a = (0, dateUtils_1.mapDate)(usagePeriodStart)) === null || _a === void 0 ? void 0 : _a.getTime(),
            usagePeriodEnd: (_b = (0, dateUtils_1.mapDate)(usagePeriodEnd)) === null || _b === void 0 ? void 0 : _b.getTime(),
        });
    }
    async waitForInitialization() {
        await this.cacheService.waitForInitialization();
    }
}
exports.EntitlementsService = EntitlementsService;
//# sourceMappingURL=data:application/json;base64,