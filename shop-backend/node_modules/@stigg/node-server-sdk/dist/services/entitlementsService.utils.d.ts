import CachedEntitlement from './cache/cachedEntitlement';
export declare type GetEntitlementsOperations = 'getBooleanEntitlement' | 'getNumericEntitlement' | 'getMeteredEntitlement' | 'getEnumEntitlement' | 'getEntitlement' | 'getCustomerEntitlements';
export declare type RefetchEntitlementsTriggeredBy = GetEntitlementsOperations | 'updateSubscription' | 'cancelSubscription' | 'createSubscription' | 'reloadEntitlements';
export declare const DATE_IN_FAR_PAST: Date;
export declare type EntitlementsMap = Map<string, CachedEntitlement>;
export declare type EntitlementsResponseCacheHit = {
    cacheMiss: false;
    entitlements: EntitlementsMap;
    customerExists: boolean;
    globalCustomerMissing: false;
};
export declare type EntitlementsResponseCacheMiss = {
    cacheMiss: true;
    entitlements: null;
    customerExists: false;
    globalCustomerMissing: boolean;
};
export declare type EntitlementsResponse = EntitlementsResponseCacheHit | EntitlementsResponseCacheMiss;
export declare type EntitlementResponse = {
    cacheMiss: boolean;
    customerExists: boolean;
    entitlement: CachedEntitlement | null;
    globalCustomerMissing: boolean;
};
export declare const doesCustomerExist: (entitlements: EntitlementsMap) => boolean;
export declare const entitlementsResponseMapper: {
    cacheHit: (entitlements: EntitlementsMap) => EntitlementsResponseCacheHit;
    cacheMiss: (globalCustomerMissing?: boolean) => EntitlementsResponseCacheMiss;
};
export declare type RefetchEntityEntitlementsAfterCacheMissParams = {
    customerId: string;
    resourceId: string | undefined;
    triggeredBy: GetEntitlementsOperations;
};
export declare type RefetchEntitlementsAfterCacheMissParams = RefetchEntityEntitlementsAfterCacheMissParams & {
    refetchGlobalCustomer: boolean;
};
export declare type RefetchEntitlementsParams = {
    customerId: string;
    resourceId: string | undefined;
    skipEdge?: boolean;
    triggeredBy: RefetchEntitlementsTriggeredBy;
};
