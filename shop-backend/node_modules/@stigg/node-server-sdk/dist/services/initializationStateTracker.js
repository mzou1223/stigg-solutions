"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitializationStateTracker = exports.InitializationState = void 0;
var InitializationState;
(function (InitializationState) {
    InitializationState["IN_PROGRESS"] = "IN_PROGRESS";
    InitializationState["SUCCESS"] = "READY";
    InitializationState["FAILED"] = "FAILED";
})(InitializationState = exports.InitializationState || (exports.InitializationState = {}));
class InitializationStateTracker {
    constructor(eventEmitter) {
        this.eventEmitter = eventEmitter;
        this.initializationPromise = null;
        this.initializationStatus = InitializationState.IN_PROGRESS;
        this.initFailureError = null;
    }
    getInitializationPromise() {
        if (this.initializationPromise) {
            return this.initializationPromise;
        }
        if (this.initializationStatus === InitializationState.SUCCESS) {
            return Promise.resolve();
        }
        if (this.initializationStatus === InitializationState.FAILED) {
            return Promise.reject(this.initFailureError);
        }
        this.initializationPromise = new Promise((resolve, reject) => {
            const onSuccess = () => {
                resolve();
            };
            const onFailure = (err) => {
                reject(err);
            };
            this.eventEmitter.once('initializeSuccessfully', onSuccess);
            this.eventEmitter.once('initializeFailed', onFailure);
        });
        return this.initializationPromise;
    }
    signalSuccessInit() {
        this.initializationStatus = InitializationState.SUCCESS;
        this.eventEmitter.emit('initializeSuccessfully');
    }
    signalFailedInit(err) {
        this.initializationStatus = InitializationState.FAILED;
        this.initFailureError = err;
        this.eventEmitter.emit('initializeFailed', err);
    }
}
exports.InitializationStateTracker = InitializationStateTracker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbGl6YXRpb25TdGF0ZVRyYWNrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmljZXMvaW5pdGlhbGl6YXRpb25TdGF0ZVRyYWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsSUFBWSxtQkFJWDtBQUpELFdBQVksbUJBQW1CO0lBQzdCLGtEQUEyQixDQUFBO0lBQzNCLHdDQUFpQixDQUFBO0lBQ2pCLHdDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFKVyxtQkFBbUIsR0FBbkIsMkJBQW1CLEtBQW5CLDJCQUFtQixRQUk5QjtBQUVELE1BQWEsMEJBQTBCO0lBS3JDLFlBQTZCLFlBQStCO1FBQS9CLGlCQUFZLEdBQVosWUFBWSxDQUFtQjtRQUo1RCwwQkFBcUIsR0FBeUIsSUFBSSxDQUFDO1FBQ25ELHlCQUFvQixHQUFHLG1CQUFtQixDQUFDLFdBQVcsQ0FBQztRQUN2RCxxQkFBZ0IsR0FBaUIsSUFBSSxDQUFDO0lBRXlCLENBQUM7SUFFaEUsd0JBQXdCO1FBQ3RCLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQzlCLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDO1NBQ25DO1FBRUQsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEtBQUssbUJBQW1CLENBQUMsT0FBTyxFQUFFO1lBQzdELE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzFCO1FBRUQsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEtBQUssbUJBQW1CLENBQUMsTUFBTSxFQUFFO1lBQzVELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUM5QztRQUVELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUMzRCxNQUFNLFNBQVMsR0FBRyxHQUFHLEVBQUU7Z0JBQ3JCLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQyxDQUFDO1lBQ0YsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFVLEVBQUUsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsQ0FBQyxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDNUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztJQUNwQyxDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG1CQUFtQixDQUFDLE9BQU8sQ0FBQztRQUN4RCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxHQUFRO1FBQ3ZCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUM7UUFDdkQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztRQUM1QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBQ0Y7QUE1Q0QsZ0VBNENDIn0=