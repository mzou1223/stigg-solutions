import { EntitlementsService } from './entitlementsService';
import { RefetchEntityEntitlementsAfterCacheMissParams } from './entitlementsService.utils';
import { ApolloClient, NormalizedCacheObject } from '@apollo/client/core';
import { LoggerService } from './loggerService';
import { RedisCacheService } from './cache/redisCacheService';
import { EdgeApiClient } from './EdgeApiClient';
export declare class RedisEntitlementsService extends EntitlementsService {
    protected readonly cacheService: RedisCacheService;
    protected readonly graphqlClient: ApolloClient<NormalizedCacheObject>;
    protected readonly loggerService: LoggerService;
    constructor(cacheService: RedisCacheService, graphqlClient: ApolloClient<NormalizedCacheObject>, loggerService: LoggerService, edgeApiClient: EdgeApiClient | null, entitlementsTimeout: number);
    protected refetchEntityEntitlementsAfterCacheMiss(params: RefetchEntityEntitlementsAfterCacheMissParams): Promise<import("./entitlementsService.utils").EntitlementsResponse>;
    clearCache(): Promise<void>;
    init(): void | Promise<void>;
    cleanup(): void | Promise<void>;
}
