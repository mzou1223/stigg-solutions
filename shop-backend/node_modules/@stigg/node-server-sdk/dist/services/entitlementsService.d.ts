import EntitlementsApi from '../api/entitlements/entitlementsApi';
import { LoggerService } from './loggerService';
import { ApolloClient, FetchResult, NormalizedCacheObject } from '@apollo/client/core';
import { BooleanEntitlement, BooleanEntitlementOptions, CreateUsageMeasurement, Entitlement, EnumEntitlement, EnumEntitlementOptions, MeteredEntitlement, MeteredEntitlementOptions, NumericEntitlement, NumericEntitlementOptions, ReportEvent } from '../models';
import { ModelMapper } from '../utils/ModelMapper';
import { CacheService } from './cache/cacheService';
import { EdgeApiClient } from './EdgeApiClient';
import { EntitlementFragment, ReportEventMutation, ReportUsageBulkInput, ReportUsageBulkMutation, ReportUsageFragment, ReportUsageMutation } from '@stigg/api-client-js/src/generated/sdk';
import CacheMapper from '../utils/CacheMapper';
import { EntitlementsResponse, EntitlementsResponseCacheHit, RefetchEntitlementsAfterCacheMissParams, RefetchEntitlementsParams, RefetchEntityEntitlementsAfterCacheMissParams } from './entitlementsService.utils';
import CachedEntitlement from './cache/cachedEntitlement';
export declare abstract class EntitlementsService {
    protected readonly loggerService: LoggerService;
    protected readonly cacheService: CacheService;
    private readonly entitlementsTimeout;
    protected readonly entitlementsApi: EntitlementsApi;
    protected readonly modelMapper: ModelMapper;
    protected readonly cacheMapper: CacheMapper;
    protected isInitialized: boolean;
    protected constructor(client: ApolloClient<NormalizedCacheObject>, loggerService: LoggerService, edgeApiClient: EdgeApiClient | null, cacheService: CacheService, entitlementsTimeout: number);
    getBooleanEntitlement(customerRefId: string, featureRefId: string, fallbackEntitlement: BooleanEntitlement, resourceId?: string, options?: BooleanEntitlementOptions): Promise<BooleanEntitlement>;
    getNumericEntitlement(customerRefId: string, featureRefId: string, fallbackEntitlement: NumericEntitlement, resourceId?: string, options?: NumericEntitlementOptions): Promise<NumericEntitlement>;
    getMeteredEntitlement(customerRefId: string, featureRefId: string, fallbackEntitlement: MeteredEntitlement, resourceId?: string, options?: MeteredEntitlementOptions): Promise<MeteredEntitlement>;
    getEnumEntitlement(customerRefId: string, featureRefId: string, fallbackEntitlement: EnumEntitlement, resourceId?: string, options?: EnumEntitlementOptions): Promise<EnumEntitlement>;
    getEntitlement(customerRefId: string, featureRefId: string, fallbackEntitlement: Entitlement, resourceId?: string, requestedUsage?: number, requestedValues?: string[]): Promise<Entitlement>;
    private handleUsagePeriodOver;
    private getCustomerAndEntitlementFromCacheOrRefetch;
    getCustomerEntitlements(customerRefId: string, resourceId: string | undefined): Promise<Entitlement[]>;
    abstract clearCache(): void | Promise<void>;
    abstract init(): void | Promise<void>;
    abstract cleanup(): void | Promise<void>;
    reportUsage(input: CreateUsageMeasurement): Promise<FetchResult<ReportUsageMutation>>;
    reportUsageBulk(input: ReportUsageBulkInput): Promise<FetchResult<ReportUsageBulkMutation>>;
    reportEvent(input: ReportEvent[]): Promise<FetchResult<ReportEventMutation>>;
    protected refetchEntitlementsAfterCacheMiss(params: RefetchEntitlementsAfterCacheMissParams): Promise<EntitlementsResponse>;
    protected abstract refetchEntityEntitlementsAfterCacheMiss(params: RefetchEntityEntitlementsAfterCacheMissParams): Promise<EntitlementsResponse>;
    refetchEntitlements({ customerId, resourceId, skipEdge, triggeredBy, }: RefetchEntitlementsParams): Promise<EntitlementsResponseCacheHit>;
    setEntitlementsIfExists(options: {
        entitlements?: EntitlementFragment[] | null;
        customerId: string;
        resourceId: string | undefined;
    }): Promise<Map<string, CachedEntitlement> | null>;
    setEntitlements(params: {
        entitlements: EntitlementFragment[];
        customerId: string;
        resourceId: string | undefined;
    }): Promise<Map<string, CachedEntitlement>>;
    private getEntitlementsUpdatedAtTimestamp;
    updateFeatureUsage({ featureId, customerId, resourceId, currentUsage, usagePeriodStart, usagePeriodEnd, timestamp, }: ReportUsageFragment): Promise<void>;
    waitForInitialization(): Promise<void>;
}
