import { CacheService, UpdateFeatureUsagePayload } from './cacheService';
import CachedEntitlement from './cachedEntitlement';
import { EntitlementResponse, EntitlementsResponse } from '../entitlementsService.utils';
import { CacheInstrumentation } from '../cacheInstrumentation';
export declare function getApproxSizeBytes(obj: any): number;
export declare class InMemoryCacheService implements CacheService {
    private readonly instrumentation;
    private readonly entitlements;
    constructor(maxSizeBytes: number, instrumentation: CacheInstrumentation);
    waitForInitialization(): Promise<void>;
    clearCache: () => void;
    setCustomer(customerId: string, customerEntitlements: Map<string, CachedEntitlement>, resourceId: string | undefined): void;
    getCustomerEntitlements(customerId: string, resourceId: string | undefined): EntitlementsResponse;
    updateFeatureUsage({ customerId, featureId, currentUsage, resourceId, usagePeriodStart, usagePeriodEnd, }: UpdateFeatureUsagePayload): boolean | Promise<boolean>;
    getCustomerEntitlement(featureId: string, customerId: string, resourceId: string | undefined): EntitlementResponse;
}
