import { SourceType } from '@stigg/api-client-js/src/generated/sdk';
import { LogConfiguration, LoggerService } from './services/loggerService';
import { RedisOptions } from 'ioredis/built/redis/RedisOptions';
import { EntitlementsFallback } from './models';
export declare const SDK_SOURCE_TYPE = SourceType.NodeServerSdk;
export declare const SDK_NAME = "node-server-sdk";
export declare const DEFAULT_TIMEOUT: number;
export declare const DEFAULT_ENTITLEMENTS_TIMEOUT: number;
export declare type DistributedEntitlementsFetchingOptions = {
    /** Whether to disable the distributed entitlements fetching mechanism */
    disabled?: boolean;
    /**
     * @deprecated not in use anymore - it will be calculated according to the {@link ClientConfiguration.entitlementsTimeout} value
     */
    notificationTimeoutMs?: number;
    /**
     * The buffer in milliseconds for waiting for notification from other instance.
     */
    notificationBufferMs?: number;
};
export declare type StiggRedisOptions = RedisOptions & {
    /** A prefix used in all Redis interactions to distinguish between different environments operating on the same Redis database */
    environmentPrefix: string;
    /** The TTL of data stored in Redis */
    ttl?: number;
    /** Configuration of the distributed entitlements fetching in case of a cache miss */
    distributedEntitlementsFetching?: DistributedEntitlementsFetchingOptions;
};
declare type ClientConfiguration = {
    apiKey: string;
    baseUri?: string;
    baseEdgeUri?: string;
    wsUrl?: string;
    logConfiguration?: LogConfiguration;
    realtimeUpdatesEnabled?: boolean;
    enableEdge?: boolean;
    redis?: StiggRedisOptions;
    entitlementsFallback?: EntitlementsFallback;
    memoryCacheMaxSizeBytes?: number;
    clientName?: string;
    clientVersion?: string;
    enableRemoteConfig?: boolean;
    timeout?: number;
    entitlementsTimeout?: number;
    offline?: boolean;
};
declare function getConfiguration(configuration: Partial<ClientConfiguration>): Required<ClientConfiguration>;
/**
 * We are validating here configuration that is required in order to initiate a new client, otherwise we return error
 */
declare function validateConfiguration(configuration: Partial<ClientConfiguration>, loggerService: LoggerService): void;
export { getConfiguration, ClientConfiguration, validateConfiguration };
