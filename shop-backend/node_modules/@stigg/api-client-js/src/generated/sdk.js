"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontWeight = exports.FeatureType = exports.FeatureStatus = exports.FeatureSortFields = exports.FeatureGroupStatus = exports.FeatureGroupSortFields = exports.ExperimentStatus = exports.ExperimentSortFields = exports.EventLogType = exports.EventLogSortFields = exports.EventEntityType = exports.EventActor = exports.ErrorCode = exports.EnvironmentType = exports.EnvironmentSortFields = exports.EnvironmentProvisionStatus = exports.EnvironmentAccessRole = exports.EntitySelectionMode = exports.EntitlementResetPeriod = exports.EntitlementBehavior = exports.DiscountType = exports.DiscountDurationType = exports.Department = exports.CustomerSubscriptionSortFields = exports.CustomerSortFields = exports.CustomerResourceSortFields = exports.Currency = exports.CreditLedgerEventType = exports.CreditGrantType = exports.CouponType = exports.CouponStatus = exports.CouponSource = exports.CouponSortFields = exports.ConditionOperation = exports.ChangeType = exports.BillingVendorIdentifier = exports.BillingPeriod = exports.BillingModel = exports.BillingCadence = exports.BillingAnchor = exports.Auth0ApplicationType = exports.ApiKeyType = exports.ApiKeySortFields = exports.Alignment = exports.AggregationFunction = exports.AddonSortFields = exports.AccountStatus = exports.AccountAccessRole = exports.AccountAccessMethod = exports.AccessDeniedReason = void 0;
exports.SubscriptionScheduleType = exports.SubscriptionScheduleStatus = exports.SubscriptionQuerySortFields = exports.SubscriptionProrationBehavior = exports.SubscriptionPriceSortFields = exports.SubscriptionMigrationTime = exports.SubscriptionMigrationTaskSortFields = exports.SubscriptionInvoiceStatus = exports.SubscriptionInvoiceBillingReason = exports.SubscriptionEntitlementSortFields = exports.SubscriptionEndSetup = exports.SubscriptionDecisionStrategy = exports.SubscriptionCouponStatus = exports.SubscriptionCancellationTime = exports.SubscriptionCancellationAction = exports.SubscriptionCancelReason = exports.SubscriptionAddonSortFields = exports.SourceType = exports.SortNulls = exports.SortDirection = exports.ScheduleStrategy = exports.PublishMigrationType = exports.ProvisionSubscriptionStatus = exports.ProrationBehavior = exports.PromotionalEntitlementStatus = exports.PromotionalEntitlementSortFields = exports.PromotionalEntitlementPeriod = exports.ProductSortFields = exports.PricingType = exports.PriceSortFields = exports.PlanSortFields = exports.PlanChangeType = exports.PaymentMethodType = exports.PaymentCollectionMethod = exports.PaymentCollection = exports.PackageStatus = exports.PackageGroupStatus = exports.PackageGroupSortFields = exports.PackageEntitlementSortFields = exports.PackageDtoSortFields = exports.OverageBillingPeriod = exports.MonthlyAccordingTo = exports.MeterType = exports.MemberStatus = exports.MemberSortFields = exports.InvoiceLineItemType = exports.IntegrationSortFields = exports.ImportIntegrationTaskSortFields = exports.HookStatus = exports.HookSortFields = void 0;
exports.SubscriptionInvoicePreviewFragmentDoc = exports.SubscriptionPreviewV2FragmentDoc = exports.SubscriptionPreviewInvoiceFragmentDoc = exports.ImmediateSubscriptionPreviewInvoiceFragmentDoc = exports.SubscriptionPreviewFragmentDoc = exports.CustomerStatisticsFragmentDoc = exports.CustomerWithSubscriptionsFragmentDoc = exports.SubscriptionFragmentDoc = exports.SubscriptionTrialConfigurationFragmentDoc = exports.SubscriptionFutureUpdateDataFragmentDoc = exports.SubscriptionScheduledUpdateDataFragmentDoc = exports.ScheduleVariablesFragmentDoc = exports.PlanFragmentDoc = exports.PlanCompatiblePackageGroupsFragmentDoc = exports.AddonFragmentDoc = exports.AddonDependencyFragmentDoc = exports.OveragePriceFragmentDoc = exports.PackageEntitlementFragmentDoc = exports.ProductFragmentDoc = exports.TotalPriceFragmentDoc = exports.PriceFragmentDoc = exports.PriceTierFragmentDoc = exports.CustomerResourceFragmentDoc = exports.SubscriptionInvoiceFragmentDoc = exports.CustomerFragmentDoc = exports.PromotionalEntitlementFragmentDoc = exports.CouponFragmentDoc = exports.SlimCustomerFragmentDoc = exports.SlimSubscriptionFragmentV2FragmentDoc = exports.SubscriptionQueryFragmentDoc = exports.PageInfoFragmentDoc = exports.ExperimentGroupType = exports.YearlyAccordingTo = exports.WidgetType = exports.WeeklyAccordingTo = exports.VendorType = exports.VendorIdentifier = exports.UsageUpdateBehavior = exports.UsageMeasurementSortFields = exports.UsageMarkerType = exports.UnitTransformationRound = exports.TrialPeriodUnits = exports.TrialEndBehavior = exports.TiersMode = exports.TaskType = exports.TaskStatus = exports.SyncStatus = exports.SubscriptionUpdateUsageCutoffBehavior = exports.SubscriptionStatus = exports.SubscriptionStartSetup = void 0;
exports.ImportSubscriptionsBulkDocument = exports.ApplySubscriptionDocument = exports.ProvisionSubscriptionDocument = exports.RevokePromotionalEntitlementDocument = exports.GrantPromotionalEntitlementsDocument = exports.DetachCustomerPaymentMethodDocument = exports.UpdateCustomerDocument = exports.ImportCustomerDocument = exports.ImportCustomerBulkDocument = exports.ProvisionCustomerDocument = exports.CreditsBalanceSummaryFragmentDoc = exports.CreditGrantFragmentDoc = exports.ReportUsageFragmentDoc = exports.ProvisionSubscriptionFragmentDoc = exports.ApplySubscriptionFragmentDoc = exports.ProvisionCustomerFragmentDoc = exports.SlimSubscriptionFragmentDoc = exports.UsageHistoryV2FragmentDoc = exports.UsageHistoryFragmentDoc = exports.PaywallFragmentDoc = exports.PaywallCalculatedPricePointsFragmentDoc = exports.PaywallConfigurationFragmentDoc = exports.LayoutConfigurationFragmentDoc = exports.PaywallCurrencyFragmentDoc = exports.MockPaywallPlanFragmentDoc = exports.MockPaywallPlanCompatiblePackageGroupsFragmentDoc = exports.MockPaywallAddonFragmentDoc = exports.MockPaywallAddonDependencyFragmentDoc = exports.MockPaywallPriceFragmentDoc = exports.MockPaywallPackageEntitlementFragmentDoc = exports.CheckoutStateFragmentDoc = exports.CheckoutConfigurationFragmentDoc = exports.CustomerPortalFragmentDoc = exports.CustomerPortalConfigurationFragmentDoc = exports.TypographyConfigurationFragmentDoc = exports.FontVariantFragmentDoc = exports.CustomerPortalBillingInformationFragmentDoc = exports.CustomerPortalPromotionalEntitlementFragmentDoc = exports.CustomerPortalEntitlementFragmentDoc = exports.CustomerPortalSubscriptionFragmentDoc = exports.CustomerPortalSubscriptionScheduledUpdateDataFragmentDoc = exports.CustomerPortalSubscriptionAddonFragmentDoc = exports.CustomerPortalSubscriptionPriceFragmentDoc = exports.PackagePublishedPayloadFragmentDoc = exports.EntitlementUsageUpdatedFragmentDoc = exports.UsageUpdatedFragmentDoc = exports.EntitlementsUpdatedPayloadFragmentDoc = exports.EntitlementFragmentDoc = exports.FeatureFragmentDoc = exports.ResetPeriodConfigurationFragmentDoc = void 0;
exports.getSdk = exports.OnPackagePublishedDocument = exports.OnUsageUpdatedDocument = exports.OnEntitlementsUpdatedDocument = exports.GetCreditGrantsDocument = exports.GetCreditBalanceDocument = exports.GetUsageHistoryV2Document = exports.GetUsageHistoryDocument = exports.GetMockPaywallDocument = exports.GetCheckoutStateDocument = exports.GetCustomerPortalByRefIdDocument = exports.GetSdkConfigurationDocument = exports.GetProductsDocument = exports.GetEntitlementDocument = exports.GetEntitlementsDocument = exports.GetPaywallDocument = exports.GetCouponsDocument = exports.GetSubscriptionDocument = exports.GetSubscriptionsDocument = exports.GetActiveSubscriptionsListDocument = exports.GetActiveSubscriptionsDocument = exports.GetCustomerStatisticsDocument = exports.GetCustomerByIdDocument = exports.GrantCreditsDocument = exports.TransferSubscriptionToResourceDocument = exports.DelegateSubscriptionToCustomerDocument = exports.TransferSubscriptionDocument = exports.UnarchiveCustomerDocument = exports.ArchiveCustomerDocument = exports.MigrateSubscriptionToLatestDocument = exports.CreateSubscriptionDocument = exports.ReportEntitlementCheckRequestedDocument = exports.ReportEventDocument = exports.ReportUsageBulkDocument = exports.ReportUsageDocument = exports.CancelSubscriptionUpdatesDocument = exports.PreviewNextInvoiceDocument = exports.PreviewSubscriptionDocument = exports.EstimateSubscriptionUpdateDocument = exports.EstimateSubscriptionDocument = exports.CancelSubscriptionDocument = exports.UpdateSubscriptionDocument = void 0;
const graphql_tag_1 = require("graphql-tag");
/** DenyReason of get access policy */
var AccessDeniedReason;
(function (AccessDeniedReason) {
    /** The customer has exceeded their usage budget for the feature. */
    AccessDeniedReason["BudgetExceeded"] = "BudgetExceeded";
    /** The customer is archived and no longer eligible for entitlements. */
    AccessDeniedReason["CustomerIsArchived"] = "CustomerIsArchived";
    /** The customer making the request could not be found. */
    AccessDeniedReason["CustomerNotFound"] = "CustomerNotFound";
    /** The resource associated with the customer could not be found. */
    AccessDeniedReason["CustomerResourceNotFound"] = "CustomerResourceNotFound";
    /** The requested feature does not exist or is not defined in the current environment. */
    AccessDeniedReason["FeatureNotFound"] = "FeatureNotFound";
    /** The requested entitlement type does not match the feature type */
    AccessDeniedReason["FeatureTypeMismatch"] = "FeatureTypeMismatch";
    /** The customer does not have enough credits to access the feature. */
    AccessDeniedReason["InsufficientCredits"] = "InsufficientCredits";
    /** The customer does not have any active subscription linked to the feature. */
    AccessDeniedReason["NoActiveSubscription"] = "NoActiveSubscription";
    /** The current subscription does not include entitlement to the requested feature. */
    AccessDeniedReason["NoFeatureEntitlementInSubscription"] = "NoFeatureEntitlementInSubscription";
    /** The customers usage request exceeds their entitled limit. */
    AccessDeniedReason["RequestedUsageExceedingLimit"] = "RequestedUsageExceedingLimit";
    /** The requested values do not match the expected values for the feature. */
    AccessDeniedReason["RequestedValuesMismatch"] = "RequestedValuesMismatch";
    /** Entitlement access was revoked */
    AccessDeniedReason["Revoked"] = "Revoked";
    /** The access denial occurred for an unknown or unexpected reason. */
    AccessDeniedReason["Unknown"] = "Unknown";
})(AccessDeniedReason = exports.AccessDeniedReason || (exports.AccessDeniedReason = {}));
/** different methods to control how new users can join an account */
var AccountAccessMethod;
(function (AccountAccessMethod) {
    /** when a user with the same email-domain as the account authorized domain is registered, it will be automatically added to this account (an accountEmailDomain need to be configured) */
    AccountAccessMethod["AuthorizedDomain"] = "AUTHORIZED_DOMAIN";
    /** new users can only be added to the account if they are invited */
    AccountAccessMethod["InviteOnly"] = "INVITE_ONLY";
    /** an identity provider will be used to provide new users access to this account (an accountEmailDomain need to be configured) */
    AccountAccessMethod["Sso"] = "SSO";
})(AccountAccessMethod = exports.AccountAccessMethod || (exports.AccountAccessMethod = {}));
/** Account access role of the user */
var AccountAccessRole;
(function (AccountAccessRole) {
    /** User can view and manage environments they have been granted access to */
    AccountAccessRole["Member"] = "MEMBER";
    /** User has full ownership and control over the account */
    AccountAccessRole["Owner"] = "OWNER";
})(AccountAccessRole = exports.AccountAccessRole || (exports.AccountAccessRole = {}));
/** Account status */
var AccountStatus;
(function (AccountStatus) {
    /** The account is active and in use */
    AccountStatus["Active"] = "ACTIVE";
    /** The account is blocked and cannot be used */
    AccountStatus["Blocked"] = "BLOCKED";
})(AccountStatus = exports.AccountStatus || (exports.AccountStatus = {}));
var AddonSortFields;
(function (AddonSortFields) {
    AddonSortFields["BillingId"] = "billingId";
    AddonSortFields["CreatedAt"] = "createdAt";
    AddonSortFields["Description"] = "description";
    AddonSortFields["DisplayName"] = "displayName";
    AddonSortFields["EnvironmentId"] = "environmentId";
    AddonSortFields["Id"] = "id";
    AddonSortFields["IsLatest"] = "isLatest";
    AddonSortFields["PricingType"] = "pricingType";
    AddonSortFields["ProductId"] = "productId";
    AddonSortFields["RefId"] = "refId";
    AddonSortFields["Status"] = "status";
    AddonSortFields["UpdatedAt"] = "updatedAt";
    AddonSortFields["VersionNumber"] = "versionNumber";
})(AddonSortFields = exports.AddonSortFields || (exports.AddonSortFields = {}));
/** Aggregation function */
var AggregationFunction;
(function (AggregationFunction) {
    /** Average value */
    AggregationFunction["Avg"] = "AVG";
    /** Count of the values */
    AggregationFunction["Count"] = "COUNT";
    /** Maximum value */
    AggregationFunction["Max"] = "MAX";
    /** Minimum value */
    AggregationFunction["Min"] = "MIN";
    /** Sum of the values */
    AggregationFunction["Sum"] = "SUM";
    /** Unique values */
    AggregationFunction["Unique"] = "UNIQUE";
})(AggregationFunction = exports.AggregationFunction || (exports.AggregationFunction = {}));
/** Alignment */
var Alignment;
(function (Alignment) {
    /** Align content to the horizontal center of the container. */
    Alignment["Center"] = "CENTER";
    /** Align content to the left edge of the container. */
    Alignment["Left"] = "LEFT";
    /** Align content to the right edge of the container. */
    Alignment["Right"] = "RIGHT";
})(Alignment = exports.Alignment || (exports.Alignment = {}));
var ApiKeySortFields;
(function (ApiKeySortFields) {
    ApiKeySortFields["Id"] = "id";
})(ApiKeySortFields = exports.ApiKeySortFields || (exports.ApiKeySortFields = {}));
/** The type of API key */
var ApiKeyType;
(function (ApiKeyType) {
    /** Client-side API key */
    ApiKeyType["Client"] = "CLIENT";
    /** Salesforce API key */
    ApiKeyType["Salesforce"] = "SALESFORCE";
    /** Server-side API key */
    ApiKeyType["Server"] = "SERVER";
    /** Workflow API key */
    ApiKeyType["Workflow"] = "WORKFLOW";
})(ApiKeyType = exports.ApiKeyType || (exports.ApiKeyType = {}));
/** Auth0 application type */
var Auth0ApplicationType;
(function (Auth0ApplicationType) {
    /** Both individual and organization Auth0 application types */
    Auth0ApplicationType["Both"] = "BOTH";
    /** Individual Auth0 application type */
    Auth0ApplicationType["Individual"] = "INDIVIDUAL";
    /** Organization Auth0 application type */
    Auth0ApplicationType["Organization"] = "ORGANIZATION";
})(Auth0ApplicationType = exports.Auth0ApplicationType || (exports.Auth0ApplicationType = {}));
/** Billing anchor for subscription billing */
var BillingAnchor;
(function (BillingAnchor) {
    /** Billing will be anchored to the start of the month */
    BillingAnchor["StartOfTheMonth"] = "START_OF_THE_MONTH";
    /** Subscriptions will consolidate billing to the start of the month */
    BillingAnchor["SubscriptionsConsolidateBilling"] = "SUBSCRIPTIONS_CONSOLIDATE_BILLING";
    /** Billing will be anchored to the start of the subscription */
    BillingAnchor["SubscriptionStart"] = "SUBSCRIPTION_START";
})(BillingAnchor = exports.BillingAnchor || (exports.BillingAnchor = {}));
/** Billing Cadence */
var BillingCadence;
(function (BillingCadence) {
    /** One off */
    BillingCadence["OneOff"] = "ONE_OFF";
    /** Recurring */
    BillingCadence["Recurring"] = "RECURRING";
})(BillingCadence = exports.BillingCadence || (exports.BillingCadence = {}));
/** Billing model */
var BillingModel;
(function (BillingModel) {
    /** Credit based */
    BillingModel["CreditBased"] = "CREDIT_BASED";
    /** Flat fee */
    BillingModel["FlatFee"] = "FLAT_FEE";
    /** Minimum spend */
    BillingModel["MinimumSpend"] = "MINIMUM_SPEND";
    /** Per unit */
    BillingModel["PerUnit"] = "PER_UNIT";
    /** Usage based */
    BillingModel["UsageBased"] = "USAGE_BASED";
})(BillingModel = exports.BillingModel || (exports.BillingModel = {}));
/** Billing period */
var BillingPeriod;
(function (BillingPeriod) {
    /** Annually */
    BillingPeriod["Annually"] = "ANNUALLY";
    /** Monthly */
    BillingPeriod["Monthly"] = "MONTHLY";
})(BillingPeriod = exports.BillingPeriod || (exports.BillingPeriod = {}));
/** Billing vendor identifiers */
var BillingVendorIdentifier;
(function (BillingVendorIdentifier) {
    /** Stripe */
    BillingVendorIdentifier["Stripe"] = "STRIPE";
})(BillingVendorIdentifier = exports.BillingVendorIdentifier || (exports.BillingVendorIdentifier = {}));
/** Change type enum */
var ChangeType;
(function (ChangeType) {
    /** Added */
    ChangeType["Added"] = "ADDED";
    /** Deleted */
    ChangeType["Deleted"] = "DELETED";
    /** Modified */
    ChangeType["Modified"] = "MODIFIED";
    /** Reordered */
    ChangeType["Reordered"] = "REORDERED";
})(ChangeType = exports.ChangeType || (exports.ChangeType = {}));
/** Condition operation */
var ConditionOperation;
(function (ConditionOperation) {
    /** Equals operation */
    ConditionOperation["Equals"] = "EQUALS";
    /** Greater than operation */
    ConditionOperation["GreaterThan"] = "GREATER_THAN";
    /** Greater than or equal operation */
    ConditionOperation["GreaterThanOrEqual"] = "GREATER_THAN_OR_EQUAL";
    /** Is not null operation */
    ConditionOperation["IsNotNull"] = "IS_NOT_NULL";
    /** Is null operation */
    ConditionOperation["IsNull"] = "IS_NULL";
    /** Less than operation */
    ConditionOperation["LessThan"] = "LESS_THAN";
    /** Less than or equal operation */
    ConditionOperation["LessThanOrEqual"] = "LESS_THAN_OR_EQUAL";
    /** Not equals operation */
    ConditionOperation["NotEquals"] = "NOT_EQUALS";
})(ConditionOperation = exports.ConditionOperation || (exports.ConditionOperation = {}));
var CouponSortFields;
(function (CouponSortFields) {
    CouponSortFields["BillingId"] = "billingId";
    CouponSortFields["CreatedAt"] = "createdAt";
    CouponSortFields["Description"] = "description";
    CouponSortFields["EnvironmentId"] = "environmentId";
    CouponSortFields["Id"] = "id";
    CouponSortFields["Name"] = "name";
    CouponSortFields["RefId"] = "refId";
    CouponSortFields["Source"] = "source";
    CouponSortFields["Status"] = "status";
    CouponSortFields["Type"] = "type";
    CouponSortFields["UpdatedAt"] = "updatedAt";
})(CouponSortFields = exports.CouponSortFields || (exports.CouponSortFields = {}));
/** The source of the coupon */
var CouponSource;
(function (CouponSource) {
    /** Stigg */
    CouponSource["Stigg"] = "STIGG";
    /** Stigg adhoc */
    CouponSource["StiggAdhoc"] = "STIGG_ADHOC";
    /** Stripe */
    CouponSource["Stripe"] = "STRIPE";
})(CouponSource = exports.CouponSource || (exports.CouponSource = {}));
/** The status of the coupon */
var CouponStatus;
(function (CouponStatus) {
    /** Active */
    CouponStatus["Active"] = "ACTIVE";
    /** Archived */
    CouponStatus["Archived"] = "ARCHIVED";
})(CouponStatus = exports.CouponStatus || (exports.CouponStatus = {}));
/** The type of the coupon */
var CouponType;
(function (CouponType) {
    /** Fixed */
    CouponType["Fixed"] = "FIXED";
    /** Percentage */
    CouponType["Percentage"] = "PERCENTAGE";
})(CouponType = exports.CouponType || (exports.CouponType = {}));
/** The type of credit grant */
var CreditGrantType;
(function (CreditGrantType) {
    /** Paid credit grant */
    CreditGrantType["Paid"] = "PAID";
    /** Promotional credit grant */
    CreditGrantType["Promotional"] = "PROMOTIONAL";
})(CreditGrantType = exports.CreditGrantType || (exports.CreditGrantType = {}));
/** The type of the ledger event */
var CreditLedgerEventType;
(function (CreditLedgerEventType) {
    /** Credits consumed */
    CreditLedgerEventType["CreditsConsumed"] = "CREDITS_CONSUMED";
    /** Credits expired */
    CreditLedgerEventType["CreditsExpired"] = "CREDITS_EXPIRED";
    /** Credits granted */
    CreditLedgerEventType["CreditsGranted"] = "CREDITS_GRANTED";
})(CreditLedgerEventType = exports.CreditLedgerEventType || (exports.CreditLedgerEventType = {}));
/** Currency */
var Currency;
(function (Currency) {
    /** UAE Dirham */
    Currency["Aed"] = "AED";
    /** Lek */
    Currency["All"] = "ALL";
    /** Armenian Dram */
    Currency["Amd"] = "AMD";
    /** Netherlands Antillean Guilder */
    Currency["Ang"] = "ANG";
    /** Australian Dollar */
    Currency["Aud"] = "AUD";
    /** Aruban Florin */
    Currency["Awg"] = "AWG";
    /** Azerbaijanian Manat */
    Currency["Azn"] = "AZN";
    /** Convertible Mark */
    Currency["Bam"] = "BAM";
    /** Barbados Dollar */
    Currency["Bbd"] = "BBD";
    /** Taka */
    Currency["Bdt"] = "BDT";
    /** Bulgarian Lev */
    Currency["Bgn"] = "BGN";
    /** Burundi Franc */
    Currency["Bif"] = "BIF";
    /** Bermudian Dollar */
    Currency["Bmd"] = "BMD";
    /** Brunei Dollar */
    Currency["Bnd"] = "BND";
    /** Brazilian Real */
    Currency["Brl"] = "BRL";
    /** Bahamian Dollar */
    Currency["Bsd"] = "BSD";
    /** Pula */
    Currency["Bwp"] = "BWP";
    /** Belarusian Ruble */
    Currency["Byn"] = "BYN";
    /** Belize Dollar */
    Currency["Bzd"] = "BZD";
    /** Canadian Dollar */
    Currency["Cad"] = "CAD";
    /** Congolese Franc */
    Currency["Cdf"] = "CDF";
    /** Swiss Franc */
    Currency["Chf"] = "CHF";
    /** Chilean Peso */
    Currency["Clp"] = "CLP";
    /** Yuan Renminbi */
    Currency["Cny"] = "CNY";
    /** Czech Koruna */
    Currency["Czk"] = "CZK";
    /** Djibouti Franc */
    Currency["Djf"] = "DJF";
    /** Danish Krone */
    Currency["Dkk"] = "DKK";
    /** Dominican Peso */
    Currency["Dop"] = "DOP";
    /** Algerian Dinar */
    Currency["Dzd"] = "DZD";
    /** Egyptian Pound */
    Currency["Egp"] = "EGP";
    /** Ethiopian Birr */
    Currency["Etb"] = "ETB";
    /** Euro */
    Currency["Eur"] = "EUR";
    /** Fiji Dollar */
    Currency["Fjd"] = "FJD";
    /** Pound Sterling */
    Currency["Gbp"] = "GBP";
    /** Lari */
    Currency["Gel"] = "GEL";
    /** Gibraltar Pound */
    Currency["Gip"] = "GIP";
    /** Dalasi */
    Currency["Gmd"] = "GMD";
    /** Guinea Franc */
    Currency["Gnf"] = "GNF";
    /** Guyana Dollar */
    Currency["Gyd"] = "GYD";
    /** Hong Kong Dollar */
    Currency["Hkd"] = "HKD";
    /** Kuna */
    Currency["Hrk"] = "HRK";
    /** Gourde */
    Currency["Htg"] = "HTG";
    /** Rupiah */
    Currency["Idr"] = "IDR";
    /** New Israeli Sheqel */
    Currency["Ils"] = "ILS";
    /** Indian Rupee */
    Currency["Inr"] = "INR";
    /** Iceland Krona */
    Currency["Isk"] = "ISK";
    /** Jamaican Dollar */
    Currency["Jmd"] = "JMD";
    /** Yen */
    Currency["Jpy"] = "JPY";
    /** Kenyan Shilling */
    Currency["Kes"] = "KES";
    /** Som */
    Currency["Kgs"] = "KGS";
    /** Riel */
    Currency["Khr"] = "KHR";
    /** Comoro Franc */
    Currency["Kmf"] = "KMF";
    /** Won */
    Currency["Krw"] = "KRW";
    /** Cayman Islands Dollar */
    Currency["Kyd"] = "KYD";
    /** Tenge */
    Currency["Kzt"] = "KZT";
    /** Lebanese Pound */
    Currency["Lbp"] = "LBP";
    /** Sri Lanka Rupee */
    Currency["Lkr"] = "LKR";
    /** Liberian Dollar */
    Currency["Lrd"] = "LRD";
    /** Loti */
    Currency["Lsl"] = "LSL";
    /** Moroccan Dirham */
    Currency["Mad"] = "MAD";
    /** Moldovan Leu */
    Currency["Mdl"] = "MDL";
    /** Malagasy Ariary */
    Currency["Mga"] = "MGA";
    /** Denar */
    Currency["Mkd"] = "MKD";
    /** Kyat */
    Currency["Mmk"] = "MMK";
    /** Tugrik */
    Currency["Mnt"] = "MNT";
    /** Pataca */
    Currency["Mop"] = "MOP";
    /** Ouguiya */
    Currency["Mro"] = "MRO";
    /** Rufiyaa */
    Currency["Mvr"] = "MVR";
    /** Malawi Kwacha */
    Currency["Mwk"] = "MWK";
    /** Mexican Peso */
    Currency["Mxn"] = "MXN";
    /** Malaysian Ringgit */
    Currency["Myr"] = "MYR";
    /** Mozambique Metical */
    Currency["Mzn"] = "MZN";
    /** Namibia Dollar */
    Currency["Nad"] = "NAD";
    /** Naira */
    Currency["Ngn"] = "NGN";
    /** Norwegian Krone */
    Currency["Nok"] = "NOK";
    /** Nepalese Rupee */
    Currency["Npr"] = "NPR";
    /** New Zealand Dollar */
    Currency["Nzd"] = "NZD";
    /** Kina */
    Currency["Pgk"] = "PGK";
    /** Philippine Peso */
    Currency["Php"] = "PHP";
    /** Pakistan Rupee */
    Currency["Pkr"] = "PKR";
    /** Zloty */
    Currency["Pln"] = "PLN";
    /** Guarani */
    Currency["Pyg"] = "PYG";
    /** Qatari Rial */
    Currency["Qar"] = "QAR";
    /** Romanian Leu */
    Currency["Ron"] = "RON";
    /** Serbian Dinar */
    Currency["Rsd"] = "RSD";
    /** Russian Ruble */
    Currency["Rub"] = "RUB";
    /** Rwanda Franc */
    Currency["Rwf"] = "RWF";
    /** Saudi Riyal */
    Currency["Sar"] = "SAR";
    /** Solomon Islands Dollar */
    Currency["Sbd"] = "SBD";
    /** Seychelles Rupee */
    Currency["Scr"] = "SCR";
    /** Swedish Krona */
    Currency["Sek"] = "SEK";
    /** Singapore Dollar */
    Currency["Sgd"] = "SGD";
    /** Unknown or special currency code */
    Currency["Sle"] = "SLE";
    /** Leone */
    Currency["Sll"] = "SLL";
    /** Somali Shilling */
    Currency["Sos"] = "SOS";
    /** Lilangeni */
    Currency["Szl"] = "SZL";
    /** Baht */
    Currency["Thb"] = "THB";
    /** Somoni */
    Currency["Tjs"] = "TJS";
    /** Paanga */
    Currency["Top"] = "TOP";
    /** Turkish Lira */
    Currency["Try"] = "TRY";
    /** Trinidad and Tobago Dollar */
    Currency["Ttd"] = "TTD";
    /** Tanzanian Shilling */
    Currency["Tzs"] = "TZS";
    /** Hryvnia */
    Currency["Uah"] = "UAH";
    /** Uganda Shilling */
    Currency["Ugx"] = "UGX";
    /** US Dollar */
    Currency["Usd"] = "USD";
    /** Uzbekistan Sum */
    Currency["Uzs"] = "UZS";
    /** Dong */
    Currency["Vnd"] = "VND";
    /** Vatu */
    Currency["Vuv"] = "VUV";
    /** Tala */
    Currency["Wst"] = "WST";
    /** CFA Franc BEAC */
    Currency["Xaf"] = "XAF";
    /** East Caribbean Dollar */
    Currency["Xcd"] = "XCD";
    /** CFA Franc BCEAO */
    Currency["Xof"] = "XOF";
    /** CFP Franc */
    Currency["Xpf"] = "XPF";
    /** Yemeni Rial */
    Currency["Yer"] = "YER";
    /** Rand */
    Currency["Zar"] = "ZAR";
    /** Zambian Kwacha */
    Currency["Zmw"] = "ZMW";
})(Currency = exports.Currency || (exports.Currency = {}));
var CustomerResourceSortFields;
(function (CustomerResourceSortFields) {
    CustomerResourceSortFields["CreatedAt"] = "createdAt";
    CustomerResourceSortFields["EnvironmentId"] = "environmentId";
    CustomerResourceSortFields["ResourceId"] = "resourceId";
})(CustomerResourceSortFields = exports.CustomerResourceSortFields || (exports.CustomerResourceSortFields = {}));
var CustomerSortFields;
(function (CustomerSortFields) {
    CustomerSortFields["BillingId"] = "billingId";
    CustomerSortFields["CreatedAt"] = "createdAt";
    CustomerSortFields["CrmHubspotCompanyId"] = "crmHubspotCompanyId";
    CustomerSortFields["CrmHubspotCompanyUrl"] = "crmHubspotCompanyUrl";
    CustomerSortFields["CrmId"] = "crmId";
    CustomerSortFields["CustomerId"] = "customerId";
    CustomerSortFields["DeletedAt"] = "deletedAt";
    CustomerSortFields["Email"] = "email";
    CustomerSortFields["EnvironmentId"] = "environmentId";
    CustomerSortFields["Id"] = "id";
    CustomerSortFields["Name"] = "name";
    CustomerSortFields["RefId"] = "refId";
    CustomerSortFields["SalesforceId"] = "salesforceId";
    CustomerSortFields["SearchQuery"] = "searchQuery";
    CustomerSortFields["UpdatedAt"] = "updatedAt";
})(CustomerSortFields = exports.CustomerSortFields || (exports.CustomerSortFields = {}));
var CustomerSubscriptionSortFields;
(function (CustomerSubscriptionSortFields) {
    CustomerSubscriptionSortFields["BillingCycleAnchor"] = "billingCycleAnchor";
    CustomerSubscriptionSortFields["BillingId"] = "billingId";
    CustomerSubscriptionSortFields["CancelReason"] = "cancelReason";
    CustomerSubscriptionSortFields["CancellationDate"] = "cancellationDate";
    CustomerSubscriptionSortFields["CreatedAt"] = "createdAt";
    CustomerSubscriptionSortFields["CrmId"] = "crmId";
    CustomerSubscriptionSortFields["CrmLinkUrl"] = "crmLinkUrl";
    CustomerSubscriptionSortFields["CurrentBillingPeriodEnd"] = "currentBillingPeriodEnd";
    CustomerSubscriptionSortFields["CurrentBillingPeriodStart"] = "currentBillingPeriodStart";
    CustomerSubscriptionSortFields["CustomerId"] = "customerId";
    CustomerSubscriptionSortFields["EffectiveEndDate"] = "effectiveEndDate";
    CustomerSubscriptionSortFields["EndDate"] = "endDate";
    CustomerSubscriptionSortFields["EnvironmentId"] = "environmentId";
    CustomerSubscriptionSortFields["Id"] = "id";
    CustomerSubscriptionSortFields["OldBillingId"] = "oldBillingId";
    CustomerSubscriptionSortFields["PayingCustomerId"] = "payingCustomerId";
    CustomerSubscriptionSortFields["PaymentCollection"] = "paymentCollection";
    CustomerSubscriptionSortFields["PricingType"] = "pricingType";
    CustomerSubscriptionSortFields["RefId"] = "refId";
    CustomerSubscriptionSortFields["ResourceId"] = "resourceId";
    CustomerSubscriptionSortFields["SalesforceId"] = "salesforceId";
    CustomerSubscriptionSortFields["StartDate"] = "startDate";
    CustomerSubscriptionSortFields["Status"] = "status";
    CustomerSubscriptionSortFields["SubscriptionId"] = "subscriptionId";
    CustomerSubscriptionSortFields["TrialEndDate"] = "trialEndDate";
})(CustomerSubscriptionSortFields = exports.CustomerSubscriptionSortFields || (exports.CustomerSubscriptionSortFields = {}));
/** The department the user belongs to */
var Department;
(function (Department) {
    /** CEO or Founder */
    Department["CeoOrFounder"] = "CEO_OR_FOUNDER";
    /** Engineering */
    Department["Engineering"] = "ENGINEERING";
    /** Growth */
    Department["Growth"] = "GROWTH";
    /** Marketing */
    Department["Marketing"] = "MARKETING";
    /** Monetization */
    Department["Monetization"] = "MONETIZATION";
    /** Other */
    Department["Other"] = "OTHER";
    /** Product */
    Department["Product"] = "PRODUCT";
})(Department = exports.Department || (exports.Department = {}));
/** The type of the discount duration */
var DiscountDurationType;
(function (DiscountDurationType) {
    DiscountDurationType["Forever"] = "FOREVER";
    DiscountDurationType["Once"] = "ONCE";
    DiscountDurationType["Repeating"] = "REPEATING";
})(DiscountDurationType = exports.DiscountDurationType || (exports.DiscountDurationType = {}));
/** The type of the discount */
var DiscountType;
(function (DiscountType) {
    DiscountType["Fixed"] = "FIXED";
    DiscountType["Percentage"] = "PERCENTAGE";
})(DiscountType = exports.DiscountType || (exports.DiscountType = {}));
/** The behavior of the entitlement */
var EntitlementBehavior;
(function (EntitlementBehavior) {
    /** Increment the value of the entitlement */
    EntitlementBehavior["Increment"] = "Increment";
    /** Override the value of the entitlement */
    EntitlementBehavior["Override"] = "Override";
})(EntitlementBehavior = exports.EntitlementBehavior || (exports.EntitlementBehavior = {}));
/** Entitlement reset period */
var EntitlementResetPeriod;
(function (EntitlementResetPeriod) {
    /** Day */
    EntitlementResetPeriod["Day"] = "DAY";
    /** Hour */
    EntitlementResetPeriod["Hour"] = "HOUR";
    /** Month */
    EntitlementResetPeriod["Month"] = "MONTH";
    /** Week */
    EntitlementResetPeriod["Week"] = "WEEK";
    /** Year */
    EntitlementResetPeriod["Year"] = "YEAR";
})(EntitlementResetPeriod = exports.EntitlementResetPeriod || (exports.EntitlementResetPeriod = {}));
/** Mode for selecting which entities to import */
var EntitySelectionMode;
(function (EntitySelectionMode) {
    /** Exclude specified entities from import */
    EntitySelectionMode["BlackList"] = "BLACK_LIST";
    /** Only import specified entities */
    EntitySelectionMode["WhiteList"] = "WHITE_LIST";
})(EntitySelectionMode = exports.EntitySelectionMode || (exports.EntitySelectionMode = {}));
/** Environment access role of the user */
var EnvironmentAccessRole;
(function (EnvironmentAccessRole) {
    /** User has administrative access to the environment */
    EnvironmentAccessRole["Admin"] = "ADMIN";
    /** User has no access to the environment */
    EnvironmentAccessRole["None"] = "NONE";
    /** User has support-level access to the environment to manage customers and subscriptions */
    EnvironmentAccessRole["Support"] = "SUPPORT";
    /** User has read-only access to the environment */
    EnvironmentAccessRole["Viewer"] = "VIEWER";
})(EnvironmentAccessRole = exports.EnvironmentAccessRole || (exports.EnvironmentAccessRole = {}));
/** Represents the provisioning status of an environment */
var EnvironmentProvisionStatus;
(function (EnvironmentProvisionStatus) {
    /** The environment has been successfully provisioned */
    EnvironmentProvisionStatus["Done"] = "DONE";
    /** The environment provisioning process has failed */
    EnvironmentProvisionStatus["Failed"] = "FAILED";
    /** The environment provisioning process is currently in progress */
    EnvironmentProvisionStatus["InProgress"] = "IN_PROGRESS";
    /** The environment has not yet started the provisioning process */
    EnvironmentProvisionStatus["NotProvisioned"] = "NOT_PROVISIONED";
})(EnvironmentProvisionStatus = exports.EnvironmentProvisionStatus || (exports.EnvironmentProvisionStatus = {}));
var EnvironmentSortFields;
(function (EnvironmentSortFields) {
    EnvironmentSortFields["CreatedAt"] = "createdAt";
    EnvironmentSortFields["DisplayName"] = "displayName";
    EnvironmentSortFields["Id"] = "id";
    EnvironmentSortFields["PermanentDeletionDate"] = "permanentDeletionDate";
    EnvironmentSortFields["Slug"] = "slug";
})(EnvironmentSortFields = exports.EnvironmentSortFields || (exports.EnvironmentSortFields = {}));
/** EnvironmentType */
var EnvironmentType;
(function (EnvironmentType) {
    /** Development environment, used for testing and development purposes */
    EnvironmentType["Development"] = "DEVELOPMENT";
    /** Production environment, used for live applications and services */
    EnvironmentType["Production"] = "PRODUCTION";
    /** Sandbox environment, used for isolated testing and experimentation */
    EnvironmentType["Sandbox"] = "SANDBOX";
})(EnvironmentType = exports.EnvironmentType || (exports.EnvironmentType = {}));
/** error codes */
var ErrorCode;
(function (ErrorCode) {
    ErrorCode["AccessDeniedError"] = "AccessDeniedError";
    ErrorCode["AccountNotFoundError"] = "AccountNotFoundError";
    /** Addon dependency missing error */
    ErrorCode["AddonDependencyMissingError"] = "AddonDependencyMissingError";
    ErrorCode["AddonHasToHavePriceError"] = "AddonHasToHavePriceError";
    /** Cannot delete an addon that is compatible with an addon group */
    ErrorCode["AddonIsCompatibleWithGroup"] = "AddonIsCompatibleWithGroup";
    /** Cannot delete an addon that is compatible with a plan */
    ErrorCode["AddonIsCompatibleWithPlan"] = "AddonIsCompatibleWithPlan";
    ErrorCode["AddonNotFound"] = "AddonNotFound";
    /** Addon quantity exceeds limit error */
    ErrorCode["AddonQuantityExceedsLimitError"] = "AddonQuantityExceedsLimitError";
    ErrorCode["AddonWithDraftCannotBeDeletedError"] = "AddonWithDraftCannotBeDeletedError";
    /** Multiple addons not found */
    ErrorCode["AddonsNotFound"] = "AddonsNotFound";
    ErrorCode["AmountTooLarge"] = "AmountTooLarge";
    ErrorCode["ArchivedCouponCantBeApplied"] = "ArchivedCouponCantBeApplied";
    /** The authenticated customer does not match the customer in the request */
    ErrorCode["AuthCustomerMismatch"] = "AuthCustomerMismatch";
    /** The authenticated customer has read-only permissions and cannot perform this operation */
    ErrorCode["AuthCustomerReadonly"] = "AuthCustomerReadonly";
    ErrorCode["AwsMarketplaceIntegrationError"] = "AwsMarketplaceIntegrationError";
    ErrorCode["AwsMarketplaceIntegrationValidationError"] = "AwsMarketplaceIntegrationValidationError";
    ErrorCode["BadUserInput"] = "BadUserInput";
    ErrorCode["BillingIntegrationAlreadyExistsError"] = "BillingIntegrationAlreadyExistsError";
    ErrorCode["BillingIntegrationMissing"] = "BillingIntegrationMissing";
    ErrorCode["BillingPeriodMissingError"] = "BillingPeriodMissingError";
    /** Cannot update entitlement feature group */
    ErrorCode["CanNotUpdateEntitlementsFeatureGroup"] = "CanNotUpdateEntitlementsFeatureGroup";
    /** Cannot add override entitlement to a plan */
    ErrorCode["CannotAddOverrideEntitlementToPlan"] = "CannotAddOverrideEntitlementToPlan";
    ErrorCode["CannotArchiveFeatureError"] = "CannotArchiveFeatureError";
    ErrorCode["CannotArchiveFeatureGroupError"] = "CannotArchiveFeatureGroupError";
    /** Cannot change billing integration at current customer state */
    ErrorCode["CannotChangeBillingIntegration"] = "CannotChangeBillingIntegration";
    ErrorCode["CannotDeleteCustomerError"] = "CannotDeleteCustomerError";
    /** Deleting the default integration is not allowed */
    ErrorCode["CannotDeleteDefaultIntegration"] = "CannotDeleteDefaultIntegration";
    ErrorCode["CannotDeleteFeatureError"] = "CannotDeleteFeatureError";
    ErrorCode["CannotDeleteProductError"] = "CannotDeleteProductError";
    ErrorCode["CannotEditPackageInNonDraftMode"] = "CannotEditPackageInNonDraftMode";
    ErrorCode["CannotRemovePaymentMethodFromCustomerError"] = "CannotRemovePaymentMethodFromCustomerError";
    ErrorCode["CannotReportUsageForEntitlementWithMeterError"] = "CannotReportUsageForEntitlementWithMeterError";
    /** Cannot update expireAt for an expired credit grant */
    ErrorCode["CannotUpdateExpireAtForExpiredCreditGrantError"] = "CannotUpdateExpireAtForExpiredCreditGrantError";
    /** Can not update unit transformation since this feature has connected active subscriptions */
    ErrorCode["CannotUpdateUnitTransformationError"] = "CannotUpdateUnitTransformationError";
    ErrorCode["CannotUpsertToPackageThatHasDraft"] = "CannotUpsertToPackageThatHasDraft";
    /** Changing paying customer is not supported */
    ErrorCode["ChangingPayingCustomerIsNotSupportedError"] = "ChangingPayingCustomerIsNotSupportedError";
    ErrorCode["CheckoutIsNotSupported"] = "CheckoutIsNotSupported";
    ErrorCode["CouponNotFound"] = "CouponNotFound";
    /** Credit grant not found */
    ErrorCode["CreditGrantNotFound"] = "CreditGrantNotFound";
    /** Custom currency not found */
    ErrorCode["CustomCurrencyNotFound"] = "CustomCurrencyNotFound";
    ErrorCode["CustomerAlreadyHaveCustomerCoupon"] = "CustomerAlreadyHaveCustomerCoupon";
    ErrorCode["CustomerAlreadyUsesCoupon"] = "CustomerAlreadyUsesCoupon";
    ErrorCode["CustomerHasNoEmailAddress"] = "CustomerHasNoEmailAddress";
    ErrorCode["CustomerNoBillingId"] = "CustomerNoBillingId";
    ErrorCode["CustomerNotFound"] = "CustomerNotFound";
    ErrorCode["CustomerResourceNotFound"] = "CustomerResourceNotFound";
    /** Deprecated estimate subscription error */
    ErrorCode["DeprecatedEstimateSubscriptionError"] = "DeprecatedEstimateSubscriptionError";
    ErrorCode["DowngradeBillingPeriodNotSupportedError"] = "DowngradeBillingPeriodNotSupportedError";
    /** Draft addon cannot be archived */
    ErrorCode["DraftAddonCantBeArchived"] = "DraftAddonCantBeArchived";
    ErrorCode["DraftPlanCantBeArchived"] = "DraftPlanCantBeArchived";
    /** Duplicate addons provisioned error */
    ErrorCode["DuplicateAddonProvisionedError"] = "DuplicateAddonProvisionedError";
    /** Duplicate integration for same non billing vendor identifier not allowed */
    ErrorCode["DuplicateIntegrationNotAllowed"] = "DuplicateIntegrationNotAllowed";
    ErrorCode["DuplicateProductValidationError"] = "DuplicateProductValidationError";
    ErrorCode["DuplicatedEntityNotAllowed"] = "DuplicatedEntityNotAllowed";
    ErrorCode["EditAllowedOnDraftPackageOnlyError"] = "EditAllowedOnDraftPackageOnlyError";
    /** Entitlement belongs to feature groups and cannot be deleted */
    ErrorCode["EntitlementBelongsToFeatureGroupError"] = "EntitlementBelongsToFeatureGroupError";
    ErrorCode["EntitlementLimitExceededError"] = "EntitlementLimitExceededError";
    ErrorCode["EntitlementUsageOutOfRangeError"] = "EntitlementUsageOutOfRangeError";
    ErrorCode["EntitlementsMustBelongToSamePackage"] = "EntitlementsMustBelongToSamePackage";
    ErrorCode["EntityIdDifferentFromRefIdError"] = "EntityIdDifferentFromRefIdError";
    ErrorCode["EntityIsArchivedError"] = "EntityIsArchivedError";
    ErrorCode["EnvironmentMissing"] = "EnvironmentMissing";
    ErrorCode["ExperimentAlreadyRunning"] = "ExperimentAlreadyRunning";
    ErrorCode["ExperimentNotFoundError"] = "ExperimentNotFoundError";
    ErrorCode["ExperimentStatusError"] = "ExperimentStatusError";
    /** field expireAt must be later than effectiveAt for credit grants */
    ErrorCode["ExpireAtMustBeLaterThanEffectiveAtError"] = "ExpireAtMustBeLaterThanEffectiveAtError";
    ErrorCode["FailedToCreateCheckoutSessionError"] = "FailedToCreateCheckoutSessionError";
    ErrorCode["FailedToImportCustomer"] = "FailedToImportCustomer";
    /** Failed to import subscriptions */
    ErrorCode["FailedToImportSubscriptions"] = "FailedToImportSubscriptions";
    /** Failed to resolve billing integration */
    ErrorCode["FailedToResolveBillingIntegration"] = "FailedToResolveBillingIntegration";
    ErrorCode["FeatureConfigurationExceededLimitError"] = "FeatureConfigurationExceededLimitError";
    /** Feature group is missing required features */
    ErrorCode["FeatureGroupMissingFeaturesError"] = "FeatureGroupMissingFeaturesError";
    ErrorCode["FeatureGroupNotFoundError"] = "FeatureGroupNotFoundError";
    /** Feature does not belong to the specified feature group */
    ErrorCode["FeatureNotBelongToFeatureGroupError"] = "FeatureNotBelongToFeatureGroupError";
    ErrorCode["FeatureNotFound"] = "FeatureNotFound";
    ErrorCode["FetchAllCountriesPricesNotAllowed"] = "FetchAllCountriesPricesNotAllowed";
    /** Free plan can't have compatible package groups error */
    ErrorCode["FreePlanCantHaveCompatiblePackageGroupError"] = "FreePlanCantHaveCompatiblePackageGroupError";
    /** Too many graphql aliases were used in a single request */
    ErrorCode["GraphQlAliasesLimitExceeded"] = "GraphQLAliasesLimitExceeded";
    /** Too many batched operations were used in a single request */
    ErrorCode["GraphQlBatchedOperationsLimitExceeded"] = "GraphQLBatchedOperationsLimitExceeded";
    /** Unsupported directive */
    ErrorCode["GraphQlUnsupportedDirective"] = "GraphQLUnsupportedDirective";
    ErrorCode["HubspotIntegrationError"] = "HubspotIntegrationError";
    ErrorCode["IdentityForbidden"] = "IdentityForbidden";
    ErrorCode["ImportAlreadyInProgress"] = "ImportAlreadyInProgress";
    ErrorCode["ImportSubscriptionsBulkError"] = "ImportSubscriptionsBulkError";
    ErrorCode["IncompatibleSubscriptionAddon"] = "IncompatibleSubscriptionAddon";
    ErrorCode["InitStripePaymentMethodError"] = "InitStripePaymentMethodError";
    ErrorCode["IntegrationNotFound"] = "IntegrationNotFound";
    ErrorCode["IntegrationValidationError"] = "IntegrationValidationError";
    ErrorCode["IntegrityViolation"] = "IntegrityViolation";
    ErrorCode["InvalidAddressError"] = "InvalidAddressError";
    ErrorCode["InvalidArgumentError"] = "InvalidArgumentError";
    ErrorCode["InvalidCancellationDate"] = "InvalidCancellationDate";
    ErrorCode["InvalidDoggoSignatureError"] = "InvalidDoggoSignatureError";
    ErrorCode["InvalidEntitlementResetPeriod"] = "InvalidEntitlementResetPeriod";
    ErrorCode["InvalidMemberDelete"] = "InvalidMemberDelete";
    ErrorCode["InvalidMetadataError"] = "InvalidMetadataError";
    ErrorCode["InvalidQuantity"] = "InvalidQuantity";
    ErrorCode["InvalidSubscriptionStatus"] = "InvalidSubscriptionStatus";
    ErrorCode["InvalidUpdatePriceUnitAmountError"] = "InvalidUpdatePriceUnitAmountError";
    ErrorCode["MemberInvitationError"] = "MemberInvitationError";
    ErrorCode["MemberNotFound"] = "MemberNotFound";
    ErrorCode["MergeEnvironmentValidationError"] = "MergeEnvironmentValidationError";
    ErrorCode["MeterMustBeAssociatedToMeteredFeature"] = "MeterMustBeAssociatedToMeteredFeature";
    ErrorCode["MeteringNotAvailableForFeatureType"] = "MeteringNotAvailableForFeatureType";
    ErrorCode["MissingEntityIdError"] = "MissingEntityIdError";
    ErrorCode["MissingSubscriptionInvoiceError"] = "MissingSubscriptionInvoiceError";
    /** Multi subscription product cannot be a source of auto-cancellation rules */
    ErrorCode["MultiSubscriptionCantBeAutoCancellationSourceError"] = "MultiSubscriptionCantBeAutoCancellationSourceError";
    /** This account has no access to the requested feature */
    ErrorCode["NoFeatureEntitlementError"] = "NoFeatureEntitlementError";
    ErrorCode["NoFeatureEntitlementInSubscription"] = "NoFeatureEntitlementInSubscription";
    ErrorCode["NoProductsAvailable"] = "NoProductsAvailable";
    ErrorCode["OperationNotAllowedDuringInProgressExperiment"] = "OperationNotAllowedDuringInProgressExperiment";
    ErrorCode["PackageAlreadyPublished"] = "PackageAlreadyPublished";
    /** Package group min items error */
    ErrorCode["PackageGroupMinItemsError"] = "PackageGroupMinItemsError";
    ErrorCode["PackageGroupNotFound"] = "PackageGroupNotFound";
    ErrorCode["PackagePricingTypeNotSet"] = "PackagePricingTypeNotSet";
    ErrorCode["PaymentMethodNotFoundError"] = "PaymentMethodNotFoundError";
    ErrorCode["PlanCannotBePublishWhenBasePlanIsDraft"] = "PlanCannotBePublishWhenBasePlanIsDraft";
    ErrorCode["PlanCannotBePublishWhenCompatibleAddonIsDraft"] = "PlanCannotBePublishWhenCompatibleAddonIsDraft";
    ErrorCode["PlanIsUsedAsDefaultStartPlan"] = "PlanIsUsedAsDefaultStartPlan";
    ErrorCode["PlanIsUsedAsDowngradePlan"] = "PlanIsUsedAsDowngradePlan";
    ErrorCode["PlanNotFound"] = "PlanNotFound";
    ErrorCode["PlanWithChildCantBeDeleted"] = "PlanWithChildCantBeDeleted";
    ErrorCode["PlansCircularDependencyError"] = "PlansCircularDependencyError";
    ErrorCode["PreparePaymentMethodFormError"] = "PreparePaymentMethodFormError";
    ErrorCode["PriceNotFound"] = "PriceNotFound";
    ErrorCode["ProductNotFoundError"] = "ProductNotFoundError";
    ErrorCode["PromotionCodeCustomerNotFirstPurchase"] = "PromotionCodeCustomerNotFirstPurchase";
    ErrorCode["PromotionCodeMaxRedemptionsReached"] = "PromotionCodeMaxRedemptionsReached";
    ErrorCode["PromotionCodeMinimumAmountNotReached"] = "PromotionCodeMinimumAmountNotReached";
    ErrorCode["PromotionCodeNotActive"] = "PromotionCodeNotActive";
    ErrorCode["PromotionCodeNotForCustomer"] = "PromotionCodeNotForCustomer";
    ErrorCode["PromotionCodeNotFound"] = "PromotionCodeNotFound";
    ErrorCode["PromotionalEntitlementNotFoundError"] = "PromotionalEntitlementNotFoundError";
    ErrorCode["RateLimitExceeded"] = "RateLimitExceeded";
    ErrorCode["RecalculateEntitlementsError"] = "RecalculateEntitlementsError";
    ErrorCode["RequiredSsoAuthenticationError"] = "RequiredSsoAuthenticationError";
    ErrorCode["ResyncAlreadyInProgress"] = "ResyncAlreadyInProgress";
    ErrorCode["ScheduledMigrationAlreadyExistsError"] = "ScheduledMigrationAlreadyExistsError";
    ErrorCode["SelectedBillingModelDoesntMatchImportedItemError"] = "SelectedBillingModelDoesntMatchImportedItemError";
    /** Single subscription product cannot be a target of auto-cancellation rules */
    ErrorCode["SingleSubscriptionCantBeAutoCancellationTargetError"] = "SingleSubscriptionCantBeAutoCancellationTargetError";
    ErrorCode["StripeCustomerIsDeleted"] = "StripeCustomerIsDeleted";
    ErrorCode["StripeError"] = "StripeError";
    ErrorCode["SubscriptionAlreadyCanceledOrExpired"] = "SubscriptionAlreadyCanceledOrExpired";
    ErrorCode["SubscriptionAlreadyOnLatestPlanError"] = "SubscriptionAlreadyOnLatestPlanError";
    ErrorCode["SubscriptionDoesNotHaveBillingPeriod"] = "SubscriptionDoesNotHaveBillingPeriod";
    ErrorCode["SubscriptionInvoiceStatusError"] = "SubscriptionInvoiceStatusError";
    ErrorCode["SubscriptionMustHaveSinglePlanError"] = "SubscriptionMustHaveSinglePlanError";
    ErrorCode["SubscriptionNoBillingId"] = "SubscriptionNoBillingId";
    ErrorCode["SubscriptionNotFound"] = "SubscriptionNotFound";
    /** Too many custom currencies */
    ErrorCode["TooManyCustomCurrencies"] = "TooManyCustomCurrencies";
    ErrorCode["TooManySubscriptionsPerCustomer"] = "TooManySubscriptionsPerCustomer";
    ErrorCode["TrialMustBeCancelledImmediately"] = "TrialMustBeCancelledImmediately";
    ErrorCode["UnPublishedPackage"] = "UnPublishedPackage";
    ErrorCode["Unauthenticated"] = "Unauthenticated";
    ErrorCode["UnexpectedError"] = "UnexpectedError";
    ErrorCode["UnsupportedFeatureType"] = "UnsupportedFeatureType";
    /** Unsupported parameter */
    ErrorCode["UnsupportedParameter"] = "UnsupportedParameter";
    ErrorCode["UnsupportedSubscriptionScheduleType"] = "UnsupportedSubscriptionScheduleType";
    ErrorCode["UnsupportedVendorIdentifier"] = "UnsupportedVendorIdentifier";
    ErrorCode["UsageMeasurementDiffOutOfRangeError"] = "UsageMeasurementDiffOutOfRangeError";
    ErrorCode["VersionExceedsMaxValueError"] = "VersionExceedsMaxValueError";
    /** Workflow trigger not found */
    ErrorCode["WorkflowTriggerNotFound"] = "WorkflowTriggerNotFound";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
/** Event actor type */
var EventActor;
(function (EventActor) {
    /** Client SDK with hardened authentication */
    EventActor["AppCustomer"] = "APP_CUSTOMER";
    /** Client SDK */
    EventActor["AppPublic"] = "APP_PUBLIC";
    /** Backend SDK */
    EventActor["AppServer"] = "APP_SERVER";
    /** AWS triggered event */
    EventActor["Aws"] = "AWS";
    /** Import triggered event */
    EventActor["Import"] = "IMPORT";
    /** Migration triggered event */
    EventActor["Migration"] = "MIGRATION";
    /** Salesforce API key */
    EventActor["Salesforce"] = "SALESFORCE";
    /** Stigg scheduler */
    EventActor["Scheduler"] = "SCHEDULER";
    /** Stigg user service key */
    EventActor["Service"] = "SERVICE";
    /** Stripe triggered event */
    EventActor["Stripe"] = "STRIPE";
    /** Stigg customer support */
    EventActor["Support"] = "SUPPORT";
    /** Stigg internal system */
    EventActor["System"] = "SYSTEM";
    /** Web application user */
    EventActor["User"] = "USER";
    /** Workflow triggered event */
    EventActor["Workflow"] = "WORKFLOW";
})(EventActor = exports.EventActor || (exports.EventActor = {}));
/** Event entity type */
var EventEntityType;
(function (EventEntityType) {
    /** Add-on entity */
    EventEntityType["Addon"] = "ADDON";
    /** Coupon entity */
    EventEntityType["Coupon"] = "COUPON";
    /** Customer entity */
    EventEntityType["Customer"] = "CUSTOMER";
    /** Entitlement entity */
    EventEntityType["Entitlement"] = "ENTITLEMENT";
    /** Feature entity */
    EventEntityType["Feature"] = "FEATURE";
    /** Feature Group Entity */
    EventEntityType["FeatureGroup"] = "FEATURE_GROUP";
    /** Import entity */
    EventEntityType["Import"] = "IMPORT";
    /** Measurement entity */
    EventEntityType["Measurement"] = "MEASUREMENT";
    /** Package entity */
    EventEntityType["Package"] = "PACKAGE";
    /** Package group entity */
    EventEntityType["PackageGroup"] = "PACKAGE_GROUP";
    /** Plan entity */
    EventEntityType["Plan"] = "PLAN";
    /** Product entity */
    EventEntityType["Product"] = "PRODUCT";
    /** Promotional entitlement entity */
    EventEntityType["PromotionalEntitlement"] = "PROMOTIONAL_ENTITLEMENT";
    /** Subscription entity */
    EventEntityType["Subscription"] = "SUBSCRIPTION";
})(EventEntityType = exports.EventEntityType || (exports.EventEntityType = {}));
var EventLogSortFields;
(function (EventLogSortFields) {
    EventLogSortFields["CreatedAt"] = "createdAt";
    EventLogSortFields["EntityId"] = "entityId";
    EventLogSortFields["EnvironmentId"] = "environmentId";
    EventLogSortFields["EventLogType"] = "eventLogType";
    EventLogSortFields["Id"] = "id";
    EventLogSortFields["ParentEntityId"] = "parentEntityId";
})(EventLogSortFields = exports.EventLogSortFields || (exports.EventLogSortFields = {}));
/** Event log type */
var EventLogType;
(function (EventLogType) {
    /** Addon created */
    EventLogType["AddonCreated"] = "ADDON_CREATED";
    /** Addon deleted */
    EventLogType["AddonDeleted"] = "ADDON_DELETED";
    /** Addon updated */
    EventLogType["AddonUpdated"] = "ADDON_UPDATED";
    /** Coupon archived */
    EventLogType["CouponArchived"] = "COUPON_ARCHIVED";
    /** Coupon created */
    EventLogType["CouponCreated"] = "COUPON_CREATED";
    /** Coupon updated */
    EventLogType["CouponUpdated"] = "COUPON_UPDATED";
    /** Create subscription failed */
    EventLogType["CreateSubscriptionFailed"] = "CREATE_SUBSCRIPTION_FAILED";
    /** Credits expired */
    EventLogType["CreditsExpired"] = "CREDITS_EXPIRED";
    /** Credits granted */
    EventLogType["CreditsGranted"] = "CREDITS_GRANTED";
    /** Customer created */
    EventLogType["CustomerCreated"] = "CUSTOMER_CREATED";
    /** Customer deleted */
    EventLogType["CustomerDeleted"] = "CUSTOMER_DELETED";
    /** Customer entitlement calculation triggered */
    EventLogType["CustomerEntitlementCalculationTriggered"] = "CUSTOMER_ENTITLEMENT_CALCULATION_TRIGGERED";
    /** Customer payment failed */
    EventLogType["CustomerPaymentFailed"] = "CUSTOMER_PAYMENT_FAILED";
    /** Customer resource entitlement calculation triggered */
    EventLogType["CustomerResourceEntitlementCalculationTriggered"] = "CUSTOMER_RESOURCE_ENTITLEMENT_CALCULATION_TRIGGERED";
    /** Customer updated */
    EventLogType["CustomerUpdated"] = "CUSTOMER_UPDATED";
    /** Edge API customer data resync */
    EventLogType["EdgeApiCustomerDataResync"] = "EDGE_API_CUSTOMER_DATA_RESYNC";
    /** Edge API data resync */
    EventLogType["EdgeApiDataResync"] = "EDGE_API_DATA_RESYNC";
    /** Edge API Doggo resync */
    EventLogType["EdgeApiDoggoResync"] = "EDGE_API_DOGGO_RESYNC";
    /** Edge API package entitlements data resync */
    EventLogType["EdgeApiPackageEntitlementsDataResync"] = "EDGE_API_PACKAGE_ENTITLEMENTS_DATA_RESYNC";
    /** Edge API subscriptions data resync */
    EventLogType["EdgeApiSubscriptionsDataResync"] = "EDGE_API_SUBSCRIPTIONS_DATA_RESYNC";
    /** Entitlements updated */
    EventLogType["EntitlementsUpdated"] = "ENTITLEMENTS_UPDATED";
    /** Entitlement denied */
    EventLogType["EntitlementDenied"] = "ENTITLEMENT_DENIED";
    /** Entitlement granted */
    EventLogType["EntitlementGranted"] = "ENTITLEMENT_GRANTED";
    /** Entitlement requested */
    EventLogType["EntitlementRequested"] = "ENTITLEMENT_REQUESTED";
    /** Entitlement usage exceeded */
    EventLogType["EntitlementUsageExceeded"] = "ENTITLEMENT_USAGE_EXCEEDED";
    /** Environment deleted */
    EventLogType["EnvironmentDeleted"] = "ENVIRONMENT_DELETED";
    /** Feature archived */
    EventLogType["FeatureArchived"] = "FEATURE_ARCHIVED";
    /** Feature created */
    EventLogType["FeatureCreated"] = "FEATURE_CREATED";
    /** Feature deleted */
    EventLogType["FeatureDeleted"] = "FEATURE_DELETED";
    /** Feature group archived */
    EventLogType["FeatureGroupArchived"] = "FEATURE_GROUP_ARCHIVED";
    /** Feature group created */
    EventLogType["FeatureGroupCreated"] = "FEATURE_GROUP_CREATED";
    /** Feature group un-archived */
    EventLogType["FeatureGroupUnArchived"] = "FEATURE_GROUP_UN_ARCHIVED";
    /** Feature group updated */
    EventLogType["FeatureGroupUpdated"] = "FEATURE_GROUP_UPDATED";
    /** Feature updated */
    EventLogType["FeatureUpdated"] = "FEATURE_UPDATED";
    /** Import integration catalog triggered */
    EventLogType["ImportIntegrationCatalogTriggered"] = "IMPORT_INTEGRATION_CATALOG_TRIGGERED";
    /** Import integration customers triggered */
    EventLogType["ImportIntegrationCustomersTriggered"] = "IMPORT_INTEGRATION_CUSTOMERS_TRIGGERED";
    /** Import subscriptions bulk triggered */
    EventLogType["ImportSubscriptionsBulkTriggered"] = "IMPORT_SUBSCRIPTIONS_BULK_TRIGGERED";
    /** Measurement reported */
    EventLogType["MeasurementReported"] = "MEASUREMENT_REPORTED";
    /** Package group created */
    EventLogType["PackageGroupCreated"] = "PACKAGE_GROUP_CREATED";
    /** Package group updated */
    EventLogType["PackageGroupUpdated"] = "PACKAGE_GROUP_UPDATED";
    /** Package published */
    EventLogType["PackagePublished"] = "PACKAGE_PUBLISHED";
    /** Plan created */
    EventLogType["PlanCreated"] = "PLAN_CREATED";
    /** Plan deleted */
    EventLogType["PlanDeleted"] = "PLAN_DELETED";
    /** Plan updated */
    EventLogType["PlanUpdated"] = "PLAN_UPDATED";
    /** Product created */
    EventLogType["ProductCreated"] = "PRODUCT_CREATED";
    /** Product deleted */
    EventLogType["ProductDeleted"] = "PRODUCT_DELETED";
    /** Product updated */
    EventLogType["ProductUpdated"] = "PRODUCT_UPDATED";
    /** Promotional entitlement expired */
    EventLogType["PromotionalEntitlementExpired"] = "PROMOTIONAL_ENTITLEMENT_EXPIRED";
    /** Promotional entitlement granted */
    EventLogType["PromotionalEntitlementGranted"] = "PROMOTIONAL_ENTITLEMENT_GRANTED";
    /** Promotional entitlement revoked */
    EventLogType["PromotionalEntitlementRevoked"] = "PROMOTIONAL_ENTITLEMENT_REVOKED";
    /** Promotional entitlement updated */
    EventLogType["PromotionalEntitlementUpdated"] = "PROMOTIONAL_ENTITLEMENT_UPDATED";
    /** Recalculate entitlements triggered */
    EventLogType["RecalculateEntitlementsTriggered"] = "RECALCULATE_ENTITLEMENTS_TRIGGERED";
    /** Resync integration triggered */
    EventLogType["ResyncIntegrationTriggered"] = "RESYNC_INTEGRATION_TRIGGERED";
    /** Subscriptions migrated */
    EventLogType["SubscriptionsMigrated"] = "SUBSCRIPTIONS_MIGRATED";
    /** Subscriptions migration triggered */
    EventLogType["SubscriptionsMigrationTriggered"] = "SUBSCRIPTIONS_MIGRATION_TRIGGERED";
    /** Subscription billing month ends soon */
    EventLogType["SubscriptionBillingMonthEndsSoon"] = "SUBSCRIPTION_BILLING_MONTH_ENDS_SOON";
    /** Subscription canceled */
    EventLogType["SubscriptionCanceled"] = "SUBSCRIPTION_CANCELED";
    /** Subscription created */
    EventLogType["SubscriptionCreated"] = "SUBSCRIPTION_CREATED";
    /** Subscription expired */
    EventLogType["SubscriptionExpired"] = "SUBSCRIPTION_EXPIRED";
    /** Subscription spent limit exceeded */
    EventLogType["SubscriptionSpentLimitExceeded"] = "SUBSCRIPTION_SPENT_LIMIT_EXCEEDED";
    /** Subscription trial converted */
    EventLogType["SubscriptionTrialConverted"] = "SUBSCRIPTION_TRIAL_CONVERTED";
    /** Subscription trial ends soon */
    EventLogType["SubscriptionTrialEndsSoon"] = "SUBSCRIPTION_TRIAL_ENDS_SOON";
    /** Subscription trial expired */
    EventLogType["SubscriptionTrialExpired"] = "SUBSCRIPTION_TRIAL_EXPIRED";
    /** Subscription trial started */
    EventLogType["SubscriptionTrialStarted"] = "SUBSCRIPTION_TRIAL_STARTED";
    /** Subscription updated */
    EventLogType["SubscriptionUpdated"] = "SUBSCRIPTION_UPDATED";
    /** Subscription usage charge triggered */
    EventLogType["SubscriptionUsageChargeTriggered"] = "SUBSCRIPTION_USAGE_CHARGE_TRIGGERED";
    /** Subscription usage updated */
    EventLogType["SubscriptionUsageUpdated"] = "SUBSCRIPTION_USAGE_UPDATED";
    /** Sync failed */
    EventLogType["SyncFailed"] = "SYNC_FAILED";
    /** Widget configuration updated */
    EventLogType["WidgetConfigurationUpdated"] = "WIDGET_CONFIGURATION_UPDATED";
})(EventLogType = exports.EventLogType || (exports.EventLogType = {}));
var ExperimentSortFields;
(function (ExperimentSortFields) {
    ExperimentSortFields["CreatedAt"] = "createdAt";
    ExperimentSortFields["EnvironmentId"] = "environmentId";
    ExperimentSortFields["Id"] = "id";
    ExperimentSortFields["Name"] = "name";
    ExperimentSortFields["ProductId"] = "productId";
    ExperimentSortFields["RefId"] = "refId";
    ExperimentSortFields["Status"] = "status";
})(ExperimentSortFields = exports.ExperimentSortFields || (exports.ExperimentSortFields = {}));
/** The status of the experiment */
var ExperimentStatus;
(function (ExperimentStatus) {
    /** Experiment has been completed */
    ExperimentStatus["Completed"] = "COMPLETED";
    /** Experiment is in draft state */
    ExperimentStatus["Draft"] = "DRAFT";
    /** Experiment is currently running */
    ExperimentStatus["InProgress"] = "IN_PROGRESS";
})(ExperimentStatus = exports.ExperimentStatus || (exports.ExperimentStatus = {}));
var FeatureGroupSortFields;
(function (FeatureGroupSortFields) {
    FeatureGroupSortFields["CreatedAt"] = "createdAt";
    FeatureGroupSortFields["DisplayName"] = "displayName";
    FeatureGroupSortFields["EnvironmentId"] = "environmentId";
    FeatureGroupSortFields["FeatureGroupId"] = "featureGroupId";
    FeatureGroupSortFields["Id"] = "id";
    FeatureGroupSortFields["IsLatest"] = "isLatest";
    FeatureGroupSortFields["Status"] = "status";
    FeatureGroupSortFields["UpdatedAt"] = "updatedAt";
    FeatureGroupSortFields["VersionNumber"] = "versionNumber";
})(FeatureGroupSortFields = exports.FeatureGroupSortFields || (exports.FeatureGroupSortFields = {}));
/** Feature group status */
var FeatureGroupStatus;
(function (FeatureGroupStatus) {
    /** The feature group is archived */
    FeatureGroupStatus["Archived"] = "ARCHIVED";
    /** The feature group is published */
    FeatureGroupStatus["Published"] = "PUBLISHED";
})(FeatureGroupStatus = exports.FeatureGroupStatus || (exports.FeatureGroupStatus = {}));
var FeatureSortFields;
(function (FeatureSortFields) {
    FeatureSortFields["CreatedAt"] = "createdAt";
    FeatureSortFields["Description"] = "description";
    FeatureSortFields["DisplayName"] = "displayName";
    FeatureSortFields["EnvironmentId"] = "environmentId";
    FeatureSortFields["FeatureStatus"] = "featureStatus";
    FeatureSortFields["FeatureType"] = "featureType";
    FeatureSortFields["Id"] = "id";
    FeatureSortFields["MeterType"] = "meterType";
    FeatureSortFields["RefId"] = "refId";
    FeatureSortFields["UpdatedAt"] = "updatedAt";
})(FeatureSortFields = exports.FeatureSortFields || (exports.FeatureSortFields = {}));
/** Feature status */
var FeatureStatus;
(function (FeatureStatus) {
    /** Active feature */
    FeatureStatus["Active"] = "ACTIVE";
    /** New feature */
    FeatureStatus["New"] = "NEW";
    /** Suspended feature */
    FeatureStatus["Suspended"] = "SUSPENDED";
})(FeatureStatus = exports.FeatureStatus || (exports.FeatureStatus = {}));
/** The type of the feature */
var FeatureType;
(function (FeatureType) {
    /** Boolean feature type */
    FeatureType["Boolean"] = "BOOLEAN";
    /** Enum feature type */
    FeatureType["Enum"] = "ENUM";
    /** Numeric feature type */
    FeatureType["Number"] = "NUMBER";
})(FeatureType = exports.FeatureType || (exports.FeatureType = {}));
/** Font weight */
var FontWeight;
(function (FontWeight) {
    /** Bold font weight. */
    FontWeight["Bold"] = "BOLD";
    /** Standard font weight. */
    FontWeight["Normal"] = "NORMAL";
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
var HookSortFields;
(function (HookSortFields) {
    HookSortFields["CreatedAt"] = "createdAt";
    HookSortFields["Endpoint"] = "endpoint";
    HookSortFields["EnvironmentId"] = "environmentId";
    HookSortFields["Id"] = "id";
    HookSortFields["Status"] = "status";
})(HookSortFields = exports.HookSortFields || (exports.HookSortFields = {}));
/** Hook status */
var HookStatus;
(function (HookStatus) {
    /** Active */
    HookStatus["Active"] = "ACTIVE";
    /** Inactive */
    HookStatus["Inactive"] = "INACTIVE";
})(HookStatus = exports.HookStatus || (exports.HookStatus = {}));
var ImportIntegrationTaskSortFields;
(function (ImportIntegrationTaskSortFields) {
    ImportIntegrationTaskSortFields["CreatedAt"] = "createdAt";
    ImportIntegrationTaskSortFields["EnvironmentId"] = "environmentId";
    ImportIntegrationTaskSortFields["Id"] = "id";
    ImportIntegrationTaskSortFields["Status"] = "status";
    ImportIntegrationTaskSortFields["TaskType"] = "taskType";
})(ImportIntegrationTaskSortFields = exports.ImportIntegrationTaskSortFields || (exports.ImportIntegrationTaskSortFields = {}));
var IntegrationSortFields;
(function (IntegrationSortFields) {
    IntegrationSortFields["CreatedAt"] = "createdAt";
    IntegrationSortFields["EnvironmentId"] = "environmentId";
    IntegrationSortFields["Id"] = "id";
    IntegrationSortFields["VendorIdentifier"] = "vendorIdentifier";
    IntegrationSortFields["VendorType"] = "vendorType";
})(IntegrationSortFields = exports.IntegrationSortFields || (exports.IntegrationSortFields = {}));
/** The type of the invoice line item */
var InvoiceLineItemType;
(function (InvoiceLineItemType) {
    InvoiceLineItemType["AddonCharge"] = "AddonCharge";
    InvoiceLineItemType["BaseCharge"] = "BaseCharge";
    InvoiceLineItemType["InAdvanceCommitmentCharge"] = "InAdvanceCommitmentCharge";
    InvoiceLineItemType["MinimumSpendAdjustmentCharge"] = "MinimumSpendAdjustmentCharge";
    InvoiceLineItemType["MinimumSpendCharge"] = "MinimumSpendCharge";
    InvoiceLineItemType["Other"] = "Other";
    InvoiceLineItemType["OverageCharge"] = "OverageCharge";
    InvoiceLineItemType["PayAsYouGoCharge"] = "PayAsYouGoCharge";
    InvoiceLineItemType["TierCharge"] = "TierCharge";
    InvoiceLineItemType["ZeroAmountBaseCharge"] = "ZeroAmountBaseCharge";
})(InvoiceLineItemType = exports.InvoiceLineItemType || (exports.InvoiceLineItemType = {}));
var MemberSortFields;
(function (MemberSortFields) {
    MemberSortFields["CreatedAt"] = "createdAt";
    MemberSortFields["Email"] = "email";
    MemberSortFields["Id"] = "id";
})(MemberSortFields = exports.MemberSortFields || (exports.MemberSortFields = {}));
/** Member Status */
var MemberStatus;
(function (MemberStatus) {
    /** User has been invited to the environment */
    MemberStatus["Invited"] = "INVITED";
    /** User is a member of this environment */
    MemberStatus["Registered"] = "REGISTERED";
})(MemberStatus = exports.MemberStatus || (exports.MemberStatus = {}));
/** The meter type of the feature */
var MeterType;
(function (MeterType) {
    /** Fluctuating */
    MeterType["Fluctuating"] = "Fluctuating";
    /** Incremental */
    MeterType["Incremental"] = "Incremental";
    /** None */
    MeterType["None"] = "None";
})(MeterType = exports.MeterType || (exports.MeterType = {}));
/** Monthly reset period according to configuration */
var MonthlyAccordingTo;
(function (MonthlyAccordingTo) {
    /** Start of the month */
    MonthlyAccordingTo["StartOfTheMonth"] = "StartOfTheMonth";
    /** Subscription start */
    MonthlyAccordingTo["SubscriptionStart"] = "SubscriptionStart";
})(MonthlyAccordingTo = exports.MonthlyAccordingTo || (exports.MonthlyAccordingTo = {}));
/** Configures when the overage charge is billed. */
var OverageBillingPeriod;
(function (OverageBillingPeriod) {
    OverageBillingPeriod["Monthly"] = "MONTHLY";
    OverageBillingPeriod["OnSubscriptionRenewal"] = "ON_SUBSCRIPTION_RENEWAL";
})(OverageBillingPeriod = exports.OverageBillingPeriod || (exports.OverageBillingPeriod = {}));
var PackageDtoSortFields;
(function (PackageDtoSortFields) {
    PackageDtoSortFields["BillingId"] = "billingId";
    PackageDtoSortFields["CreatedAt"] = "createdAt";
    PackageDtoSortFields["Description"] = "description";
    PackageDtoSortFields["DisplayName"] = "displayName";
    PackageDtoSortFields["EnvironmentId"] = "environmentId";
    PackageDtoSortFields["Id"] = "id";
    PackageDtoSortFields["IsLatest"] = "isLatest";
    PackageDtoSortFields["PricingType"] = "pricingType";
    PackageDtoSortFields["ProductId"] = "productId";
    PackageDtoSortFields["RefId"] = "refId";
    PackageDtoSortFields["Status"] = "status";
    PackageDtoSortFields["UpdatedAt"] = "updatedAt";
    PackageDtoSortFields["VersionNumber"] = "versionNumber";
})(PackageDtoSortFields = exports.PackageDtoSortFields || (exports.PackageDtoSortFields = {}));
var PackageEntitlementSortFields;
(function (PackageEntitlementSortFields) {
    PackageEntitlementSortFields["CreatedAt"] = "createdAt";
    PackageEntitlementSortFields["EnvironmentId"] = "environmentId";
    PackageEntitlementSortFields["Id"] = "id";
    PackageEntitlementSortFields["PackageId"] = "packageId";
    PackageEntitlementSortFields["UpdatedAt"] = "updatedAt";
})(PackageEntitlementSortFields = exports.PackageEntitlementSortFields || (exports.PackageEntitlementSortFields = {}));
var PackageGroupSortFields;
(function (PackageGroupSortFields) {
    PackageGroupSortFields["CreatedAt"] = "createdAt";
    PackageGroupSortFields["DisplayName"] = "displayName";
    PackageGroupSortFields["EnvironmentId"] = "environmentId";
    PackageGroupSortFields["IsLatest"] = "isLatest";
    PackageGroupSortFields["PackageGroupId"] = "packageGroupId";
    PackageGroupSortFields["ProductId"] = "productId";
    PackageGroupSortFields["Status"] = "status";
    PackageGroupSortFields["UpdatedAt"] = "updatedAt";
    PackageGroupSortFields["VersionNumber"] = "versionNumber";
})(PackageGroupSortFields = exports.PackageGroupSortFields || (exports.PackageGroupSortFields = {}));
/** Package group status */
var PackageGroupStatus;
(function (PackageGroupStatus) {
    /** The package group is archived */
    PackageGroupStatus["Archived"] = "ARCHIVED";
    /** The package group is a draft */
    PackageGroupStatus["Draft"] = "DRAFT";
    /** The package group is published */
    PackageGroupStatus["Published"] = "PUBLISHED";
})(PackageGroupStatus = exports.PackageGroupStatus || (exports.PackageGroupStatus = {}));
/** Package status. */
var PackageStatus;
(function (PackageStatus) {
    PackageStatus["Archived"] = "ARCHIVED";
    PackageStatus["Draft"] = "DRAFT";
    PackageStatus["Published"] = "PUBLISHED";
})(PackageStatus = exports.PackageStatus || (exports.PackageStatus = {}));
/** Payment collection */
var PaymentCollection;
(function (PaymentCollection) {
    PaymentCollection["ActionRequired"] = "ACTION_REQUIRED";
    PaymentCollection["Failed"] = "FAILED";
    PaymentCollection["NotRequired"] = "NOT_REQUIRED";
    PaymentCollection["Processing"] = "PROCESSING";
})(PaymentCollection = exports.PaymentCollection || (exports.PaymentCollection = {}));
/** The method used to collect payments for a subscription */
var PaymentCollectionMethod;
(function (PaymentCollectionMethod) {
    /** Automatically charge the payment method on file */
    PaymentCollectionMethod["Charge"] = "CHARGE";
    /** Generate an invoice to the customer to pay manually */
    PaymentCollectionMethod["Invoice"] = "INVOICE";
    /** Do not leverage Stigg to manage payments for this subscription */
    PaymentCollectionMethod["None"] = "NONE";
})(PaymentCollectionMethod = exports.PaymentCollectionMethod || (exports.PaymentCollectionMethod = {}));
/** Type of a payment method */
var PaymentMethodType;
(function (PaymentMethodType) {
    /** Bank Transfer */
    PaymentMethodType["Bank"] = "BANK";
    /** Credit Card */
    PaymentMethodType["Card"] = "CARD";
    /** Cash App */
    PaymentMethodType["CashApp"] = "CASH_APP";
})(PaymentMethodType = exports.PaymentMethodType || (exports.PaymentMethodType = {}));
/** Type of the change between two plans of the same subscription */
var PlanChangeType;
(function (PlanChangeType) {
    /** Subscription downgrade to lower plan */
    PlanChangeType["Downgrade"] = "DOWNGRADE";
    /** Subscription remains on the same plan */
    PlanChangeType["None"] = "NONE";
    /** Subscription upgrade to higher plan */
    PlanChangeType["Upgrade"] = "UPGRADE";
})(PlanChangeType = exports.PlanChangeType || (exports.PlanChangeType = {}));
var PlanSortFields;
(function (PlanSortFields) {
    PlanSortFields["BillingId"] = "billingId";
    PlanSortFields["CreatedAt"] = "createdAt";
    PlanSortFields["Description"] = "description";
    PlanSortFields["DisplayName"] = "displayName";
    PlanSortFields["EnvironmentId"] = "environmentId";
    PlanSortFields["Id"] = "id";
    PlanSortFields["IsLatest"] = "isLatest";
    PlanSortFields["PricingType"] = "pricingType";
    PlanSortFields["ProductId"] = "productId";
    PlanSortFields["RefId"] = "refId";
    PlanSortFields["Status"] = "status";
    PlanSortFields["UpdatedAt"] = "updatedAt";
    PlanSortFields["VersionNumber"] = "versionNumber";
})(PlanSortFields = exports.PlanSortFields || (exports.PlanSortFields = {}));
var PriceSortFields;
(function (PriceSortFields) {
    PriceSortFields["BillingCadence"] = "billingCadence";
    PriceSortFields["BillingId"] = "billingId";
    PriceSortFields["BillingModel"] = "billingModel";
    PriceSortFields["BillingPeriod"] = "billingPeriod";
    PriceSortFields["CreatedAt"] = "createdAt";
    PriceSortFields["Id"] = "id";
    PriceSortFields["TiersMode"] = "tiersMode";
})(PriceSortFields = exports.PriceSortFields || (exports.PriceSortFields = {}));
/** Pricing Type. */
var PricingType;
(function (PricingType) {
    PricingType["Custom"] = "CUSTOM";
    PricingType["Free"] = "FREE";
    PricingType["Paid"] = "PAID";
})(PricingType = exports.PricingType || (exports.PricingType = {}));
var ProductSortFields;
(function (ProductSortFields) {
    ProductSortFields["AwsMarketplaceProductCode"] = "awsMarketplaceProductCode";
    ProductSortFields["AwsMarketplaceProductId"] = "awsMarketplaceProductId";
    ProductSortFields["CreatedAt"] = "createdAt";
    ProductSortFields["Description"] = "description";
    ProductSortFields["DisplayName"] = "displayName";
    ProductSortFields["EnvironmentId"] = "environmentId";
    ProductSortFields["Id"] = "id";
    ProductSortFields["IsDefaultProduct"] = "isDefaultProduct";
    ProductSortFields["MultipleSubscriptions"] = "multipleSubscriptions";
    ProductSortFields["RefId"] = "refId";
    ProductSortFields["UpdatedAt"] = "updatedAt";
})(ProductSortFields = exports.ProductSortFields || (exports.ProductSortFields = {}));
/** Promotional entitlement duration */
var PromotionalEntitlementPeriod;
(function (PromotionalEntitlementPeriod) {
    PromotionalEntitlementPeriod["Custom"] = "CUSTOM";
    /** Lifetime */
    PromotionalEntitlementPeriod["Lifetime"] = "LIFETIME";
    /** One month */
    PromotionalEntitlementPeriod["OneMonth"] = "ONE_MONTH";
    /** One week */
    PromotionalEntitlementPeriod["OneWeek"] = "ONE_WEEK";
    /** One year */
    PromotionalEntitlementPeriod["OneYear"] = "ONE_YEAR";
    /** Six months */
    PromotionalEntitlementPeriod["SixMonth"] = "SIX_MONTH";
})(PromotionalEntitlementPeriod = exports.PromotionalEntitlementPeriod || (exports.PromotionalEntitlementPeriod = {}));
var PromotionalEntitlementSortFields;
(function (PromotionalEntitlementSortFields) {
    PromotionalEntitlementSortFields["CreatedAt"] = "createdAt";
    PromotionalEntitlementSortFields["EnvironmentId"] = "environmentId";
    PromotionalEntitlementSortFields["Id"] = "id";
    PromotionalEntitlementSortFields["Status"] = "status";
    PromotionalEntitlementSortFields["UpdatedAt"] = "updatedAt";
})(PromotionalEntitlementSortFields = exports.PromotionalEntitlementSortFields || (exports.PromotionalEntitlementSortFields = {}));
/** Promotional entitlement status */
var PromotionalEntitlementStatus;
(function (PromotionalEntitlementStatus) {
    /** Active */
    PromotionalEntitlementStatus["Active"] = "Active";
    /** Expired */
    PromotionalEntitlementStatus["Expired"] = "Expired";
    /** Paused */
    PromotionalEntitlementStatus["Paused"] = "Paused";
})(PromotionalEntitlementStatus = exports.PromotionalEntitlementStatus || (exports.PromotionalEntitlementStatus = {}));
/** Proration behavior for subscription billing */
var ProrationBehavior;
(function (ProrationBehavior) {
    /** Create proration invoice items for changes in the subscription */
    ProrationBehavior["CreateProrations"] = "CREATE_PRORATIONS";
    /** Invoice immediately for changes in the subscription without proration */
    ProrationBehavior["InvoiceImmediately"] = "INVOICE_IMMEDIATELY";
})(ProrationBehavior = exports.ProrationBehavior || (exports.ProrationBehavior = {}));
/** Provision subscription status */
var ProvisionSubscriptionStatus;
(function (ProvisionSubscriptionStatus) {
    ProvisionSubscriptionStatus["PaymentRequired"] = "PAYMENT_REQUIRED";
    ProvisionSubscriptionStatus["Success"] = "SUCCESS";
})(ProvisionSubscriptionStatus = exports.ProvisionSubscriptionStatus || (exports.ProvisionSubscriptionStatus = {}));
/** The migration type, either publish the new version to new customers or all customers */
var PublishMigrationType;
(function (PublishMigrationType) {
    /** Publish to all customers */
    PublishMigrationType["AllCustomers"] = "ALL_CUSTOMERS";
    /** Publish only to new customers */
    PublishMigrationType["NewCustomers"] = "NEW_CUSTOMERS";
})(PublishMigrationType = exports.PublishMigrationType || (exports.PublishMigrationType = {}));
/** Options for when a change for a paid subscription should take effect */
var ScheduleStrategy;
(function (ScheduleStrategy) {
    /** Schedule the change to the end of the billing month (for subscriptions whose billing period is larger then month) */
    ScheduleStrategy["EndOfBillingMonth"] = "END_OF_BILLING_MONTH";
    /** Schedule the change to the end of the billing period */
    ScheduleStrategy["EndOfBillingPeriod"] = "END_OF_BILLING_PERIOD";
    /** Apply the change immediately */
    ScheduleStrategy["Immediate"] = "IMMEDIATE";
})(ScheduleStrategy = exports.ScheduleStrategy || (exports.ScheduleStrategy = {}));
/** Sort Directions */
var SortDirection;
(function (SortDirection) {
    SortDirection["Asc"] = "ASC";
    SortDirection["Desc"] = "DESC";
})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));
/** Sort Nulls Options */
var SortNulls;
(function (SortNulls) {
    SortNulls["NullsFirst"] = "NULLS_FIRST";
    SortNulls["NullsLast"] = "NULLS_LAST";
})(SortNulls = exports.SortNulls || (exports.SortNulls = {}));
var SourceType;
(function (SourceType) {
    SourceType["JsClientSdk"] = "JS_CLIENT_SDK";
    SourceType["NodeServerSdk"] = "NODE_SERVER_SDK";
    SourceType["PersistentCacheService"] = "PERSISTENT_CACHE_SERVICE";
})(SourceType = exports.SourceType || (exports.SourceType = {}));
var SubscriptionAddonSortFields;
(function (SubscriptionAddonSortFields) {
    SubscriptionAddonSortFields["CreatedAt"] = "createdAt";
    SubscriptionAddonSortFields["Id"] = "id";
    SubscriptionAddonSortFields["Quantity"] = "quantity";
    SubscriptionAddonSortFields["UpdatedAt"] = "updatedAt";
})(SubscriptionAddonSortFields = exports.SubscriptionAddonSortFields || (exports.SubscriptionAddonSortFields = {}));
/** Subscription cancellation status */
var SubscriptionCancelReason;
(function (SubscriptionCancelReason) {
    SubscriptionCancelReason["AutoCancellationRule"] = "AutoCancellationRule";
    SubscriptionCancelReason["CancelledByBilling"] = "CancelledByBilling";
    SubscriptionCancelReason["CustomerArchived"] = "CustomerArchived";
    SubscriptionCancelReason["DetachBilling"] = "DetachBilling";
    SubscriptionCancelReason["Expired"] = "Expired";
    SubscriptionCancelReason["Immediate"] = "Immediate";
    SubscriptionCancelReason["PendingPaymentExpired"] = "PendingPaymentExpired";
    SubscriptionCancelReason["ScheduledCancellation"] = "ScheduledCancellation";
    SubscriptionCancelReason["TrialConverted"] = "TrialConverted";
    SubscriptionCancelReason["TrialEnded"] = "TrialEnded";
    SubscriptionCancelReason["UpgradeOrDowngrade"] = "UpgradeOrDowngrade";
})(SubscriptionCancelReason = exports.SubscriptionCancelReason || (exports.SubscriptionCancelReason = {}));
/** Action to take when a subscription is cancelled */
var SubscriptionCancellationAction;
(function (SubscriptionCancellationAction) {
    /** Default action */
    SubscriptionCancellationAction["Default"] = "DEFAULT";
    /** Revoke entitlements action */
    SubscriptionCancellationAction["RevokeEntitlements"] = "REVOKE_ENTITLEMENTS";
})(SubscriptionCancellationAction = exports.SubscriptionCancellationAction || (exports.SubscriptionCancellationAction = {}));
/** When the subscription will be cancelled */
var SubscriptionCancellationTime;
(function (SubscriptionCancellationTime) {
    /** At the end of the billing period */
    SubscriptionCancellationTime["EndOfBillingPeriod"] = "END_OF_BILLING_PERIOD";
    /** Immediately */
    SubscriptionCancellationTime["Immediate"] = "IMMEDIATE";
    /** On a specific date */
    SubscriptionCancellationTime["SpecificDate"] = "SPECIFIC_DATE";
})(SubscriptionCancellationTime = exports.SubscriptionCancellationTime || (exports.SubscriptionCancellationTime = {}));
/** The status of the subscription coupon */
var SubscriptionCouponStatus;
(function (SubscriptionCouponStatus) {
    SubscriptionCouponStatus["Active"] = "ACTIVE";
    SubscriptionCouponStatus["Expired"] = "EXPIRED";
    SubscriptionCouponStatus["Removed"] = "REMOVED";
})(SubscriptionCouponStatus = exports.SubscriptionCouponStatus || (exports.SubscriptionCouponStatus = {}));
/** Subscription decision strategy */
var SubscriptionDecisionStrategy;
(function (SubscriptionDecisionStrategy) {
    SubscriptionDecisionStrategy["PredefinedFreePlan"] = "PREDEFINED_FREE_PLAN";
    SubscriptionDecisionStrategy["PredefinedTrialPlan"] = "PREDEFINED_TRIAL_PLAN";
    SubscriptionDecisionStrategy["RequestedPlan"] = "REQUESTED_PLAN";
    SubscriptionDecisionStrategy["SkippedSubscriptionCreation"] = "SKIPPED_SUBSCRIPTION_CREATION";
})(SubscriptionDecisionStrategy = exports.SubscriptionDecisionStrategy || (exports.SubscriptionDecisionStrategy = {}));
/** Setup for the end of the subscription */
var SubscriptionEndSetup;
(function (SubscriptionEndSetup) {
    /** Cancel subscription */
    SubscriptionEndSetup["CancelSubscription"] = "CANCEL_SUBSCRIPTION";
    /** Downgrade to free plan */
    SubscriptionEndSetup["DowngradeToFree"] = "DOWNGRADE_TO_FREE";
})(SubscriptionEndSetup = exports.SubscriptionEndSetup || (exports.SubscriptionEndSetup = {}));
var SubscriptionEntitlementSortFields;
(function (SubscriptionEntitlementSortFields) {
    SubscriptionEntitlementSortFields["CreatedAt"] = "createdAt";
    SubscriptionEntitlementSortFields["EnvironmentId"] = "environmentId";
    SubscriptionEntitlementSortFields["Id"] = "id";
    SubscriptionEntitlementSortFields["SubscriptionId"] = "subscriptionId";
    SubscriptionEntitlementSortFields["UpdatedAt"] = "updatedAt";
})(SubscriptionEntitlementSortFields = exports.SubscriptionEntitlementSortFields || (exports.SubscriptionEntitlementSortFields = {}));
/** The reason the billing event was created. */
var SubscriptionInvoiceBillingReason;
(function (SubscriptionInvoiceBillingReason) {
    /** A subscription advanced into a new billing cycle. */
    SubscriptionInvoiceBillingReason["BillingCycle"] = "BILLING_CYCLE";
    /** An invoice was created manually. */
    SubscriptionInvoiceBillingReason["Manual"] = "MANUAL";
    /** A subscription passed the minimum invoice amount */
    SubscriptionInvoiceBillingReason["MinimumInvoiceAmountExceeded"] = "MINIMUM_INVOICE_AMOUNT_EXCEEDED";
    /** An invoice was created for another reason. */
    SubscriptionInvoiceBillingReason["Other"] = "OTHER";
    /** A subscription was created. */
    SubscriptionInvoiceBillingReason["SubscriptionCreation"] = "SUBSCRIPTION_CREATION";
    /** A subscription was updated. */
    SubscriptionInvoiceBillingReason["SubscriptionUpdate"] = "SUBSCRIPTION_UPDATE";
})(SubscriptionInvoiceBillingReason = exports.SubscriptionInvoiceBillingReason || (exports.SubscriptionInvoiceBillingReason = {}));
/** SubscriptionInvoice status */
var SubscriptionInvoiceStatus;
(function (SubscriptionInvoiceStatus) {
    SubscriptionInvoiceStatus["Canceled"] = "CANCELED";
    SubscriptionInvoiceStatus["Open"] = "OPEN";
    SubscriptionInvoiceStatus["Paid"] = "PAID";
})(SubscriptionInvoiceStatus = exports.SubscriptionInvoiceStatus || (exports.SubscriptionInvoiceStatus = {}));
var SubscriptionMigrationTaskSortFields;
(function (SubscriptionMigrationTaskSortFields) {
    SubscriptionMigrationTaskSortFields["CreatedAt"] = "createdAt";
    SubscriptionMigrationTaskSortFields["EnvironmentId"] = "environmentId";
    SubscriptionMigrationTaskSortFields["Id"] = "id";
    SubscriptionMigrationTaskSortFields["Status"] = "status";
    SubscriptionMigrationTaskSortFields["TaskType"] = "taskType";
})(SubscriptionMigrationTaskSortFields = exports.SubscriptionMigrationTaskSortFields || (exports.SubscriptionMigrationTaskSortFields = {}));
/** Set non immediate cancellation time (atm supported only for stripe integration) */
var SubscriptionMigrationTime;
(function (SubscriptionMigrationTime) {
    SubscriptionMigrationTime["EndOfBillingPeriod"] = "END_OF_BILLING_PERIOD";
    SubscriptionMigrationTime["Immediate"] = "IMMEDIATE";
})(SubscriptionMigrationTime = exports.SubscriptionMigrationTime || (exports.SubscriptionMigrationTime = {}));
var SubscriptionPriceSortFields;
(function (SubscriptionPriceSortFields) {
    SubscriptionPriceSortFields["BillingModel"] = "billingModel";
    SubscriptionPriceSortFields["CreatedAt"] = "createdAt";
    SubscriptionPriceSortFields["FeatureId"] = "featureId";
    SubscriptionPriceSortFields["HasSoftLimit"] = "hasSoftLimit";
    SubscriptionPriceSortFields["Id"] = "id";
    SubscriptionPriceSortFields["UpdatedAt"] = "updatedAt";
    SubscriptionPriceSortFields["UsageLimit"] = "usageLimit";
})(SubscriptionPriceSortFields = exports.SubscriptionPriceSortFields || (exports.SubscriptionPriceSortFields = {}));
/** Proration behavior for subscription billing */
var SubscriptionProrationBehavior;
(function (SubscriptionProrationBehavior) {
    /** Create proration invoice items for changes in the subscription */
    SubscriptionProrationBehavior["CreateProrations"] = "CREATE_PRORATIONS";
    /** Invoice immediately for changes in the subscription without proration */
    SubscriptionProrationBehavior["InvoiceImmediately"] = "INVOICE_IMMEDIATELY";
    /** No proration and no invoice for changes in the subscription */
    SubscriptionProrationBehavior["None"] = "NONE";
})(SubscriptionProrationBehavior = exports.SubscriptionProrationBehavior || (exports.SubscriptionProrationBehavior = {}));
var SubscriptionQuerySortFields;
(function (SubscriptionQuerySortFields) {
    SubscriptionQuerySortFields["CreatedAt"] = "createdAt";
    SubscriptionQuerySortFields["CustomerId"] = "customerId";
    SubscriptionQuerySortFields["EnvironmentId"] = "environmentId";
    SubscriptionQuerySortFields["ProductId"] = "productId";
    SubscriptionQuerySortFields["ResourceId"] = "resourceId";
    SubscriptionQuerySortFields["StartDate"] = "startDate";
    SubscriptionQuerySortFields["Status"] = "status";
})(SubscriptionQuerySortFields = exports.SubscriptionQuerySortFields || (exports.SubscriptionQuerySortFields = {}));
/** Subscription scheduled schedule status */
var SubscriptionScheduleStatus;
(function (SubscriptionScheduleStatus) {
    SubscriptionScheduleStatus["Canceled"] = "Canceled";
    SubscriptionScheduleStatus["Done"] = "Done";
    SubscriptionScheduleStatus["Failed"] = "Failed";
    SubscriptionScheduleStatus["PendingPayment"] = "PendingPayment";
    SubscriptionScheduleStatus["Scheduled"] = "Scheduled";
})(SubscriptionScheduleStatus = exports.SubscriptionScheduleStatus || (exports.SubscriptionScheduleStatus = {}));
/** Subscription scheduled schedule type */
var SubscriptionScheduleType;
(function (SubscriptionScheduleType) {
    /** Additional metadata change */
    SubscriptionScheduleType["AdditionalMetaData"] = "AdditionalMetaData";
    /** Addon change */
    SubscriptionScheduleType["Addon"] = "Addon";
    /** Billing info metadata change */
    SubscriptionScheduleType["BillingInfoMetadata"] = "BillingInfoMetadata";
    /** Billing period change */
    SubscriptionScheduleType["BillingPeriod"] = "BillingPeriod";
    /** Coupon change */
    SubscriptionScheduleType["Coupon"] = "Coupon";
    /** Downgrade change */
    SubscriptionScheduleType["Downgrade"] = "Downgrade";
    /** Migrate to latest */
    SubscriptionScheduleType["MigrateToLatest"] = "MigrateToLatest";
    /** Plan change */
    SubscriptionScheduleType["Plan"] = "Plan";
    /** Custom price change */
    SubscriptionScheduleType["PriceOverride"] = "PriceOverride";
    /** Unit amount change */
    SubscriptionScheduleType["UnitAmount"] = "UnitAmount";
})(SubscriptionScheduleType = exports.SubscriptionScheduleType || (exports.SubscriptionScheduleType = {}));
/** Setup for the start of the subscription */
var SubscriptionStartSetup;
(function (SubscriptionStartSetup) {
    /** Start with a free plan */
    SubscriptionStartSetup["FreePlan"] = "FREE_PLAN";
    /** Select a plan */
    SubscriptionStartSetup["PlanSelection"] = "PLAN_SELECTION";
    /** Start with a trial period */
    SubscriptionStartSetup["TrialPeriod"] = "TRIAL_PERIOD";
})(SubscriptionStartSetup = exports.SubscriptionStartSetup || (exports.SubscriptionStartSetup = {}));
/** Subscription status */
var SubscriptionStatus;
(function (SubscriptionStatus) {
    SubscriptionStatus["Active"] = "ACTIVE";
    SubscriptionStatus["Canceled"] = "CANCELED";
    SubscriptionStatus["Expired"] = "EXPIRED";
    SubscriptionStatus["InTrial"] = "IN_TRIAL";
    SubscriptionStatus["NotStarted"] = "NOT_STARTED";
    SubscriptionStatus["PaymentPending"] = "PAYMENT_PENDING";
})(SubscriptionStatus = exports.SubscriptionStatus || (exports.SubscriptionStatus = {}));
/** Decide whether feature usage will be reset upon creation on new subscription */
var SubscriptionUpdateUsageCutoffBehavior;
(function (SubscriptionUpdateUsageCutoffBehavior) {
    /** Always reset */
    SubscriptionUpdateUsageCutoffBehavior["AlwaysReset"] = "ALWAYS_RESET";
    /** Billing period changed */
    SubscriptionUpdateUsageCutoffBehavior["BillingPeriodChange"] = "BILLING_PERIOD_CHANGE";
    /** Never reset */
    SubscriptionUpdateUsageCutoffBehavior["NeverReset"] = "NEVER_RESET";
})(SubscriptionUpdateUsageCutoffBehavior = exports.SubscriptionUpdateUsageCutoffBehavior || (exports.SubscriptionUpdateUsageCutoffBehavior = {}));
/** Status of the integration sync */
var SyncStatus;
(function (SyncStatus) {
    /** Error sync status */
    SyncStatus["Error"] = "ERROR";
    /** No sync required status */
    SyncStatus["NoSyncRequired"] = "NO_SYNC_REQUIRED";
    /** Pending sync status */
    SyncStatus["Pending"] = "PENDING";
    /** Successful sync status */
    SyncStatus["Success"] = "SUCCESS";
})(SyncStatus = exports.SyncStatus || (exports.SyncStatus = {}));
/** The status of the task */
var TaskStatus;
(function (TaskStatus) {
    /** The task is canceled */
    TaskStatus["Canceled"] = "CANCELED";
    /** The task is completed */
    TaskStatus["Completed"] = "COMPLETED";
    /** The task is failed */
    TaskStatus["Failed"] = "FAILED";
    /** The task is in progress */
    TaskStatus["InProgress"] = "IN_PROGRESS";
    /** The task is partially failed */
    TaskStatus["PartiallyFailed"] = "PARTIALLY_FAILED";
    /** The task is pending */
    TaskStatus["Pending"] = "PENDING";
})(TaskStatus = exports.TaskStatus || (exports.TaskStatus = {}));
/** The type of the task */
var TaskType;
(function (TaskType) {
    /** The task is an import of product catalog from integration */
    TaskType["ImportIntegrationCatalog"] = "IMPORT_INTEGRATION_CATALOG";
    /** The task is an import of customers from integration */
    TaskType["ImportIntegrationCustomers"] = "IMPORT_INTEGRATION_CUSTOMERS";
    /** The task is an import of subscriptions in bulk */
    TaskType["ImportSubscriptionsBulk"] = "IMPORT_SUBSCRIPTIONS_BULK";
    /** The task is a batch recalculation of entitlements */
    TaskType["RecalculateBatchEntitlements"] = "RECALCULATE_BATCH_ENTITLEMENTS";
    /** The task is a recalculation of entitlements */
    TaskType["RecalculateEntitlements"] = "RECALCULATE_ENTITLEMENTS";
    /** The task is a resync integration */
    TaskType["ResyncIntegration"] = "RESYNC_INTEGRATION";
    /** The task is a subscription migration v1 */
    TaskType["SubscriptionMigration"] = "SUBSCRIPTION_MIGRATION";
    /** The task is a subscription migration v2 */
    TaskType["SubscriptionMigrationV2"] = "SUBSCRIPTION_MIGRATION_V2";
})(TaskType = exports.TaskType || (exports.TaskType = {}));
/** Tiers mode */
var TiersMode;
(function (TiersMode) {
    /** Tiered */
    TiersMode["Graduated"] = "GRADUATED";
    /** Volume */
    TiersMode["Volume"] = "VOLUME";
})(TiersMode = exports.TiersMode || (exports.TiersMode = {}));
/** Indicates the behavior of the subscription when the trial is expired. */
var TrialEndBehavior;
(function (TrialEndBehavior) {
    /** cancel the subscription when the trial is expired */
    TrialEndBehavior["CancelSubscription"] = "CANCEL_SUBSCRIPTION";
    /** convert the trial subscription to a paid subscription */
    TrialEndBehavior["ConvertToPaid"] = "CONVERT_TO_PAID";
})(TrialEndBehavior = exports.TrialEndBehavior || (exports.TrialEndBehavior = {}));
/** day or month. */
var TrialPeriodUnits;
(function (TrialPeriodUnits) {
    TrialPeriodUnits["Day"] = "DAY";
    TrialPeriodUnits["Month"] = "MONTH";
})(TrialPeriodUnits = exports.TrialPeriodUnits || (exports.TrialPeriodUnits = {}));
/** Unit transformation round type */
var UnitTransformationRound;
(function (UnitTransformationRound) {
    /** Apply round down after transformation */
    UnitTransformationRound["Down"] = "DOWN";
    /** Apply round up after transformation */
    UnitTransformationRound["Up"] = "UP";
})(UnitTransformationRound = exports.UnitTransformationRound || (exports.UnitTransformationRound = {}));
/** Type of marker for a usage history point */
var UsageMarkerType;
(function (UsageMarkerType) {
    /** Usage was reset due to reaching the end of a usage period */
    UsageMarkerType["PeriodicReset"] = "PERIODIC_RESET";
    /** Usage was reset due to a subscription change */
    UsageMarkerType["SubscriptionChangeReset"] = "SUBSCRIPTION_CHANGE_RESET";
})(UsageMarkerType = exports.UsageMarkerType || (exports.UsageMarkerType = {}));
var UsageMeasurementSortFields;
(function (UsageMeasurementSortFields) {
    UsageMeasurementSortFields["CreatedAt"] = "createdAt";
    UsageMeasurementSortFields["EnvironmentId"] = "environmentId";
    UsageMeasurementSortFields["Id"] = "id";
})(UsageMeasurementSortFields = exports.UsageMeasurementSortFields || (exports.UsageMeasurementSortFields = {}));
/** Update behavior */
var UsageUpdateBehavior;
(function (UsageUpdateBehavior) {
    /** Delta update */
    UsageUpdateBehavior["Delta"] = "DELTA";
    /** Set update */
    UsageUpdateBehavior["Set"] = "SET";
})(UsageUpdateBehavior = exports.UsageUpdateBehavior || (exports.UsageUpdateBehavior = {}));
/** A vendor identifier object */
var VendorIdentifier;
(function (VendorIdentifier) {
    /** Auth0 integration vendor identifier */
    VendorIdentifier["Auth0"] = "AUTH0";
    /** AWS Marketplace integration vendor identifier */
    VendorIdentifier["AwsMarketplace"] = "AWS_MARKETPLACE";
    /** Google BigQuery integration vendor identifier */
    VendorIdentifier["BigQuery"] = "BIG_QUERY";
    /** HubSpot integration vendor identifier */
    VendorIdentifier["Hubspot"] = "HUBSPOT";
    /** OpenFGA integration vendor identifier */
    VendorIdentifier["OpenFga"] = "OPEN_FGA";
    /** Salesforce integration vendor identifier */
    VendorIdentifier["Salesforce"] = "SALESFORCE";
    /** Snowflake integration vendor identifier */
    VendorIdentifier["Snowflake"] = "SNOWFLAKE";
    /** Stripe integration vendor identifier */
    VendorIdentifier["Stripe"] = "STRIPE";
    /** Zuora integration vendor identifier */
    VendorIdentifier["Zuora"] = "ZUORA";
})(VendorIdentifier = exports.VendorIdentifier || (exports.VendorIdentifier = {}));
/** The type of integration */
var VendorType;
(function (VendorType) {
    /** Authentication integration type */
    VendorType["Auth"] = "AUTH";
    /** Billing integration type */
    VendorType["Billing"] = "BILLING";
    /** CRM integration type */
    VendorType["Crm"] = "CRM";
    /** Data export integration type */
    VendorType["DataExport"] = "DATA_EXPORT";
    /** Marketplace integration type */
    VendorType["Marketplace"] = "MARKETPLACE";
})(VendorType = exports.VendorType || (exports.VendorType = {}));
/** Weekly reset period according to configuration */
var WeeklyAccordingTo;
(function (WeeklyAccordingTo) {
    WeeklyAccordingTo["EveryFriday"] = "EveryFriday";
    /** Every Monday */
    WeeklyAccordingTo["EveryMonday"] = "EveryMonday";
    WeeklyAccordingTo["EverySaturday"] = "EverySaturday";
    /** Every Sunday */
    WeeklyAccordingTo["EverySunday"] = "EverySunday";
    /** Every Thursday */
    WeeklyAccordingTo["EveryThursday"] = "EveryThursday";
    /** Every Tuesday */
    WeeklyAccordingTo["EveryTuesday"] = "EveryTuesday";
    /** Every Wednesday */
    WeeklyAccordingTo["EveryWednesday"] = "EveryWednesday";
    /** Subscription start */
    WeeklyAccordingTo["SubscriptionStart"] = "SubscriptionStart";
})(WeeklyAccordingTo = exports.WeeklyAccordingTo || (exports.WeeklyAccordingTo = {}));
/** The widget type */
var WidgetType;
(function (WidgetType) {
    WidgetType["Checkout"] = "CHECKOUT";
    WidgetType["CustomerPortal"] = "CUSTOMER_PORTAL";
    WidgetType["Paywall"] = "PAYWALL";
})(WidgetType = exports.WidgetType || (exports.WidgetType = {}));
/** Yearly reset period according to configuration */
var YearlyAccordingTo;
(function (YearlyAccordingTo) {
    /** Subscription start */
    YearlyAccordingTo["SubscriptionStart"] = "SubscriptionStart";
})(YearlyAccordingTo = exports.YearlyAccordingTo || (exports.YearlyAccordingTo = {}));
/** The group type of the experiment */
var ExperimentGroupType;
(function (ExperimentGroupType) {
    /** Control group of the experiment */
    ExperimentGroupType["Control"] = "CONTROL";
    /** Variant group of the experiment */
    ExperimentGroupType["Variant"] = "VARIANT";
})(ExperimentGroupType = exports.ExperimentGroupType || (exports.ExperimentGroupType = {}));
exports.PageInfoFragmentDoc = (0, graphql_tag_1.default) `
    fragment PageInfoFragment on PageInfo {
  startCursor
  endCursor
  hasNextPage
  hasPreviousPage
}
    `;
exports.SubscriptionQueryFragmentDoc = (0, graphql_tag_1.default) `
    fragment SubscriptionQueryFragment on SubscriptionQuery {
  subscriptionId
  status
  pricingType
  startDate
  currentBillingPeriodEnd
  customer {
    customerId
  }
  payingCustomer {
    customerId
  }
  resource {
    resourceId
  }
  plan {
    planId: refId
    displayName
  }
  addons {
    quantity
    addon {
      addonId: refId
    }
  }
  trialConfiguration {
    trialEndBehavior
  }
  trialEndDate
}
    `;
exports.SlimSubscriptionFragmentV2FragmentDoc = (0, graphql_tag_1.default) `
    fragment SlimSubscriptionFragmentV2 on CustomerSubscription {
  subscriptionId
  status
  pricingType
  startDate
  cancellationDate
  currentBillingPeriodEnd
  customer {
    customerId
  }
  payingCustomer {
    customerId
  }
  resource {
    resourceId
  }
  plan {
    planId: refId
    displayName
  }
  addons {
    quantity
    addon {
      addonId: refId
    }
  }
  trialConfiguration {
    trialEndBehavior
  }
  trialEndDate
}
    `;
exports.SlimCustomerFragmentDoc = (0, graphql_tag_1.default) `
    fragment SlimCustomerFragment on Customer {
  id
  name
  email
  createdAt
  updatedAt
  refId
  customerId
  billingId
  additionalMetaData
  awsMarketplaceCustomerId
}
    `;
exports.CouponFragmentDoc = (0, graphql_tag_1.default) `
    fragment CouponFragment on Coupon {
  id
  discountValue
  percentOff
  amountsOff {
    amount
    currency
  }
  type
  additionalMetaData
  refId
  name
  description
  createdAt
  updatedAt
  billingId
  billingLinkUrl
  status
  syncStates {
    vendorIdentifier
    status
  }
}
    `;
exports.PromotionalEntitlementFragmentDoc = (0, graphql_tag_1.default) `
    fragment PromotionalEntitlementFragment on PromotionalEntitlement {
  status
  usageLimit
  featureId
  hasUnlimitedUsage
  hasSoftLimit
  resetPeriod
  endDate
  isVisible
  feature {
    featureType
    meterType
    featureUnits
    featureUnitsPlural
    displayName
    description
    refId
    additionalMetaData
  }
}
    `;
exports.CustomerFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerFragment on Customer {
  ...SlimCustomerFragment
  hasPaymentMethod
  hasActiveSubscription
  defaultPaymentExpirationMonth
  defaultPaymentExpirationYear
  defaultPaymentMethodLast4Digits
  defaultPaymentMethodType
  trialedPlans {
    productId
    productRefId
    planRefId
    planId
  }
  experimentInfo {
    groupType
    groupName
    id
    name
  }
  coupon {
    ...CouponFragment
  }
  eligibleForTrial {
    productId
    productRefId
    eligible
  }
  promotionalEntitlements {
    ...PromotionalEntitlementFragment
  }
}
    `;
exports.SubscriptionInvoiceFragmentDoc = (0, graphql_tag_1.default) `
    fragment SubscriptionInvoiceFragment on SubscriptionInvoice {
  billingId
  status
  createdAt
  dueDate
  updatedAt
  errorMessage
  requiresAction
  paymentSecret
  paymentUrl
  pdfUrl
  billingReason
  currency
  subTotal
  subTotalExcludingTax
  total
  totalExcludingTax
  tax
  amountDue
  attemptCount
}
    `;
exports.CustomerResourceFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerResourceFragment on CustomerResource {
  resourceId
}
    `;
exports.PriceTierFragmentDoc = (0, graphql_tag_1.default) `
    fragment PriceTierFragment on PriceTier {
  upTo
  unitPrice {
    amount
    currency
  }
  flatPrice {
    amount
    currency
  }
}
    `;
exports.PriceFragmentDoc = (0, graphql_tag_1.default) `
    fragment PriceFragment on Price {
  billingModel
  billingPeriod
  billingCadence
  billingId
  minUnitQuantity
  maxUnitQuantity
  billingCountryCode
  price {
    amount
    currency
  }
  creditRate {
    amount
    customCurrencyId
  }
  tiersMode
  tiers {
    ...PriceTierFragment
  }
  feature {
    refId
    featureUnits
    featureUnitsPlural
    displayName
    description
  }
  blockSize
}
    `;
exports.TotalPriceFragmentDoc = (0, graphql_tag_1.default) `
    fragment TotalPriceFragment on CustomerSubscriptionTotalPrice {
  subTotal {
    amount
    currency
  }
  total {
    amount
    currency
  }
}
    `;
exports.ProductFragmentDoc = (0, graphql_tag_1.default) `
    fragment ProductFragment on Product {
  refId
  displayName
  description
  additionalMetaData
  productSettings {
    downgradePlan {
      refId
      displayName
    }
  }
}
    `;
exports.PackageEntitlementFragmentDoc = (0, graphql_tag_1.default) `
    fragment PackageEntitlementFragment on PackageEntitlement {
  usageLimit
  hasUnlimitedUsage
  hasSoftLimit
  featureId
  resetPeriod
  hiddenFromWidgets
  isCustom
  displayNameOverride
  enumValues
  isGranted
  feature {
    featureType
    meterType
    featureUnits
    featureUnitsPlural
    displayName
    description
    refId
    additionalMetaData
  }
}
    `;
exports.OveragePriceFragmentDoc = (0, graphql_tag_1.default) `
    fragment OveragePriceFragment on Price {
  billingModel
  billingPeriod
  billingId
  billingCountryCode
  price {
    amount
    currency
  }
  tiersMode
  tiers {
    ...PriceTierFragment
  }
  feature {
    refId
    featureUnits
    featureUnitsPlural
    displayName
    description
  }
}
    `;
exports.AddonDependencyFragmentDoc = (0, graphql_tag_1.default) `
    fragment AddonDependencyFragment on Addon {
  id
  refId
  displayName
  description
}
    `;
exports.AddonFragmentDoc = (0, graphql_tag_1.default) `
    fragment AddonFragment on Addon {
  id
  refId
  billingId
  displayName
  description
  additionalMetaData
  hiddenFromWidgets
  entitlements {
    ...PackageEntitlementFragment
  }
  prices {
    ...PriceFragment
  }
  overagePrices {
    ...OveragePriceFragment
  }
  pricingType
  maxQuantity
  dependencies {
    ...AddonDependencyFragment
  }
}
    `;
exports.PlanCompatiblePackageGroupsFragmentDoc = (0, graphql_tag_1.default) `
    fragment PlanCompatiblePackageGroupsFragment on PlanCompatiblePackageGroups {
  packageGroupId
  displayName
  addons {
    ...AddonFragment
  }
  options {
    minItems
    freeItems
  }
}
    `;
exports.PlanFragmentDoc = (0, graphql_tag_1.default) `
    fragment PlanFragment on Plan {
  id
  refId
  displayName
  description
  billingId
  versionNumber
  additionalMetaData
  hiddenFromWidgets
  product {
    ...ProductFragment
  }
  basePlan {
    refId
    displayName
  }
  entitlements {
    ...PackageEntitlementFragment
  }
  inheritedEntitlements {
    ...PackageEntitlementFragment
  }
  compatibleAddons {
    ...AddonFragment
  }
  compatiblePackageGroups {
    ...PlanCompatiblePackageGroupsFragment
  }
  prices {
    ...PriceFragment
  }
  overagePrices {
    ...OveragePriceFragment
  }
  pricingType
  defaultTrialConfig {
    duration
    units
    budget {
      limit
    }
    trialEndBehavior
  }
}
    `;
exports.ScheduleVariablesFragmentDoc = (0, graphql_tag_1.default) `
    fragment ScheduleVariablesFragment on ScheduleVariables {
  __typename
  ... on PlanChangeVariables {
    planRefId
    changeType
    billingPeriod
    billableFeatures {
      featureId
      quantity
    }
    addons {
      addonRefId
      quantity
    }
    priceOverrides {
      planRefId
      addonRefId
      featureId
    }
  }
  ... on DowngradeChangeVariables {
    downgradePlanRefId
    billingPeriod
    billableFeatures {
      featureId
      quantity
    }
    addons {
      addonRefId
      quantity
    }
    priceOverrides {
      planRefId
      addonRefId
      featureId
    }
  }
  ... on BillingPeriodChangeVariables {
    billingPeriod
  }
  ... on UnitAmountChangeVariables {
    newUnitAmount
    featureId
  }
  ... on AddonChangeVariables {
    addonRefId
    newQuantity
  }
  ... on PlanPriceOverrideChangeVariables {
    planRefId
    featureId
  }
  ... on AddonPriceOverrideChangeVariables {
    addonRefId
    featureId
  }
}
    `;
exports.SubscriptionScheduledUpdateDataFragmentDoc = (0, graphql_tag_1.default) `
    fragment SubscriptionScheduledUpdateData on SubscriptionScheduledUpdate {
  subscriptionScheduleType
  scheduleStatus
  scheduledExecutionTime
  targetPackage {
    id
    refId
    displayName
  }
  scheduleVariables {
    ...ScheduleVariablesFragment
  }
}
    `;
exports.SubscriptionFutureUpdateDataFragmentDoc = (0, graphql_tag_1.default) `
    fragment SubscriptionFutureUpdateData on SubscriptionFutureUpdate {
  subscriptionScheduleType
  scheduleStatus
  scheduledExecutionTime
  targetPackage {
    id
    refId
    displayName
  }
  scheduleVariables {
    ...ScheduleVariablesFragment
  }
}
    `;
exports.SubscriptionTrialConfigurationFragmentDoc = (0, graphql_tag_1.default) `
    fragment SubscriptionTrialConfigurationFragment on TrialConfiguration {
  trialEndBehavior
}
    `;
exports.SubscriptionFragmentDoc = (0, graphql_tag_1.default) `
    fragment SubscriptionFragment on CustomerSubscription {
  id
  subscriptionId
  payingCustomer {
    ...SlimCustomerFragment
  }
  startDate
  endDate
  trialEndDate
  cancellationDate
  effectiveEndDate
  status
  refId
  currentBillingPeriodEnd
  additionalMetaData
  billingId
  billingLinkUrl
  latestInvoice {
    ...SubscriptionInvoiceFragment
  }
  paymentCollection
  paymentCollectionMethod
  billingSyncError
  resource {
    ...CustomerResourceFragment
  }
  experimentInfo {
    name
    groupType
    groupName
    id
  }
  prices {
    usageLimit
    price {
      ...PriceFragment
    }
  }
  totalPrice {
    ...TotalPriceFragment
  }
  pricingType
  plan {
    ...PlanFragment
  }
  addons {
    id
    quantity
    addon {
      ...AddonFragment
    }
  }
  scheduledUpdates {
    ...SubscriptionScheduledUpdateData
  }
  futureUpdates {
    ...SubscriptionFutureUpdateData
  }
  trialConfiguration {
    ...SubscriptionTrialConfigurationFragment
  }
}
    `;
exports.CustomerWithSubscriptionsFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerWithSubscriptionsFragment on Customer {
  ...CustomerFragment
  subscriptions {
    ...SubscriptionFragment
  }
}
    `;
exports.CustomerStatisticsFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerStatisticsFragment on Customer {
  statistics {
    activeSubscriptionsByPricingType {
      pricingType
      totalCount
    }
  }
}
    `;
exports.SubscriptionPreviewFragmentDoc = (0, graphql_tag_1.default) `
    fragment SubscriptionPreviewFragment on SubscriptionPreview {
  subTotal {
    amount
    currency
  }
  totalExcludingTax {
    amount
    currency
  }
  total {
    amount
    currency
  }
  discountAmount {
    amount
    currency
  }
  taxDetails {
    displayName
    percentage
    inclusive
  }
  tax {
    amount
    currency
  }
  billingPeriodRange {
    start
    end
  }
  discount {
    name
    type
    value
    durationType
    durationInMonths
  }
  subscription {
    subTotal {
      amount
      currency
    }
    totalExcludingTax {
      amount
      currency
    }
    total {
      amount
      currency
    }
    tax {
      amount
      currency
    }
    discountAmount {
      amount
      currency
    }
    taxDetails {
      displayName
      percentage
      inclusive
    }
    discount {
      name
      type
      value
      durationType
      durationInMonths
    }
  }
  proration {
    prorationDate
    credit {
      amount
      currency
    }
    debit {
      amount
      currency
    }
    netAmount {
      amount
      currency
    }
  }
  isPlanDowngrade
  hasScheduledUpdates
  credits {
    initial {
      amount
      currency
    }
    used {
      amount
      currency
    }
    remaining {
      amount
      currency
    }
  }
}
    `;
exports.ImmediateSubscriptionPreviewInvoiceFragmentDoc = (0, graphql_tag_1.default) `
    fragment ImmediateSubscriptionPreviewInvoiceFragment on ImmediateSubscriptionPreviewInvoice {
  total {
    amount
    currency
  }
  subTotal {
    amount
    currency
  }
  totalExcludingTax {
    amount
    currency
  }
  tax {
    amount
    currency
  }
  discount {
    amount
    currency
  }
  taxDetails {
    displayName
    percentage
    inclusive
  }
  discountDetails {
    type
    value
    durationType
    durationInMonths
  }
  credits {
    initial {
      amount
      currency
    }
    used {
      amount
      currency
    }
    remaining {
      amount
      currency
    }
  }
  proration {
    prorationDate
    hasProrations
    credit {
      amount
      currency
    }
    debit {
      amount
      currency
    }
    netAmount {
      amount
      currency
    }
  }
}
    `;
exports.SubscriptionPreviewInvoiceFragmentDoc = (0, graphql_tag_1.default) `
    fragment SubscriptionPreviewInvoiceFragment on SubscriptionPreviewInvoice {
  total {
    amount
    currency
  }
  subTotal {
    amount
    currency
  }
  totalExcludingTax {
    amount
    currency
  }
  tax {
    amount
    currency
  }
  discount {
    amount
    currency
  }
  taxDetails {
    displayName
    percentage
    inclusive
  }
  discountDetails {
    type
    value
    durationType
    durationInMonths
  }
}
    `;
exports.SubscriptionPreviewV2FragmentDoc = (0, graphql_tag_1.default) `
    fragment SubscriptionPreviewV2Fragment on SubscriptionPreviewV2 {
  immediateInvoice {
    ...ImmediateSubscriptionPreviewInvoiceFragment
  }
  recurringInvoice {
    ...SubscriptionPreviewInvoiceFragment
  }
  billingPeriodRange {
    start
    end
  }
  isPlanDowngrade
  hasScheduledUpdates
}
    `;
exports.SubscriptionInvoicePreviewFragmentDoc = (0, graphql_tag_1.default) `
    fragment SubscriptionInvoicePreviewFragment on SubscriptionInvoicePreview {
  amountDue {
    amount
    currency
  }
  minimumSpendAdjustment {
    amount
    currency
  }
  total {
    amount
    currency
  }
  totalExcludingTax {
    amount
    currency
  }
  subTotal {
    amount
    currency
  }
  subTotalExcludingTax {
    amount
    currency
  }
  tax {
    amount
    currency
  }
  taxDetails {
    displayName
    percentage
    inclusive
  }
  discount {
    amount
    currency
  }
  discountDetails {
    name
    type
    value
    durationType
    durationInMonths
  }
  credits {
    initial {
      amount
      currency
    }
    used {
      amount
      currency
    }
    remaining {
      amount
      currency
    }
  }
  lastUpdatedAt
  lines {
    type
    description
    costDescription
    amount {
      amount
      currency
    }
    unitPrice {
      amount
      currency
    }
    quantity
    proration
    price {
      ...PriceFragment
    }
    usageLimit
    period {
      start
      end
    }
    hasSoftLimit
    lines {
      type
      description
      costDescription
      quantity
      proration
      usageLimit
      hasSoftLimit
    }
  }
}
    `;
exports.ResetPeriodConfigurationFragmentDoc = (0, graphql_tag_1.default) `
    fragment ResetPeriodConfigurationFragment on ResetPeriodConfiguration {
  __typename
  ... on YearlyResetPeriodConfig {
    yearlyAccordingTo
  }
  ... on MonthlyResetPeriodConfig {
    monthlyAccordingTo
  }
  ... on WeeklyResetPeriodConfig {
    weeklyAccordingTo
  }
}
    `;
exports.FeatureFragmentDoc = (0, graphql_tag_1.default) `
    fragment FeatureFragment on EntitlementFeature {
  __typename
  featureType
  meterType
  featureUnits
  featureUnitsPlural
  description
  displayName
  refId
  unitTransformation {
    divide
    round
  }
}
    `;
exports.EntitlementFragmentDoc = (0, graphql_tag_1.default) `
    fragment EntitlementFragment on Entitlement {
  __typename
  isGranted
  accessDeniedReason
  customerId
  resourceId
  usageLimit
  hasUnlimitedUsage
  hasSoftLimit
  currentUsage
  requestedUsage
  requestedValues
  enumValues
  entitlementUpdatedAt
  usageUpdatedAt
  usagePeriodAnchor
  usagePeriodStart
  usagePeriodEnd
  nextResetDate
  resetPeriod
  resetPeriodConfiguration {
    ...ResetPeriodConfigurationFragment
  }
  feature {
    ...FeatureFragment
  }
}
    `;
exports.EntitlementsUpdatedPayloadFragmentDoc = (0, graphql_tag_1.default) `
    fragment EntitlementsUpdatedPayload on EntitlementsUpdated {
  customerId
  resourceId
  entitlements {
    ...EntitlementFragment
  }
}
    `;
exports.UsageUpdatedFragmentDoc = (0, graphql_tag_1.default) `
    fragment UsageUpdatedFragment on UsageMeasurementUpdated {
  customerId
  resourceId
  featureId
  currentUsage
  usagePeriodStart
  usagePeriodEnd
  nextResetDate
}
    `;
exports.EntitlementUsageUpdatedFragmentDoc = (0, graphql_tag_1.default) `
    fragment EntitlementUsageUpdated on UsageUpdated {
  usage {
    ...UsageUpdatedFragment
  }
  entitlement {
    ...EntitlementFragment
  }
}
    `;
exports.PackagePublishedPayloadFragmentDoc = (0, graphql_tag_1.default) `
    fragment PackagePublishedPayload on PackagePublished {
  accountId
  environmentId
  packageType
  packageRefId
  packageVersion
  migrationType
}
    `;
exports.CustomerPortalSubscriptionPriceFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerPortalSubscriptionPriceFragment on CustomerPortalSubscriptionPrice {
  billingPeriod
  billingModel
  blockSize
  price {
    amount
    currency
  }
  creditRate {
    amount
    customCurrencyId
  }
  feature {
    id
    refId
    displayName
    featureUnits
    featureUnitsPlural
  }
}
    `;
exports.CustomerPortalSubscriptionAddonFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerPortalSubscriptionAddonFragment on CustomerPortalAddon {
  addonId
  description
  displayName
  quantity
}
    `;
exports.CustomerPortalSubscriptionScheduledUpdateDataFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerPortalSubscriptionScheduledUpdateDataFragment on SubscriptionScheduledUpdate {
  subscriptionScheduleType
  scheduleStatus
  scheduledExecutionTime
  targetPackage {
    id
    refId
    displayName
    pricingType
  }
  scheduleVariables {
    ...ScheduleVariablesFragment
  }
}
    `;
exports.CustomerPortalSubscriptionFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerPortalSubscriptionFragment on CustomerPortalSubscription {
  subscriptionId
  planId
  planName
  pricingType
  prices {
    ...CustomerPortalSubscriptionPriceFragment
  }
  pricing {
    unitQuantity
    billingPeriod
    billingModel
    pricingType
    usageBasedEstimatedBill
    price {
      amount
      currency
    }
    creditRate {
      amount
      customCurrencyId
    }
    feature {
      featureUnits
      featureUnitsPlural
      displayName
    }
  }
  status
  trialRemainingDays
  billingPeriodRange {
    start
    end
  }
  totalPrice {
    subTotal {
      amount
      currency
    }
    total {
      amount
      currency
    }
    addonsTotal {
      amount
      currency
    }
  }
  addons {
    ...CustomerPortalSubscriptionAddonFragment
  }
  scheduledUpdates {
    ...CustomerPortalSubscriptionScheduledUpdateDataFragment
  }
}
    `;
exports.CustomerPortalEntitlementFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerPortalEntitlementFragment on Entitlement {
  isGranted
  usageLimit
  currentUsage
  hasUnlimitedUsage
  hasSoftLimit
  usagePeriodStart
  usagePeriodEnd
  nextResetDate
  resetPeriod
  resetPeriodConfiguration {
    ...ResetPeriodConfigurationFragment
  }
  feature {
    ...FeatureFragment
  }
}
    `;
exports.CustomerPortalPromotionalEntitlementFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerPortalPromotionalEntitlementFragment on CustomerPortalPromotionalEntitlement {
  displayName
  hasUnlimitedUsage
  hasSoftLimit
  usageLimit
  period
  startDate
  endDate
}
    `;
exports.CustomerPortalBillingInformationFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerPortalBillingInformationFragment on CustomerPortalBillingInformation {
  email
  name
  defaultPaymentMethodLast4Digits
  defaultPaymentMethodId
  defaultPaymentExpirationMonth
  defaultPaymentExpirationYear
  defaultPaymentMethodType
}
    `;
exports.FontVariantFragmentDoc = (0, graphql_tag_1.default) `
    fragment FontVariantFragment on FontVariant {
  fontSize
  fontWeight
}
    `;
exports.TypographyConfigurationFragmentDoc = (0, graphql_tag_1.default) `
    fragment TypographyConfigurationFragment on TypographyConfiguration {
  fontFamily
  h1 {
    ...FontVariantFragment
  }
  h2 {
    ...FontVariantFragment
  }
  h3 {
    ...FontVariantFragment
  }
  body {
    ...FontVariantFragment
  }
}
    `;
exports.CustomerPortalConfigurationFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerPortalConfigurationFragment on CustomerPortalConfiguration {
  palette {
    primary
    textColor
    backgroundColor
    borderColor
    currentPlanBackground
    iconsColor
    paywallBackgroundColor
  }
  typography {
    ...TypographyConfigurationFragment
  }
  customCss
}
    `;
exports.CustomerPortalFragmentDoc = (0, graphql_tag_1.default) `
    fragment CustomerPortalFragment on CustomerPortal {
  subscriptions {
    ...CustomerPortalSubscriptionFragment
  }
  entitlements {
    ...CustomerPortalEntitlementFragment
  }
  promotionalEntitlements {
    ...CustomerPortalPromotionalEntitlementFragment
  }
  billingInformation {
    ...CustomerPortalBillingInformationFragment
  }
  showWatermark
  billingPortalUrl
  canUpgradeSubscription
  configuration {
    ...CustomerPortalConfigurationFragment
  }
  resource {
    ...CustomerResourceFragment
  }
}
    `;
exports.CheckoutConfigurationFragmentDoc = (0, graphql_tag_1.default) `
    fragment CheckoutConfigurationFragment on CheckoutConfiguration {
  palette {
    primary
    textColor
    backgroundColor
    borderColor
    summaryBackgroundColor
    __typename
  }
  typography {
    ...TypographyConfigurationFragment
    __typename
  }
  customCss
  content {
    collectPhoneNumber
  }
  __typename
}
    `;
exports.CheckoutStateFragmentDoc = (0, graphql_tag_1.default) `
    fragment CheckoutStateFragment on CheckoutState {
  configuration {
    ...CheckoutConfigurationFragment
  }
  setupSecret
  customer {
    ...CustomerFragment
  }
  activeSubscription {
    ...SubscriptionFragment
  }
  resource {
    ...CustomerResourceFragment
  }
  plan {
    ...PlanFragment
  }
  billingIntegration {
    billingIdentifier
    credentials {
      accountId
      publicKey
    }
  }
}
    `;
exports.MockPaywallPackageEntitlementFragmentDoc = (0, graphql_tag_1.default) `
    fragment MockPaywallPackageEntitlementFragment on Entitlement {
  usageLimit
  hasUnlimitedUsage
  hasSoftLimit
  resetPeriod
  hiddenFromWidgets
  displayNameOverride
  enumValues
  isGranted
  feature {
    featureType
    meterType
    featureUnits
    featureUnitsPlural
    displayName
    description
    refId
    additionalMetaData
  }
}
    `;
exports.MockPaywallPriceFragmentDoc = (0, graphql_tag_1.default) `
    fragment MockPaywallPriceFragment on PaywallPrice {
  billingModel
  billingPeriod
  billingId
  minUnitQuantity
  maxUnitQuantity
  billingCountryCode
  price {
    amount
    currency
  }
  creditRate {
    amount
    customCurrencyId
  }
  tiersMode
  tiers {
    ...PriceTierFragment
  }
  feature {
    refId
    featureUnits
    featureUnitsPlural
    displayName
  }
  blockSize
}
    `;
exports.MockPaywallAddonDependencyFragmentDoc = (0, graphql_tag_1.default) `
    fragment MockPaywallAddonDependencyFragment on PaywallAddon {
  refId
  displayName
  description
}
    `;
exports.MockPaywallAddonFragmentDoc = (0, graphql_tag_1.default) `
    fragment MockPaywallAddonFragment on PaywallAddon {
  refId
  displayName
  description
  additionalMetaData
  billingId
  maxQuantity
  hiddenFromWidgets
  dependencies {
    ...MockPaywallAddonDependencyFragment
  }
  entitlements {
    ...MockPaywallPackageEntitlementFragment
  }
  prices {
    ...MockPaywallPriceFragment
  }
  pricingType
}
    `;
exports.MockPaywallPlanCompatiblePackageGroupsFragmentDoc = (0, graphql_tag_1.default) `
    fragment MockPaywallPlanCompatiblePackageGroupsFragment on PaywallPlanCompatiblePackageGroup {
  packageGroupId
  displayName
  description
  addons {
    ...MockPaywallAddonFragment
  }
  options {
    minItems
    freeItems
  }
}
    `;
exports.MockPaywallPlanFragmentDoc = (0, graphql_tag_1.default) `
    fragment MockPaywallPlanFragment on PaywallPlan {
  refId
  description
  displayName
  billingId
  additionalMetaData
  product {
    refId
    displayName
    description
    additionalMetaData
  }
  basePlan {
    refId
    displayName
  }
  entitlements {
    ...MockPaywallPackageEntitlementFragment
  }
  inheritedEntitlements {
    ...MockPaywallPackageEntitlementFragment
  }
  prices {
    ...MockPaywallPriceFragment
  }
  pricingType
  defaultTrialConfig {
    duration
    units
    budget {
      limit
    }
    trialEndBehavior
  }
  compatibleAddons {
    ...MockPaywallAddonFragment
  }
  compatiblePackageGroups {
    ...MockPaywallPlanCompatiblePackageGroupsFragment
  }
}
    `;
exports.PaywallCurrencyFragmentDoc = (0, graphql_tag_1.default) `
    fragment PaywallCurrencyFragment on PaywallCurrency {
  code
  symbol
}
    `;
exports.LayoutConfigurationFragmentDoc = (0, graphql_tag_1.default) `
    fragment LayoutConfigurationFragment on PaywallLayoutConfiguration {
  alignment
  planWidth
  planMargin
  planPadding
}
    `;
exports.PaywallConfigurationFragmentDoc = (0, graphql_tag_1.default) `
    fragment PaywallConfigurationFragment on PaywallConfiguration {
  palette {
    primary
    textColor
    backgroundColor
    borderColor
    currentPlanBackground
  }
  typography {
    ...TypographyConfigurationFragment
  }
  layout {
    ...LayoutConfigurationFragment
  }
  customCss
}
    `;
exports.PaywallCalculatedPricePointsFragmentDoc = (0, graphql_tag_1.default) `
    fragment PaywallCalculatedPricePointsFragment on PaywallPricePoint {
  planId
  additionalChargesMayApply
  billingPeriod
  amount
  currency
  billingCountryCode
  feature {
    refId
    featureUnits
    featureUnitsPlural
    displayName
    description
  }
}
    `;
exports.PaywallFragmentDoc = (0, graphql_tag_1.default) `
    fragment PaywallFragment on Paywall {
  plans {
    ...PlanFragment
  }
  currency {
    ...PaywallCurrencyFragment
  }
  configuration {
    ...PaywallConfigurationFragment
  }
  customer {
    ...CustomerFragment
  }
  activeSubscriptions {
    ...SubscriptionFragment
  }
  resource {
    ...CustomerResourceFragment
  }
  paywallCalculatedPricePoints {
    ...PaywallCalculatedPricePointsFragment
  }
}
    `;
exports.UsageHistoryFragmentDoc = (0, graphql_tag_1.default) `
    fragment UsageHistoryFragment on UsageHistory {
  startDate
  endDate
  markers {
    type
    timestamp
  }
  usageMeasurements {
    date
    value
    isResetPoint
  }
  groups {
    groupInfo {
      key
      value
    }
    usageMeasurements {
      date
      value
      isResetPoint
    }
  }
}
    `;
exports.UsageHistoryV2FragmentDoc = (0, graphql_tag_1.default) `
    fragment UsageHistoryV2Fragment on UsageHistoryV2 {
  markers {
    type
    timestamp
  }
  series {
    tags {
      key
      value
    }
    points {
      timestamp
      value
      isResetPoint
    }
  }
}
    `;
exports.SlimSubscriptionFragmentDoc = (0, graphql_tag_1.default) `
    fragment SlimSubscriptionFragment on CustomerSubscription {
  id
  subscriptionId
  refId
  status
  additionalMetaData
  billingId
  billingLinkUrl
  effectiveEndDate
  cancellationDate
  currentBillingPeriodEnd
  pricingType
  latestInvoice {
    ...SubscriptionInvoiceFragment
  }
  paymentCollection
  billingSyncError
  resource {
    ...CustomerResourceFragment
  }
  experimentInfo {
    name
    id
    groupType
    groupName
  }
  prices {
    usageLimit
    price {
      ...PriceFragment
    }
  }
  totalPrice {
    ...TotalPriceFragment
  }
  plan {
    id
    refId
  }
  addons {
    quantity
    addon {
      id
      refId
    }
  }
  customer {
    id
    refId
  }
}
    `;
exports.ProvisionCustomerFragmentDoc = (0, graphql_tag_1.default) `
    fragment ProvisionCustomerFragment on ProvisionedCustomer {
  customer {
    ...SlimCustomerFragment
  }
  subscriptionDecisionStrategy
  subscription {
    ...SlimSubscriptionFragment
  }
  entitlements {
    ...EntitlementFragment
  }
}
    `;
exports.ApplySubscriptionFragmentDoc = (0, graphql_tag_1.default) `
    fragment ApplySubscriptionFragment on ApplySubscription {
  subscription {
    ...SubscriptionFragment
  }
  entitlements {
    ...EntitlementFragment
  }
}
    `;
exports.ProvisionSubscriptionFragmentDoc = (0, graphql_tag_1.default) `
    fragment ProvisionSubscriptionFragment on ProvisionSubscriptionResult {
  status
  checkoutUrl
  checkoutBillingId
  subscription {
    ...SlimSubscriptionFragment
  }
  entitlements {
    ...EntitlementFragment
  }
}
    `;
exports.ReportUsageFragmentDoc = (0, graphql_tag_1.default) `
    fragment ReportUsageFragment on UsageMeasurementWithCurrentUsage {
  id
  featureId
  customerId
  resourceId
  currentUsage
  usagePeriodStart
  usagePeriodEnd
  nextResetDate
  timestamp
}
    `;
exports.CreditGrantFragmentDoc = (0, graphql_tag_1.default) `
    fragment CreditGrantFragment on CreditGrant {
  grantId
  amount
  comment
  currencyId
  customerId
  displayName
  effectiveAt
  expireAt
  grantType
  priority
  consumedAmount
  cost {
    amount
    currency
  }
  createdAt
  updatedAt
  resourceId
  additionalMetaData
}
    `;
exports.CreditsBalanceSummaryFragmentDoc = (0, graphql_tag_1.default) `
    fragment CreditsBalanceSummaryFragment on CreditBalanceSummary {
  customerId
  balances {
    currency {
      currencyId
      displayName
      symbol
    }
    currentBalance
    totalConsumed
    totalGranted
  }
}
    `;
exports.ProvisionCustomerDocument = (0, graphql_tag_1.default) `
    mutation ProvisionCustomer($input: ProvisionCustomerInput!) {
  provisionCustomer(input: $input) {
    ...ProvisionCustomerFragment
  }
}
    ${exports.ProvisionCustomerFragmentDoc}
${exports.SlimCustomerFragmentDoc}
${exports.SlimSubscriptionFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}
${exports.EntitlementFragmentDoc}
${exports.ResetPeriodConfigurationFragmentDoc}
${exports.FeatureFragmentDoc}`;
exports.ImportCustomerBulkDocument = (0, graphql_tag_1.default) `
    mutation ImportCustomerBulk($input: ImportCustomerBulkInput!) {
  importCustomersBulk(input: $input)
}
    `;
exports.ImportCustomerDocument = (0, graphql_tag_1.default) `
    mutation ImportCustomer($input: ImportCustomerInput!) {
  importCustomer: importOneCustomer(input: $input) {
    ...SlimCustomerFragment
  }
}
    ${exports.SlimCustomerFragmentDoc}`;
exports.UpdateCustomerDocument = (0, graphql_tag_1.default) `
    mutation UpdateCustomer($input: UpdateCustomerInput!) {
  updateCustomer: updateOneCustomer(input: $input) {
    ...SlimCustomerFragment
  }
}
    ${exports.SlimCustomerFragmentDoc}`;
exports.DetachCustomerPaymentMethodDocument = (0, graphql_tag_1.default) `
    mutation DetachCustomerPaymentMethod($input: DetachCustomerPaymentMethodInput!) {
  detachCustomerPaymentMethod(input: $input) {
    ...SlimCustomerFragment
  }
}
    ${exports.SlimCustomerFragmentDoc}`;
exports.GrantPromotionalEntitlementsDocument = (0, graphql_tag_1.default) `
    mutation GrantPromotionalEntitlements($input: GrantPromotionalEntitlementsInput!) {
  grantPromotionalEntitlements(input: $input) {
    ...PromotionalEntitlementFragment
  }
}
    ${exports.PromotionalEntitlementFragmentDoc}`;
exports.RevokePromotionalEntitlementDocument = (0, graphql_tag_1.default) `
    mutation RevokePromotionalEntitlement($input: RevokePromotionalEntitlementInput!) {
  revokePromotionalEntitlement(input: $input) {
    id
  }
}
    `;
exports.ProvisionSubscriptionDocument = (0, graphql_tag_1.default) `
    mutation ProvisionSubscription($input: ProvisionSubscriptionInput!) {
  provisionSubscription: provisionSubscriptionV2(input: $input) {
    ...ProvisionSubscriptionFragment
  }
}
    ${exports.ProvisionSubscriptionFragmentDoc}
${exports.SlimSubscriptionFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}
${exports.EntitlementFragmentDoc}
${exports.ResetPeriodConfigurationFragmentDoc}
${exports.FeatureFragmentDoc}`;
exports.ApplySubscriptionDocument = (0, graphql_tag_1.default) `
    mutation ApplySubscription($input: ApplySubscriptionInput!) {
  applySubscription(input: $input) {
    ...ApplySubscriptionFragment
  }
}
    ${exports.ApplySubscriptionFragmentDoc}
${exports.SubscriptionFragmentDoc}
${exports.SlimCustomerFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}
${exports.PlanFragmentDoc}
${exports.ProductFragmentDoc}
${exports.PackageEntitlementFragmentDoc}
${exports.AddonFragmentDoc}
${exports.OveragePriceFragmentDoc}
${exports.AddonDependencyFragmentDoc}
${exports.PlanCompatiblePackageGroupsFragmentDoc}
${exports.SubscriptionScheduledUpdateDataFragmentDoc}
${exports.ScheduleVariablesFragmentDoc}
${exports.SubscriptionFutureUpdateDataFragmentDoc}
${exports.SubscriptionTrialConfigurationFragmentDoc}
${exports.EntitlementFragmentDoc}
${exports.ResetPeriodConfigurationFragmentDoc}
${exports.FeatureFragmentDoc}`;
exports.ImportSubscriptionsBulkDocument = (0, graphql_tag_1.default) `
    mutation ImportSubscriptionsBulk($input: ImportSubscriptionsBulkInput!) {
  importSubscriptionsBulk(input: $input)
}
    `;
exports.UpdateSubscriptionDocument = (0, graphql_tag_1.default) `
    mutation UpdateSubscription($input: UpdateSubscriptionInput!) {
  updateSubscription: updateOneSubscription(input: $input) {
    ...SlimSubscriptionFragment
  }
}
    ${exports.SlimSubscriptionFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}`;
exports.CancelSubscriptionDocument = (0, graphql_tag_1.default) `
    mutation CancelSubscription($input: SubscriptionCancellationInput!) {
  cancelSubscription(input: $input) {
    ...SlimSubscriptionFragment
  }
}
    ${exports.SlimSubscriptionFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}`;
exports.EstimateSubscriptionDocument = (0, graphql_tag_1.default) `
    mutation EstimateSubscription($input: EstimateSubscriptionInput!) {
  estimateSubscription(input: $input) {
    ...SubscriptionPreviewFragment
  }
}
    ${exports.SubscriptionPreviewFragmentDoc}`;
exports.EstimateSubscriptionUpdateDocument = (0, graphql_tag_1.default) `
    mutation EstimateSubscriptionUpdate($input: EstimateSubscriptionUpdateInput!) {
  estimateSubscriptionUpdate(input: $input) {
    ...SubscriptionPreviewFragment
  }
}
    ${exports.SubscriptionPreviewFragmentDoc}`;
exports.PreviewSubscriptionDocument = (0, graphql_tag_1.default) `
    mutation PreviewSubscription($input: PreviewSubscriptionInput!) {
  previewSubscription(input: $input) {
    ...SubscriptionPreviewV2Fragment
  }
}
    ${exports.SubscriptionPreviewV2FragmentDoc}
${exports.ImmediateSubscriptionPreviewInvoiceFragmentDoc}
${exports.SubscriptionPreviewInvoiceFragmentDoc}`;
exports.PreviewNextInvoiceDocument = (0, graphql_tag_1.default) `
    mutation PreviewNextInvoice($input: PreviewNextInvoiceInput!) {
  previewNextInvoice(input: $input) {
    ...SubscriptionInvoicePreviewFragment
  }
}
    ${exports.SubscriptionInvoicePreviewFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}`;
exports.CancelSubscriptionUpdatesDocument = (0, graphql_tag_1.default) `
    mutation CancelSubscriptionUpdates($input: SubscriptionUpdateScheduleCancellationInput!) {
  cancelSchedule(input: $input)
}
    `;
exports.ReportUsageDocument = (0, graphql_tag_1.default) `
    mutation ReportUsage($input: ReportUsageInput!) {
  reportUsage(input: $input) {
    ...ReportUsageFragment
  }
}
    ${exports.ReportUsageFragmentDoc}`;
exports.ReportUsageBulkDocument = (0, graphql_tag_1.default) `
    mutation ReportUsageBulk($input: ReportUsageBulkInput!) {
  reportUsageBulk(input: $input) {
    ...ReportUsageFragment
  }
}
    ${exports.ReportUsageFragmentDoc}`;
exports.ReportEventDocument = (0, graphql_tag_1.default) `
    mutation ReportEvent($input: UsageEventsReportInput!) {
  reportEvent(events: $input)
}
    `;
exports.ReportEntitlementCheckRequestedDocument = (0, graphql_tag_1.default) `
    mutation ReportEntitlementCheckRequested($entitlementCheckRequested: EntitlementCheckRequested!) {
  reportEntitlementCheckRequested(
    entitlementCheckRequested: $entitlementCheckRequested
  )
}
    `;
exports.CreateSubscriptionDocument = (0, graphql_tag_1.default) `
    mutation CreateSubscription($input: SubscriptionInput!) {
  createSubscription(subscription: $input) {
    ...SlimSubscriptionFragment
  }
}
    ${exports.SlimSubscriptionFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}`;
exports.MigrateSubscriptionToLatestDocument = (0, graphql_tag_1.default) `
    mutation MigrateSubscriptionToLatest($input: SubscriptionMigrationInput!) {
  migrateSubscriptionToLatest(input: $input) {
    subscriptionId
  }
}
    `;
exports.ArchiveCustomerDocument = (0, graphql_tag_1.default) `
    mutation ArchiveCustomer($input: ArchiveCustomerInput!) {
  archiveCustomer(input: $input) {
    customerId
  }
}
    `;
exports.UnarchiveCustomerDocument = (0, graphql_tag_1.default) `
    mutation UnarchiveCustomer($input: UnarchiveCustomerInput!) {
  unarchiveCustomer(input: $input) {
    ...SlimCustomerFragment
  }
}
    ${exports.SlimCustomerFragmentDoc}`;
exports.TransferSubscriptionDocument = (0, graphql_tag_1.default) `
    mutation TransferSubscription($input: TransferSubscriptionInput!) {
  transferSubscription(input: $input) {
    ...SlimSubscriptionFragment
  }
}
    ${exports.SlimSubscriptionFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}`;
exports.DelegateSubscriptionToCustomerDocument = (0, graphql_tag_1.default) `
    mutation DelegateSubscriptionToCustomer($input: DelegateSubscriptionToCustomerInput!) {
  delegateSubscriptionToCustomer(input: $input) {
    ...SlimSubscriptionFragment
  }
}
    ${exports.SlimSubscriptionFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}`;
exports.TransferSubscriptionToResourceDocument = (0, graphql_tag_1.default) `
    mutation TransferSubscriptionToResource($input: TransferSubscriptionToResourceInput!) {
  transferSubscriptionToResource(input: $input) {
    ...SlimSubscriptionFragment
  }
}
    ${exports.SlimSubscriptionFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}`;
exports.GrantCreditsDocument = (0, graphql_tag_1.default) `
    mutation GrantCredits($input: CreditGrantInput!) {
  createCreditGrant(input: $input) {
    ...CreditGrantFragment
  }
}
    ${exports.CreditGrantFragmentDoc}`;
exports.GetCustomerByIdDocument = (0, graphql_tag_1.default) `
    query GetCustomerById($input: GetCustomerByRefIdInput!) {
  getCustomerByRefId(input: $input) {
    ...CustomerWithSubscriptionsFragment
  }
}
    ${exports.CustomerWithSubscriptionsFragmentDoc}
${exports.CustomerFragmentDoc}
${exports.SlimCustomerFragmentDoc}
${exports.CouponFragmentDoc}
${exports.PromotionalEntitlementFragmentDoc}
${exports.SubscriptionFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}
${exports.PlanFragmentDoc}
${exports.ProductFragmentDoc}
${exports.PackageEntitlementFragmentDoc}
${exports.AddonFragmentDoc}
${exports.OveragePriceFragmentDoc}
${exports.AddonDependencyFragmentDoc}
${exports.PlanCompatiblePackageGroupsFragmentDoc}
${exports.SubscriptionScheduledUpdateDataFragmentDoc}
${exports.ScheduleVariablesFragmentDoc}
${exports.SubscriptionFutureUpdateDataFragmentDoc}
${exports.SubscriptionTrialConfigurationFragmentDoc}`;
exports.GetCustomerStatisticsDocument = (0, graphql_tag_1.default) `
    query GetCustomerStatistics($input: GetCustomerByRefIdInput!) {
  getCustomerByRefId(input: $input) {
    ...CustomerStatisticsFragment
  }
}
    ${exports.CustomerStatisticsFragmentDoc}`;
exports.GetActiveSubscriptionsDocument = (0, graphql_tag_1.default) `
    query GetActiveSubscriptions($input: GetActiveSubscriptionsInput!) {
  getActiveSubscriptions(input: $input) {
    ...SubscriptionFragment
  }
}
    ${exports.SubscriptionFragmentDoc}
${exports.SlimCustomerFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}
${exports.PlanFragmentDoc}
${exports.ProductFragmentDoc}
${exports.PackageEntitlementFragmentDoc}
${exports.AddonFragmentDoc}
${exports.OveragePriceFragmentDoc}
${exports.AddonDependencyFragmentDoc}
${exports.PlanCompatiblePackageGroupsFragmentDoc}
${exports.SubscriptionScheduledUpdateDataFragmentDoc}
${exports.ScheduleVariablesFragmentDoc}
${exports.SubscriptionFutureUpdateDataFragmentDoc}
${exports.SubscriptionTrialConfigurationFragmentDoc}`;
exports.GetActiveSubscriptionsListDocument = (0, graphql_tag_1.default) `
    query GetActiveSubscriptionsList($input: GetActiveSubscriptionsInput!) {
  getActiveSubscriptions(input: $input) {
    ...SlimSubscriptionFragmentV2
  }
}
    ${exports.SlimSubscriptionFragmentV2FragmentDoc}`;
exports.GetSubscriptionsDocument = (0, graphql_tag_1.default) `
    query GetSubscriptions($filter: SubscriptionQueryFilter, $paging: CursorPaging, $sorting: [SubscriptionQuerySort!]) {
  subscriptions(filter: $filter, paging: $paging, sorting: $sorting) {
    edges {
      node {
        ...SubscriptionQueryFragment
      }
    }
    pageInfo {
      ...PageInfoFragment
    }
  }
}
    ${exports.SubscriptionQueryFragmentDoc}
${exports.PageInfoFragmentDoc}`;
exports.GetSubscriptionDocument = (0, graphql_tag_1.default) `
    query GetSubscription($input: GetSubscriptionInput!) {
  getSubscription(input: $input) {
    ...SubscriptionFragment
  }
}
    ${exports.SubscriptionFragmentDoc}
${exports.SlimCustomerFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}
${exports.PlanFragmentDoc}
${exports.ProductFragmentDoc}
${exports.PackageEntitlementFragmentDoc}
${exports.AddonFragmentDoc}
${exports.OveragePriceFragmentDoc}
${exports.AddonDependencyFragmentDoc}
${exports.PlanCompatiblePackageGroupsFragmentDoc}
${exports.SubscriptionScheduledUpdateDataFragmentDoc}
${exports.ScheduleVariablesFragmentDoc}
${exports.SubscriptionFutureUpdateDataFragmentDoc}
${exports.SubscriptionTrialConfigurationFragmentDoc}`;
exports.GetCouponsDocument = (0, graphql_tag_1.default) `
    query GetCoupons {
  coupons(filter: {status: {eq: ACTIVE}}, paging: {first: 50}) {
    edges {
      node {
        ...CouponFragment
      }
    }
  }
}
    ${exports.CouponFragmentDoc}`;
exports.GetPaywallDocument = (0, graphql_tag_1.default) `
    query GetPaywall($input: GetPaywallInput!) {
  paywall(input: $input) {
    ...PaywallFragment
  }
}
    ${exports.PaywallFragmentDoc}
${exports.PlanFragmentDoc}
${exports.ProductFragmentDoc}
${exports.PackageEntitlementFragmentDoc}
${exports.AddonFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.OveragePriceFragmentDoc}
${exports.AddonDependencyFragmentDoc}
${exports.PlanCompatiblePackageGroupsFragmentDoc}
${exports.PaywallCurrencyFragmentDoc}
${exports.PaywallConfigurationFragmentDoc}
${exports.TypographyConfigurationFragmentDoc}
${exports.FontVariantFragmentDoc}
${exports.LayoutConfigurationFragmentDoc}
${exports.CustomerFragmentDoc}
${exports.SlimCustomerFragmentDoc}
${exports.CouponFragmentDoc}
${exports.PromotionalEntitlementFragmentDoc}
${exports.SubscriptionFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.TotalPriceFragmentDoc}
${exports.SubscriptionScheduledUpdateDataFragmentDoc}
${exports.ScheduleVariablesFragmentDoc}
${exports.SubscriptionFutureUpdateDataFragmentDoc}
${exports.SubscriptionTrialConfigurationFragmentDoc}
${exports.PaywallCalculatedPricePointsFragmentDoc}`;
exports.GetEntitlementsDocument = (0, graphql_tag_1.default) `
    query GetEntitlements($query: FetchEntitlementsQuery!) {
  entitlements: cachedEntitlements(query: $query) {
    ...EntitlementFragment
  }
}
    ${exports.EntitlementFragmentDoc}
${exports.ResetPeriodConfigurationFragmentDoc}
${exports.FeatureFragmentDoc}`;
exports.GetEntitlementDocument = (0, graphql_tag_1.default) `
    query GetEntitlement($query: FetchEntitlementQuery!) {
  entitlement(query: $query) {
    ...EntitlementFragment
  }
}
    ${exports.EntitlementFragmentDoc}
${exports.ResetPeriodConfigurationFragmentDoc}
${exports.FeatureFragmentDoc}`;
exports.GetProductsDocument = (0, graphql_tag_1.default) `
    query GetProducts {
  products(paging: {first: 20}) {
    edges {
      node {
        ...ProductFragment
      }
    }
  }
}
    ${exports.ProductFragmentDoc}`;
exports.GetSdkConfigurationDocument = (0, graphql_tag_1.default) `
    query GetSdkConfiguration {
  sdkConfiguration {
    sentryDsn
    isWidgetWatermarkEnabled
  }
}
    `;
exports.GetCustomerPortalByRefIdDocument = (0, graphql_tag_1.default) `
    query GetCustomerPortalByRefId($input: CustomerPortalInput!) {
  customerPortal(input: $input) {
    ...CustomerPortalFragment
  }
}
    ${exports.CustomerPortalFragmentDoc}
${exports.CustomerPortalSubscriptionFragmentDoc}
${exports.CustomerPortalSubscriptionPriceFragmentDoc}
${exports.CustomerPortalSubscriptionAddonFragmentDoc}
${exports.CustomerPortalSubscriptionScheduledUpdateDataFragmentDoc}
${exports.ScheduleVariablesFragmentDoc}
${exports.CustomerPortalEntitlementFragmentDoc}
${exports.ResetPeriodConfigurationFragmentDoc}
${exports.FeatureFragmentDoc}
${exports.CustomerPortalPromotionalEntitlementFragmentDoc}
${exports.CustomerPortalBillingInformationFragmentDoc}
${exports.CustomerPortalConfigurationFragmentDoc}
${exports.TypographyConfigurationFragmentDoc}
${exports.FontVariantFragmentDoc}
${exports.CustomerResourceFragmentDoc}`;
exports.GetCheckoutStateDocument = (0, graphql_tag_1.default) `
    query GetCheckoutState($input: CheckoutStateInput!) {
  checkoutState(input: $input) {
    ...CheckoutStateFragment
  }
}
    ${exports.CheckoutStateFragmentDoc}
${exports.CheckoutConfigurationFragmentDoc}
${exports.TypographyConfigurationFragmentDoc}
${exports.FontVariantFragmentDoc}
${exports.CustomerFragmentDoc}
${exports.SlimCustomerFragmentDoc}
${exports.CouponFragmentDoc}
${exports.PromotionalEntitlementFragmentDoc}
${exports.SubscriptionFragmentDoc}
${exports.SubscriptionInvoiceFragmentDoc}
${exports.CustomerResourceFragmentDoc}
${exports.PriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.TotalPriceFragmentDoc}
${exports.PlanFragmentDoc}
${exports.ProductFragmentDoc}
${exports.PackageEntitlementFragmentDoc}
${exports.AddonFragmentDoc}
${exports.OveragePriceFragmentDoc}
${exports.AddonDependencyFragmentDoc}
${exports.PlanCompatiblePackageGroupsFragmentDoc}
${exports.SubscriptionScheduledUpdateDataFragmentDoc}
${exports.ScheduleVariablesFragmentDoc}
${exports.SubscriptionFutureUpdateDataFragmentDoc}
${exports.SubscriptionTrialConfigurationFragmentDoc}`;
exports.GetMockPaywallDocument = (0, graphql_tag_1.default) `
    query GetMockPaywall($input: GetPaywallInput!) {
  mockPaywall(input: $input) {
    plans {
      ...MockPaywallPlanFragment
    }
    configuration {
      ...PaywallConfigurationFragment
    }
  }
}
    ${exports.MockPaywallPlanFragmentDoc}
${exports.MockPaywallPackageEntitlementFragmentDoc}
${exports.MockPaywallPriceFragmentDoc}
${exports.PriceTierFragmentDoc}
${exports.MockPaywallAddonFragmentDoc}
${exports.MockPaywallAddonDependencyFragmentDoc}
${exports.MockPaywallPlanCompatiblePackageGroupsFragmentDoc}
${exports.PaywallConfigurationFragmentDoc}
${exports.TypographyConfigurationFragmentDoc}
${exports.FontVariantFragmentDoc}
${exports.LayoutConfigurationFragmentDoc}`;
exports.GetUsageHistoryDocument = (0, graphql_tag_1.default) `
    query GetUsageHistory($usageHistoryInput: UsageHistoryInput!) {
  usageHistory(usageHistoryInput: $usageHistoryInput) {
    ...UsageHistoryFragment
  }
}
    ${exports.UsageHistoryFragmentDoc}`;
exports.GetUsageHistoryV2Document = (0, graphql_tag_1.default) `
    query GetUsageHistoryV2($input: UsageHistoryV2Input!) {
  usageHistoryV2(input: $input) {
    ...UsageHistoryV2Fragment
  }
}
    ${exports.UsageHistoryV2FragmentDoc}`;
exports.GetCreditBalanceDocument = (0, graphql_tag_1.default) `
    query GetCreditBalance($input: CreditBalanceSummaryInput!) {
  creditBalanceSummary(input: $input) {
    ...CreditsBalanceSummaryFragment
  }
}
    ${exports.CreditsBalanceSummaryFragmentDoc}`;
exports.GetCreditGrantsDocument = (0, graphql_tag_1.default) `
    query GetCreditGrants($input: GetCreditGrantsInput!) {
  creditGrants(input: $input) {
    ...CreditGrantFragment
  }
}
    ${exports.CreditGrantFragmentDoc}`;
exports.OnEntitlementsUpdatedDocument = (0, graphql_tag_1.default) `
    subscription OnEntitlementsUpdated {
  entitlementsUpdated {
    ...EntitlementsUpdatedPayload
  }
}
    ${exports.EntitlementsUpdatedPayloadFragmentDoc}
${exports.EntitlementFragmentDoc}
${exports.ResetPeriodConfigurationFragmentDoc}
${exports.FeatureFragmentDoc}`;
exports.OnUsageUpdatedDocument = (0, graphql_tag_1.default) `
    subscription OnUsageUpdated {
  usageUpdated {
    ...EntitlementUsageUpdated
  }
}
    ${exports.EntitlementUsageUpdatedFragmentDoc}
${exports.UsageUpdatedFragmentDoc}
${exports.EntitlementFragmentDoc}
${exports.ResetPeriodConfigurationFragmentDoc}
${exports.FeatureFragmentDoc}`;
exports.OnPackagePublishedDocument = (0, graphql_tag_1.default) `
    subscription OnPackagePublished {
  packagePublished {
    ...PackagePublishedPayload
  }
}
    ${exports.PackagePublishedPayloadFragmentDoc}`;
const defaultWrapper = (action, _operationName, _operationType) => action();
function getSdk(client, withWrapper = defaultWrapper) {
    return {
        ProvisionCustomer(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ProvisionCustomerDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ProvisionCustomer', 'mutation');
        },
        ImportCustomerBulk(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ImportCustomerBulkDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ImportCustomerBulk', 'mutation');
        },
        ImportCustomer(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ImportCustomerDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ImportCustomer', 'mutation');
        },
        UpdateCustomer(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.UpdateCustomerDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'UpdateCustomer', 'mutation');
        },
        DetachCustomerPaymentMethod(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.DetachCustomerPaymentMethodDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'DetachCustomerPaymentMethod', 'mutation');
        },
        GrantPromotionalEntitlements(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GrantPromotionalEntitlementsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GrantPromotionalEntitlements', 'mutation');
        },
        RevokePromotionalEntitlement(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.RevokePromotionalEntitlementDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'RevokePromotionalEntitlement', 'mutation');
        },
        ProvisionSubscription(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ProvisionSubscriptionDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ProvisionSubscription', 'mutation');
        },
        ApplySubscription(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ApplySubscriptionDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ApplySubscription', 'mutation');
        },
        ImportSubscriptionsBulk(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ImportSubscriptionsBulkDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ImportSubscriptionsBulk', 'mutation');
        },
        UpdateSubscription(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.UpdateSubscriptionDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'UpdateSubscription', 'mutation');
        },
        CancelSubscription(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.CancelSubscriptionDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'CancelSubscription', 'mutation');
        },
        EstimateSubscription(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.EstimateSubscriptionDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'EstimateSubscription', 'mutation');
        },
        EstimateSubscriptionUpdate(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.EstimateSubscriptionUpdateDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'EstimateSubscriptionUpdate', 'mutation');
        },
        PreviewSubscription(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.PreviewSubscriptionDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'PreviewSubscription', 'mutation');
        },
        PreviewNextInvoice(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.PreviewNextInvoiceDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'PreviewNextInvoice', 'mutation');
        },
        CancelSubscriptionUpdates(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.CancelSubscriptionUpdatesDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'CancelSubscriptionUpdates', 'mutation');
        },
        ReportUsage(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ReportUsageDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ReportUsage', 'mutation');
        },
        ReportUsageBulk(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ReportUsageBulkDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ReportUsageBulk', 'mutation');
        },
        ReportEvent(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ReportEventDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ReportEvent', 'mutation');
        },
        ReportEntitlementCheckRequested(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ReportEntitlementCheckRequestedDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ReportEntitlementCheckRequested', 'mutation');
        },
        CreateSubscription(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.CreateSubscriptionDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'CreateSubscription', 'mutation');
        },
        MigrateSubscriptionToLatest(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.MigrateSubscriptionToLatestDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'MigrateSubscriptionToLatest', 'mutation');
        },
        ArchiveCustomer(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.ArchiveCustomerDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'ArchiveCustomer', 'mutation');
        },
        UnarchiveCustomer(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.UnarchiveCustomerDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'UnarchiveCustomer', 'mutation');
        },
        TransferSubscription(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.TransferSubscriptionDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'TransferSubscription', 'mutation');
        },
        DelegateSubscriptionToCustomer(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.DelegateSubscriptionToCustomerDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'DelegateSubscriptionToCustomer', 'mutation');
        },
        TransferSubscriptionToResource(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.TransferSubscriptionToResourceDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'TransferSubscriptionToResource', 'mutation');
        },
        GrantCredits(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GrantCreditsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GrantCredits', 'mutation');
        },
        GetCustomerById(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetCustomerByIdDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetCustomerById', 'query');
        },
        GetCustomerStatistics(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetCustomerStatisticsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetCustomerStatistics', 'query');
        },
        GetActiveSubscriptions(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetActiveSubscriptionsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetActiveSubscriptions', 'query');
        },
        GetActiveSubscriptionsList(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetActiveSubscriptionsListDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetActiveSubscriptionsList', 'query');
        },
        GetSubscriptions(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetSubscriptionsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetSubscriptions', 'query');
        },
        GetSubscription(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetSubscriptionDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetSubscription', 'query');
        },
        GetCoupons(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetCouponsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetCoupons', 'query');
        },
        GetPaywall(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetPaywallDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetPaywall', 'query');
        },
        GetEntitlements(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetEntitlementsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetEntitlements', 'query');
        },
        GetEntitlement(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetEntitlementDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetEntitlement', 'query');
        },
        GetProducts(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetProductsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetProducts', 'query');
        },
        GetSdkConfiguration(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetSdkConfigurationDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetSdkConfiguration', 'query');
        },
        GetCustomerPortalByRefId(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetCustomerPortalByRefIdDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetCustomerPortalByRefId', 'query');
        },
        GetCheckoutState(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetCheckoutStateDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetCheckoutState', 'query');
        },
        GetMockPaywall(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetMockPaywallDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetMockPaywall', 'query');
        },
        GetUsageHistory(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetUsageHistoryDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetUsageHistory', 'query');
        },
        GetUsageHistoryV2(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetUsageHistoryV2Document, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetUsageHistoryV2', 'query');
        },
        GetCreditBalance(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetCreditBalanceDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetCreditBalance', 'query');
        },
        GetCreditGrants(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetCreditGrantsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetCreditGrants', 'query');
        },
        OnEntitlementsUpdated(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.OnEntitlementsUpdatedDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'OnEntitlementsUpdated', 'subscription');
        },
        OnUsageUpdated(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.OnUsageUpdatedDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'OnUsageUpdated', 'subscription');
        },
        OnPackagePublished(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.OnPackagePublishedDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'OnPackagePublished', 'subscription');
        }
    };
}
exports.getSdk = getSdk;
//# sourceMappingURL=sdk.js.map